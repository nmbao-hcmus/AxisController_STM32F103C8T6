
AxisController_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800b5c8  0800b5c8  0001b5c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb44  0800bb44  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb44  0800bb44  0001bb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb4c  0800bb4c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb4c  0800bb4c  0001bb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb50  0800bb50  0001bb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800bb54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000210  0800bd64  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  0800bd64  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011491  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028cc  00000000  00000000  000316ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00033f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00034f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b79  00000000  00000000  00035dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ca3  00000000  00000000  0004f951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092155  00000000  00000000  000615f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  000f379c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b5b0 	.word	0x0800b5b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800b5b0 	.word	0x0800b5b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_uldivmod>:
 8001070:	b953      	cbnz	r3, 8001088 <__aeabi_uldivmod+0x18>
 8001072:	b94a      	cbnz	r2, 8001088 <__aeabi_uldivmod+0x18>
 8001074:	2900      	cmp	r1, #0
 8001076:	bf08      	it	eq
 8001078:	2800      	cmpeq	r0, #0
 800107a:	bf1c      	itt	ne
 800107c:	f04f 31ff 	movne.w	r1, #4294967295
 8001080:	f04f 30ff 	movne.w	r0, #4294967295
 8001084:	f000 b9ae 	b.w	80013e4 <__aeabi_idiv0>
 8001088:	f1ad 0c08 	sub.w	ip, sp, #8
 800108c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001090:	f000 f83e 	bl	8001110 <__udivmoddi4>
 8001094:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109c:	b004      	add	sp, #16
 800109e:	4770      	bx	lr

080010a0 <__aeabi_d2lz>:
 80010a0:	b538      	push	{r3, r4, r5, lr}
 80010a2:	4605      	mov	r5, r0
 80010a4:	460c      	mov	r4, r1
 80010a6:	2200      	movs	r2, #0
 80010a8:	2300      	movs	r3, #0
 80010aa:	4628      	mov	r0, r5
 80010ac:	4621      	mov	r1, r4
 80010ae:	f7ff fc85 	bl	80009bc <__aeabi_dcmplt>
 80010b2:	b928      	cbnz	r0, 80010c0 <__aeabi_d2lz+0x20>
 80010b4:	4628      	mov	r0, r5
 80010b6:	4621      	mov	r1, r4
 80010b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010bc:	f000 b80a 	b.w	80010d4 <__aeabi_d2ulz>
 80010c0:	4628      	mov	r0, r5
 80010c2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010c6:	f000 f805 	bl	80010d4 <__aeabi_d2ulz>
 80010ca:	4240      	negs	r0, r0
 80010cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010d0:	bd38      	pop	{r3, r4, r5, pc}
 80010d2:	bf00      	nop

080010d4 <__aeabi_d2ulz>:
 80010d4:	b5d0      	push	{r4, r6, r7, lr}
 80010d6:	2200      	movs	r2, #0
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <__aeabi_d2ulz+0x34>)
 80010da:	4606      	mov	r6, r0
 80010dc:	460f      	mov	r7, r1
 80010de:	f7ff f9fb 	bl	80004d8 <__aeabi_dmul>
 80010e2:	f7ff fcd1 	bl	8000a88 <__aeabi_d2uiz>
 80010e6:	4604      	mov	r4, r0
 80010e8:	f7ff f97c 	bl	80003e4 <__aeabi_ui2d>
 80010ec:	2200      	movs	r2, #0
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <__aeabi_d2ulz+0x38>)
 80010f0:	f7ff f9f2 	bl	80004d8 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4630      	mov	r0, r6
 80010fa:	4639      	mov	r1, r7
 80010fc:	f7ff f834 	bl	8000168 <__aeabi_dsub>
 8001100:	f7ff fcc2 	bl	8000a88 <__aeabi_d2uiz>
 8001104:	4621      	mov	r1, r4
 8001106:	bdd0      	pop	{r4, r6, r7, pc}
 8001108:	3df00000 	.word	0x3df00000
 800110c:	41f00000 	.word	0x41f00000

08001110 <__udivmoddi4>:
 8001110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001114:	9e08      	ldr	r6, [sp, #32]
 8001116:	460d      	mov	r5, r1
 8001118:	4604      	mov	r4, r0
 800111a:	4688      	mov	r8, r1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d14d      	bne.n	80011bc <__udivmoddi4+0xac>
 8001120:	428a      	cmp	r2, r1
 8001122:	4694      	mov	ip, r2
 8001124:	d968      	bls.n	80011f8 <__udivmoddi4+0xe8>
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	b152      	cbz	r2, 8001142 <__udivmoddi4+0x32>
 800112c:	fa01 f302 	lsl.w	r3, r1, r2
 8001130:	f1c2 0120 	rsb	r1, r2, #32
 8001134:	fa20 f101 	lsr.w	r1, r0, r1
 8001138:	fa0c fc02 	lsl.w	ip, ip, r2
 800113c:	ea41 0803 	orr.w	r8, r1, r3
 8001140:	4094      	lsls	r4, r2
 8001142:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001146:	fbb8 f7f1 	udiv	r7, r8, r1
 800114a:	fa1f fe8c 	uxth.w	lr, ip
 800114e:	fb01 8817 	mls	r8, r1, r7, r8
 8001152:	fb07 f00e 	mul.w	r0, r7, lr
 8001156:	0c23      	lsrs	r3, r4, #16
 8001158:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800115c:	4298      	cmp	r0, r3
 800115e:	d90a      	bls.n	8001176 <__udivmoddi4+0x66>
 8001160:	eb1c 0303 	adds.w	r3, ip, r3
 8001164:	f107 35ff 	add.w	r5, r7, #4294967295
 8001168:	f080 811e 	bcs.w	80013a8 <__udivmoddi4+0x298>
 800116c:	4298      	cmp	r0, r3
 800116e:	f240 811b 	bls.w	80013a8 <__udivmoddi4+0x298>
 8001172:	3f02      	subs	r7, #2
 8001174:	4463      	add	r3, ip
 8001176:	1a1b      	subs	r3, r3, r0
 8001178:	fbb3 f0f1 	udiv	r0, r3, r1
 800117c:	fb01 3310 	mls	r3, r1, r0, r3
 8001180:	fb00 fe0e 	mul.w	lr, r0, lr
 8001184:	b2a4      	uxth	r4, r4
 8001186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800118a:	45a6      	cmp	lr, r4
 800118c:	d90a      	bls.n	80011a4 <__udivmoddi4+0x94>
 800118e:	eb1c 0404 	adds.w	r4, ip, r4
 8001192:	f100 33ff 	add.w	r3, r0, #4294967295
 8001196:	f080 8109 	bcs.w	80013ac <__udivmoddi4+0x29c>
 800119a:	45a6      	cmp	lr, r4
 800119c:	f240 8106 	bls.w	80013ac <__udivmoddi4+0x29c>
 80011a0:	4464      	add	r4, ip
 80011a2:	3802      	subs	r0, #2
 80011a4:	2100      	movs	r1, #0
 80011a6:	eba4 040e 	sub.w	r4, r4, lr
 80011aa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80011ae:	b11e      	cbz	r6, 80011b8 <__udivmoddi4+0xa8>
 80011b0:	2300      	movs	r3, #0
 80011b2:	40d4      	lsrs	r4, r2
 80011b4:	e9c6 4300 	strd	r4, r3, [r6]
 80011b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011bc:	428b      	cmp	r3, r1
 80011be:	d908      	bls.n	80011d2 <__udivmoddi4+0xc2>
 80011c0:	2e00      	cmp	r6, #0
 80011c2:	f000 80ee 	beq.w	80013a2 <__udivmoddi4+0x292>
 80011c6:	2100      	movs	r1, #0
 80011c8:	e9c6 0500 	strd	r0, r5, [r6]
 80011cc:	4608      	mov	r0, r1
 80011ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d2:	fab3 f183 	clz	r1, r3
 80011d6:	2900      	cmp	r1, #0
 80011d8:	d14a      	bne.n	8001270 <__udivmoddi4+0x160>
 80011da:	42ab      	cmp	r3, r5
 80011dc:	d302      	bcc.n	80011e4 <__udivmoddi4+0xd4>
 80011de:	4282      	cmp	r2, r0
 80011e0:	f200 80fc 	bhi.w	80013dc <__udivmoddi4+0x2cc>
 80011e4:	1a84      	subs	r4, r0, r2
 80011e6:	eb65 0303 	sbc.w	r3, r5, r3
 80011ea:	2001      	movs	r0, #1
 80011ec:	4698      	mov	r8, r3
 80011ee:	2e00      	cmp	r6, #0
 80011f0:	d0e2      	beq.n	80011b8 <__udivmoddi4+0xa8>
 80011f2:	e9c6 4800 	strd	r4, r8, [r6]
 80011f6:	e7df      	b.n	80011b8 <__udivmoddi4+0xa8>
 80011f8:	b902      	cbnz	r2, 80011fc <__udivmoddi4+0xec>
 80011fa:	deff      	udf	#255	; 0xff
 80011fc:	fab2 f282 	clz	r2, r2
 8001200:	2a00      	cmp	r2, #0
 8001202:	f040 8091 	bne.w	8001328 <__udivmoddi4+0x218>
 8001206:	eba1 000c 	sub.w	r0, r1, ip
 800120a:	2101      	movs	r1, #1
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb0 f3f7 	udiv	r3, r0, r7
 8001218:	fb07 0013 	mls	r0, r7, r3, r0
 800121c:	0c25      	lsrs	r5, r4, #16
 800121e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001222:	fb0e f003 	mul.w	r0, lr, r3
 8001226:	42a8      	cmp	r0, r5
 8001228:	d908      	bls.n	800123c <__udivmoddi4+0x12c>
 800122a:	eb1c 0505 	adds.w	r5, ip, r5
 800122e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001232:	d202      	bcs.n	800123a <__udivmoddi4+0x12a>
 8001234:	42a8      	cmp	r0, r5
 8001236:	f200 80ce 	bhi.w	80013d6 <__udivmoddi4+0x2c6>
 800123a:	4643      	mov	r3, r8
 800123c:	1a2d      	subs	r5, r5, r0
 800123e:	fbb5 f0f7 	udiv	r0, r5, r7
 8001242:	fb07 5510 	mls	r5, r7, r0, r5
 8001246:	fb0e fe00 	mul.w	lr, lr, r0
 800124a:	b2a4      	uxth	r4, r4
 800124c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001250:	45a6      	cmp	lr, r4
 8001252:	d908      	bls.n	8001266 <__udivmoddi4+0x156>
 8001254:	eb1c 0404 	adds.w	r4, ip, r4
 8001258:	f100 35ff 	add.w	r5, r0, #4294967295
 800125c:	d202      	bcs.n	8001264 <__udivmoddi4+0x154>
 800125e:	45a6      	cmp	lr, r4
 8001260:	f200 80b6 	bhi.w	80013d0 <__udivmoddi4+0x2c0>
 8001264:	4628      	mov	r0, r5
 8001266:	eba4 040e 	sub.w	r4, r4, lr
 800126a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800126e:	e79e      	b.n	80011ae <__udivmoddi4+0x9e>
 8001270:	f1c1 0720 	rsb	r7, r1, #32
 8001274:	408b      	lsls	r3, r1
 8001276:	fa22 fc07 	lsr.w	ip, r2, r7
 800127a:	ea4c 0c03 	orr.w	ip, ip, r3
 800127e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001282:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001286:	fbba f8f9 	udiv	r8, sl, r9
 800128a:	fa20 f307 	lsr.w	r3, r0, r7
 800128e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001292:	408d      	lsls	r5, r1
 8001294:	fa1f fe8c 	uxth.w	lr, ip
 8001298:	431d      	orrs	r5, r3
 800129a:	fa00 f301 	lsl.w	r3, r0, r1
 800129e:	fb08 f00e 	mul.w	r0, r8, lr
 80012a2:	0c2c      	lsrs	r4, r5, #16
 80012a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012a8:	42a0      	cmp	r0, r4
 80012aa:	fa02 f201 	lsl.w	r2, r2, r1
 80012ae:	d90b      	bls.n	80012c8 <__udivmoddi4+0x1b8>
 80012b0:	eb1c 0404 	adds.w	r4, ip, r4
 80012b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80012b8:	f080 8088 	bcs.w	80013cc <__udivmoddi4+0x2bc>
 80012bc:	42a0      	cmp	r0, r4
 80012be:	f240 8085 	bls.w	80013cc <__udivmoddi4+0x2bc>
 80012c2:	f1a8 0802 	sub.w	r8, r8, #2
 80012c6:	4464      	add	r4, ip
 80012c8:	1a24      	subs	r4, r4, r0
 80012ca:	fbb4 f0f9 	udiv	r0, r4, r9
 80012ce:	fb09 4410 	mls	r4, r9, r0, r4
 80012d2:	fb00 fe0e 	mul.w	lr, r0, lr
 80012d6:	b2ad      	uxth	r5, r5
 80012d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012dc:	45a6      	cmp	lr, r4
 80012de:	d908      	bls.n	80012f2 <__udivmoddi4+0x1e2>
 80012e0:	eb1c 0404 	adds.w	r4, ip, r4
 80012e4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012e8:	d26c      	bcs.n	80013c4 <__udivmoddi4+0x2b4>
 80012ea:	45a6      	cmp	lr, r4
 80012ec:	d96a      	bls.n	80013c4 <__udivmoddi4+0x2b4>
 80012ee:	3802      	subs	r0, #2
 80012f0:	4464      	add	r4, ip
 80012f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012f6:	fba0 9502 	umull	r9, r5, r0, r2
 80012fa:	eba4 040e 	sub.w	r4, r4, lr
 80012fe:	42ac      	cmp	r4, r5
 8001300:	46c8      	mov	r8, r9
 8001302:	46ae      	mov	lr, r5
 8001304:	d356      	bcc.n	80013b4 <__udivmoddi4+0x2a4>
 8001306:	d053      	beq.n	80013b0 <__udivmoddi4+0x2a0>
 8001308:	2e00      	cmp	r6, #0
 800130a:	d069      	beq.n	80013e0 <__udivmoddi4+0x2d0>
 800130c:	ebb3 0208 	subs.w	r2, r3, r8
 8001310:	eb64 040e 	sbc.w	r4, r4, lr
 8001314:	fa22 f301 	lsr.w	r3, r2, r1
 8001318:	fa04 f707 	lsl.w	r7, r4, r7
 800131c:	431f      	orrs	r7, r3
 800131e:	40cc      	lsrs	r4, r1
 8001320:	e9c6 7400 	strd	r7, r4, [r6]
 8001324:	2100      	movs	r1, #0
 8001326:	e747      	b.n	80011b8 <__udivmoddi4+0xa8>
 8001328:	fa0c fc02 	lsl.w	ip, ip, r2
 800132c:	f1c2 0120 	rsb	r1, r2, #32
 8001330:	fa25 f301 	lsr.w	r3, r5, r1
 8001334:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001338:	fa20 f101 	lsr.w	r1, r0, r1
 800133c:	4095      	lsls	r5, r2
 800133e:	430d      	orrs	r5, r1
 8001340:	fbb3 f1f7 	udiv	r1, r3, r7
 8001344:	fb07 3311 	mls	r3, r7, r1, r3
 8001348:	fa1f fe8c 	uxth.w	lr, ip
 800134c:	0c28      	lsrs	r0, r5, #16
 800134e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001352:	fb01 f30e 	mul.w	r3, r1, lr
 8001356:	4283      	cmp	r3, r0
 8001358:	fa04 f402 	lsl.w	r4, r4, r2
 800135c:	d908      	bls.n	8001370 <__udivmoddi4+0x260>
 800135e:	eb1c 0000 	adds.w	r0, ip, r0
 8001362:	f101 38ff 	add.w	r8, r1, #4294967295
 8001366:	d22f      	bcs.n	80013c8 <__udivmoddi4+0x2b8>
 8001368:	4283      	cmp	r3, r0
 800136a:	d92d      	bls.n	80013c8 <__udivmoddi4+0x2b8>
 800136c:	3902      	subs	r1, #2
 800136e:	4460      	add	r0, ip
 8001370:	1ac0      	subs	r0, r0, r3
 8001372:	fbb0 f3f7 	udiv	r3, r0, r7
 8001376:	fb07 0013 	mls	r0, r7, r3, r0
 800137a:	b2ad      	uxth	r5, r5
 800137c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001380:	fb03 f00e 	mul.w	r0, r3, lr
 8001384:	42a8      	cmp	r0, r5
 8001386:	d908      	bls.n	800139a <__udivmoddi4+0x28a>
 8001388:	eb1c 0505 	adds.w	r5, ip, r5
 800138c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001390:	d216      	bcs.n	80013c0 <__udivmoddi4+0x2b0>
 8001392:	42a8      	cmp	r0, r5
 8001394:	d914      	bls.n	80013c0 <__udivmoddi4+0x2b0>
 8001396:	3b02      	subs	r3, #2
 8001398:	4465      	add	r5, ip
 800139a:	1a28      	subs	r0, r5, r0
 800139c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80013a0:	e738      	b.n	8001214 <__udivmoddi4+0x104>
 80013a2:	4631      	mov	r1, r6
 80013a4:	4630      	mov	r0, r6
 80013a6:	e707      	b.n	80011b8 <__udivmoddi4+0xa8>
 80013a8:	462f      	mov	r7, r5
 80013aa:	e6e4      	b.n	8001176 <__udivmoddi4+0x66>
 80013ac:	4618      	mov	r0, r3
 80013ae:	e6f9      	b.n	80011a4 <__udivmoddi4+0x94>
 80013b0:	454b      	cmp	r3, r9
 80013b2:	d2a9      	bcs.n	8001308 <__udivmoddi4+0x1f8>
 80013b4:	ebb9 0802 	subs.w	r8, r9, r2
 80013b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013bc:	3801      	subs	r0, #1
 80013be:	e7a3      	b.n	8001308 <__udivmoddi4+0x1f8>
 80013c0:	4643      	mov	r3, r8
 80013c2:	e7ea      	b.n	800139a <__udivmoddi4+0x28a>
 80013c4:	4628      	mov	r0, r5
 80013c6:	e794      	b.n	80012f2 <__udivmoddi4+0x1e2>
 80013c8:	4641      	mov	r1, r8
 80013ca:	e7d1      	b.n	8001370 <__udivmoddi4+0x260>
 80013cc:	46d0      	mov	r8, sl
 80013ce:	e77b      	b.n	80012c8 <__udivmoddi4+0x1b8>
 80013d0:	4464      	add	r4, ip
 80013d2:	3802      	subs	r0, #2
 80013d4:	e747      	b.n	8001266 <__udivmoddi4+0x156>
 80013d6:	3b02      	subs	r3, #2
 80013d8:	4465      	add	r5, ip
 80013da:	e72f      	b.n	800123c <__udivmoddi4+0x12c>
 80013dc:	4608      	mov	r0, r1
 80013de:	e706      	b.n	80011ee <__udivmoddi4+0xde>
 80013e0:	4631      	mov	r1, r6
 80013e2:	e6e9      	b.n	80011b8 <__udivmoddi4+0xa8>

080013e4 <__aeabi_idiv0>:
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <Axis_IsAPB2Timer>:
#endif

static Axis_t *s_axis_list[AXIS_MAX_INSTANCES] = { 0 };

// Helper: xác định timer thuộc APB2 (để nhân x2 clock khi prescaler != 1)
static uint8_t Axis_IsAPB2Timer(TIM_TypeDef *TIMx) {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
#ifdef TIM1
	if (TIMx == TIM1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <Axis_IsAPB2Timer+0x20>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d101      	bne.n	80013fc <Axis_IsAPB2Timer+0x14>
		return 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <Axis_IsAPB2Timer+0x16>
  if (TIMx == TIM16) return 1;
#endif
#ifdef TIM17
  if (TIMx == TIM17) return 1;
#endif
	return 0;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	40012c00 	.word	0x40012c00

0800140c <Axis_GetTimerClock>:

// Lấy clock timer (đã tính nhân 2 nếu APB prescaler != 1)
static uint32_t Axis_GetTimerClock(TIM_HandleTypeDef *htim) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	if (!htim)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <Axis_GetTimerClock+0x12>
		return 0;
 800141a:	2300      	movs	r3, #0
 800141c:	e032      	b.n	8001484 <Axis_GetTimerClock+0x78>

	RCC_ClkInitTypeDef clk;
	uint32_t flashLatency;
	HAL_RCC_GetClockConfig(&clk, &flashLatency);
 800141e:	f107 0208 	add.w	r2, r7, #8
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f003 feaf 	bl	800518c <HAL_RCC_GetClockConfig>

	uint8_t is_apb2 = Axis_IsAPB2Timer(htim->Instance) ? 1 : 0;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ffd8 	bl	80013e8 <Axis_IsAPB2Timer>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf14      	ite	ne
 800143e:	2301      	movne	r3, #1
 8001440:	2300      	moveq	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t pclk = is_apb2 ? HAL_RCC_GetPCLK2Freq() : HAL_RCC_GetPCLK1Freq();
 8001448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <Axis_GetTimerClock+0x4c>
 8001450:	f003 fe88 	bl	8005164 <HAL_RCC_GetPCLK2Freq>
 8001454:	4603      	mov	r3, r0
 8001456:	e002      	b.n	800145e <Axis_GetTimerClock+0x52>
 8001458:	f003 fe70 	bl	800513c <HAL_RCC_GetPCLK1Freq>
 800145c:	4603      	mov	r3, r0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24

	if (is_apb2) {
 8001460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <Axis_GetTimerClock+0x6a>
#if defined(RCC_CFGR_PPRE2_DIV1)
		if (clk.APB2CLKDivider != RCC_HCLK_DIV1)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <Axis_GetTimerClock+0x76>
			pclk *= 2U;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
 8001474:	e005      	b.n	8001482 <Axis_GetTimerClock+0x76>
    // fallback
    pclk *= 2U;
#endif
	} else {
#if defined(RCC_CFGR_PPRE1_DIV1)
		if (clk.APB1CLKDivider != RCC_HCLK_DIV1)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <Axis_GetTimerClock+0x76>
			pclk *= 2U;
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
#else
    // fallback
    pclk *= 2U;
#endif
	}
	return pclk;
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001484:	4618      	mov	r0, r3
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <Axis_ChannelToActive>:

// Map TIM_CHANNEL_x -> HAL_TIM_ACTIVE_CHANNEL_x
static uint32_t Axis_ChannelToActive(uint32_t Channel) {
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	switch (Channel) {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b0c      	cmp	r3, #12
 8001498:	d824      	bhi.n	80014e4 <Axis_ChannelToActive+0x58>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <Axis_ChannelToActive+0x14>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080014d5 	.word	0x080014d5
 80014a4:	080014e5 	.word	0x080014e5
 80014a8:	080014e5 	.word	0x080014e5
 80014ac:	080014e5 	.word	0x080014e5
 80014b0:	080014d9 	.word	0x080014d9
 80014b4:	080014e5 	.word	0x080014e5
 80014b8:	080014e5 	.word	0x080014e5
 80014bc:	080014e5 	.word	0x080014e5
 80014c0:	080014dd 	.word	0x080014dd
 80014c4:	080014e5 	.word	0x080014e5
 80014c8:	080014e5 	.word	0x080014e5
 80014cc:	080014e5 	.word	0x080014e5
 80014d0:	080014e1 	.word	0x080014e1
	case TIM_CHANNEL_1:
		return HAL_TIM_ACTIVE_CHANNEL_1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e007      	b.n	80014e8 <Axis_ChannelToActive+0x5c>
	case TIM_CHANNEL_2:
		return HAL_TIM_ACTIVE_CHANNEL_2;
 80014d8:	2302      	movs	r3, #2
 80014da:	e005      	b.n	80014e8 <Axis_ChannelToActive+0x5c>
	case TIM_CHANNEL_3:
		return HAL_TIM_ACTIVE_CHANNEL_3;
 80014dc:	2304      	movs	r3, #4
 80014de:	e003      	b.n	80014e8 <Axis_ChannelToActive+0x5c>
	case TIM_CHANNEL_4:
		return HAL_TIM_ACTIVE_CHANNEL_4;
 80014e0:	2308      	movs	r3, #8
 80014e2:	e001      	b.n	80014e8 <Axis_ChannelToActive+0x5c>
#if defined(TIM_CHANNEL_5) && defined(HAL_TIM_ACTIVE_CHANNEL_5)
    case TIM_CHANNEL_5: return HAL_TIM_ACTIVE_CHANNEL_5;
#endif
	default:
		return 0xFFFFFFFFu;
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <Axis_ApplyFrequency>:

// Thiết lập PSC, ARR, CCR để có PWM tần số freq_hz và duty 50%
// Lưu ý: thay đổi PSC/ARR ảnh hưởng cả các kênh cùng TIM
static HAL_StatusTypeDef Axis_ApplyFrequency(Axis_t *ax, uint32_t freq_hz) {
 80014f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014f8:	b0b2      	sub	sp, #200	; 0xc8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8001500:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
	if (!ax || !ax->htim_Pul || freq_hz == 0)
 8001504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <Axis_ApplyFrequency+0x2a>
 800150c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <Axis_ApplyFrequency+0x2a>
 8001516:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <Axis_ApplyFrequency+0x2e>
		return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e1d8      	b.n	80018d4 <Axis_ApplyFrequency+0x3e0>

	uint32_t tim_clk = Axis_GetTimerClock(ax->htim_Pul);
 8001522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff6f 	bl	800140c <Axis_GetTimerClock>
 800152e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	if (tim_clk == 0)
 8001532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <Axis_ApplyFrequency+0x4a>
		return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e1ca      	b.n	80018d4 <Axis_ApplyFrequency+0x3e0>

	// Giới hạn theo min/max
	if (ax->frequency_min > 0 && freq_hz < ax->frequency_min)
 800153e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00b      	beq.n	8001560 <Axis_ApplyFrequency+0x6c>
 8001548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001552:	4293      	cmp	r3, r2
 8001554:	d204      	bcs.n	8001560 <Axis_ApplyFrequency+0x6c>
		freq_hz = ax->frequency_min;
 8001556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (ax->frequency_max > 0 && freq_hz > ax->frequency_max)
 8001560:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <Axis_ApplyFrequency+0x8e>
 800156a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001574:	4293      	cmp	r3, r2
 8001576:	d904      	bls.n	8001582 <Axis_ApplyFrequency+0x8e>
		freq_hz = ax->frequency_max;
 8001578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	// Mục tiêu: tim_clk / (PSC * ARR) ~= freq_hz  (với ARR = AutoReload+1)
	// Giới hạn ARR tối đa: 65535 cho đa số timer (trừ TIM2/TIM5 32-bit)
	uint32_t max_arr = 0xFFFFu;
 8001582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001586:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
#ifdef TIM2
	if (ax->htim_Pul->Instance == TIM2)
 800158a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001596:	d103      	bne.n	80015a0 <Axis_ApplyFrequency+0xac>
		max_arr = 0xFFFFFFFFu; // 32-bit (F1/F4)
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
#ifdef TIM5
  if (ax->htim_Pul->Instance == TIM5) max_arr = 0xFFFFFFFFu; // 32-bit (F4)
#endif

	// Tính prescaler "ceil" để ARR không vượt quá max_arr
	uint64_t denom = (uint64_t) freq_hz * (uint64_t) max_arr;
 80015a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015a4:	2200      	movs	r2, #0
 80015a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80015a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80015aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80015ae:	2200      	movs	r2, #0
 80015b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015b4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80015bc:	460b      	mov	r3, r1
 80015be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80015c2:	fb02 f203 	mul.w	r2, r2, r3
 80015c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015ca:	4684      	mov	ip, r0
 80015cc:	fb0c f303 	mul.w	r3, ip, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	4602      	mov	r2, r0
 80015d4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80015d8:	fba2 4501 	umull	r4, r5, r2, r1
 80015dc:	442b      	add	r3, r5
 80015de:	461d      	mov	r5, r3
 80015e0:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 80015e4:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
	uint32_t presc =
			(denom == 0) ? 1 : (uint32_t) ((tim_clk + denom - 1ULL) / denom); // ceil
 80015e8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80015ec:	4313      	orrs	r3, r2
 80015ee:	d01d      	beq.n	800162c <Axis_ApplyFrequency+0x138>
 80015f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015f4:	2200      	movs	r2, #0
 80015f6:	663b      	str	r3, [r7, #96]	; 0x60
 80015f8:	667a      	str	r2, [r7, #100]	; 0x64
 80015fa:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80015fe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001602:	4604      	mov	r4, r0
 8001604:	eb14 0a02 	adds.w	sl, r4, r2
 8001608:	eb41 0b03 	adc.w	fp, r1, r3
 800160c:	f11a 33ff 	adds.w	r3, sl, #4294967295
 8001610:	65bb      	str	r3, [r7, #88]	; 0x58
 8001612:	f14b 33ff 	adc.w	r3, fp, #4294967295
 8001616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001618:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800161c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001620:	f7ff fd26 	bl	8001070 <__aeabi_uldivmod>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4613      	mov	r3, r2
 800162a:	e000      	b.n	800162e <Axis_ApplyFrequency+0x13a>
 800162c:	2301      	movs	r3, #1
	uint32_t presc =
 800162e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	if (presc < 1)
 8001632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <Axis_ApplyFrequency+0x14c>
		presc = 1;
 800163a:	2301      	movs	r3, #1
 800163c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	if (presc > 0x10000u)
 8001640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001648:	d903      	bls.n	8001652 <Axis_ApplyFrequency+0x15e>
		presc = 0x10000u; // PSC register = presc-1 => max 0xFFFF
 800164a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	uint64_t arr_calc = (uint64_t) tim_clk
 8001652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001656:	2200      	movs	r2, #0
 8001658:	653b      	str	r3, [r7, #80]	; 0x50
 800165a:	657a      	str	r2, [r7, #84]	; 0x54
			/ ((uint64_t) presc * (uint64_t) freq_hz);
 800165c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001660:	2200      	movs	r2, #0
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
 8001664:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001666:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800166a:	2200      	movs	r2, #0
 800166c:	643b      	str	r3, [r7, #64]	; 0x40
 800166e:	647a      	str	r2, [r7, #68]	; 0x44
 8001670:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001674:	4622      	mov	r2, r4
 8001676:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 800167a:	4651      	mov	r1, sl
 800167c:	fb01 f202 	mul.w	r2, r1, r2
 8001680:	465d      	mov	r5, fp
 8001682:	4618      	mov	r0, r3
 8001684:	4621      	mov	r1, r4
 8001686:	4603      	mov	r3, r0
 8001688:	fb03 f305 	mul.w	r3, r3, r5
 800168c:	4413      	add	r3, r2
 800168e:	4602      	mov	r2, r0
 8001690:	4651      	mov	r1, sl
 8001692:	fba2 2101 	umull	r2, r1, r2, r1
 8001696:	67f9      	str	r1, [r7, #124]	; 0x7c
 8001698:	67ba      	str	r2, [r7, #120]	; 0x78
 800169a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800169c:	4413      	add	r3, r2
 800169e:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint64_t arr_calc = (uint64_t) tim_clk
 80016a0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80016a4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016a8:	f7ff fce2 	bl	8001070 <__aeabi_uldivmod>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	if (arr_calc < 1)
 80016b4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80016b8:	4313      	orrs	r3, r2
 80016ba:	d105      	bne.n	80016c8 <Axis_ApplyFrequency+0x1d4>
		arr_calc = 1;
 80016bc:	f04f 0201 	mov.w	r2, #1
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	uint32_t arr_reg = (uint32_t) (arr_calc - 1ULL);
 80016c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016cc:	3b01      	subs	r3, #1
 80016ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	// Cập nhật thanh ghi
	// Lưu ý: PSC register = presc - 1
	__HAL_TIM_DISABLE(ax->htim_Pul);
 80016d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6a1a      	ldr	r2, [r3, #32]
 80016dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d115      	bne.n	8001712 <Axis_ApplyFrequency+0x21e>
 80016e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6a1a      	ldr	r2, [r3, #32]
 80016f0:	f240 4344 	movw	r3, #1092	; 0x444
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10b      	bne.n	8001712 <Axis_ApplyFrequency+0x21e>
 80016fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	f021 0301 	bic.w	r3, r1, #1
 8001710:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_PRESCALER(ax->htim_Pul, (uint16_t )(presc - 1U));
 8001712:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001716:	b29b      	uxth	r3, r3
 8001718:	3b01      	subs	r3, #1
 800171a:	b299      	uxth	r1, r3
 800171c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	460b      	mov	r3, r1
 8001726:	6293      	str	r3, [r2, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(ax->htim_Pul, arr_reg);
 8001728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001734:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001740:	60d3      	str	r3, [r2, #12]
////   Duty 50%
//  uint32_t ccr = (arr_reg + 1U) / 2U;
//  __HAL_TIM_SET_COMPARE(ax->htim_Pul, ax->Channel_Pul, ccr);

	//Duty 89%
	uint64_t period_ticks = (uint64_t) arr_reg + 1U;
 8001742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001746:	2200      	movs	r2, #0
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
 800174a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800174c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001750:	460b      	mov	r3, r1
 8001752:	3301      	adds	r3, #1
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4613      	mov	r3, r2
 8001758:	f143 0300 	adc.w	r3, r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001762:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
	uint32_t ccr = (uint32_t) ((period_ticks * 89) / 100);
 8001766:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	1894      	adds	r4, r2, r2
 8001770:	60bc      	str	r4, [r7, #8]
 8001772:	415b      	adcs	r3, r3
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800177a:	eb12 0800 	adds.w	r8, r2, r0
 800177e:	eb43 0901 	adc.w	r9, r3, r1
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800178e:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8001792:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8001796:	4690      	mov	r8, r2
 8001798:	4699      	mov	r9, r3
 800179a:	ebb8 0300 	subs.w	r3, r8, r0
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	eb69 0301 	sbc.w	r3, r9, r1
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	e9d7 8900 	ldrd	r8, r9, [r7]
 80017b2:	464c      	mov	r4, r9
 80017b4:	00e3      	lsls	r3, r4, #3
 80017b6:	46c4      	mov	ip, r8
 80017b8:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 80017bc:	4644      	mov	r4, r8
 80017be:	00e2      	lsls	r2, r4, #3
 80017c0:	4614      	mov	r4, r2
 80017c2:	461d      	mov	r5, r3
 80017c4:	4623      	mov	r3, r4
 80017c6:	181b      	adds	r3, r3, r0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ca:	462b      	mov	r3, r5
 80017cc:	eb41 0303 	adc.w	r3, r1, r3
 80017d0:	637b      	str	r3, [r7, #52]	; 0x34
 80017d2:	f04f 0264 	mov.w	r2, #100	; 0x64
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017de:	f7ff fc47 	bl	8001070 <__aeabi_uldivmod>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4613      	mov	r3, r2
 80017e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	__HAL_TIM_SET_COMPARE(ax->htim_Pul, ax->Channel_Pul, ccr);
 80017ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d107      	bne.n	8001806 <Axis_ApplyFrequency+0x312>
 80017f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
 8001804:	e020      	b.n	8001848 <Axis_ApplyFrequency+0x354>
 8001806:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b04      	cmp	r3, #4
 800180e:	d107      	bne.n	8001820 <Axis_ApplyFrequency+0x32c>
 8001810:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800181c:	6393      	str	r3, [r2, #56]	; 0x38
 800181e:	e013      	b.n	8001848 <Axis_ApplyFrequency+0x354>
 8001820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b08      	cmp	r3, #8
 8001828:	d107      	bne.n	800183a <Axis_ApplyFrequency+0x346>
 800182a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001836:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001838:	e006      	b.n	8001848 <Axis_ApplyFrequency+0x354>
 800183a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001846:	6413      	str	r3, [r2, #64]	; 0x40

	__HAL_TIM_SET_COUNTER(ax->htim_Pul, 0U);
 8001848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2200      	movs	r2, #0
 8001852:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(ax->htim_Pul);
 8001854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]

	ax->run_frequency = (uint32_t) ((uint64_t) tim_clk
 800186c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001870:	2200      	movs	r2, #0
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
 8001874:	62fa      	str	r2, [r7, #44]	; 0x2c
			/ ((uint64_t) presc * (uint64_t) (arr_reg + 1U)));
 8001876:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800187a:	2200      	movs	r2, #0
 800187c:	623b      	str	r3, [r7, #32]
 800187e:	627a      	str	r2, [r7, #36]	; 0x24
 8001880:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001884:	3301      	adds	r3, #1
 8001886:	2200      	movs	r2, #0
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	61fa      	str	r2, [r7, #28]
 800188c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001890:	4622      	mov	r2, r4
 8001892:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001896:	4641      	mov	r1, r8
 8001898:	fb01 f202 	mul.w	r2, r1, r2
 800189c:	464d      	mov	r5, r9
 800189e:	4618      	mov	r0, r3
 80018a0:	4621      	mov	r1, r4
 80018a2:	4603      	mov	r3, r0
 80018a4:	fb03 f305 	mul.w	r3, r3, r5
 80018a8:	4413      	add	r3, r2
 80018aa:	4602      	mov	r2, r0
 80018ac:	4641      	mov	r1, r8
 80018ae:	fba2 2101 	umull	r2, r1, r2, r1
 80018b2:	6779      	str	r1, [r7, #116]	; 0x74
 80018b4:	673a      	str	r2, [r7, #112]	; 0x70
 80018b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80018b8:	4413      	add	r3, r2
 80018ba:	677b      	str	r3, [r7, #116]	; 0x74
 80018bc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018c4:	f7ff fbd4 	bl	8001070 <__aeabi_uldivmod>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
	ax->run_frequency = (uint32_t) ((uint64_t) tim_clk
 80018cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018d0:	63da      	str	r2, [r3, #60]	; 0x3c
	return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	37c8      	adds	r7, #200	; 0xc8
 80018d8:	46bd      	mov	sp, r7
 80018da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080018e0 <Axis_Register>:
	ax->invert_dir = invert_dir;
	ax->state = AXIS_STATE_IDLE;
	ax->run_frequency = (frequency_min > 0) ? frequency_min : 1000U; // default
}

HAL_StatusTypeDef Axis_Register(Axis_t *ax) {
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	if (!ax)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <Axis_Register+0x12>
		return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e021      	b.n	8001936 <Axis_Register+0x56>
	if (ax->registered)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <Axis_Register+0x20>
		return HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	e01a      	b.n	8001936 <Axis_Register+0x56>
	for (uint32_t i = 0; i < AXIS_MAX_INSTANCES; ++i) {
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e013      	b.n	800192e <Axis_Register+0x4e>
		if (s_axis_list[i] == NULL) {
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <Axis_Register+0x60>)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10a      	bne.n	8001928 <Axis_Register+0x48>
			s_axis_list[i] = ax;
 8001912:	490b      	ldr	r1, [pc, #44]	; (8001940 <Axis_Register+0x60>)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ax->registered = 1;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			return HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	e006      	b.n	8001936 <Axis_Register+0x56>
	for (uint32_t i = 0; i < AXIS_MAX_INSTANCES; ++i) {
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3301      	adds	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b07      	cmp	r3, #7
 8001932:	d9e8      	bls.n	8001906 <Axis_Register+0x26>
		}
	}
	return HAL_BUSY;
 8001934:	2302      	movs	r3, #2
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	2000022c 	.word	0x2000022c

08001944 <Axis_SetFrequencyHz>:
			break;
		}
	}
}

HAL_StatusTypeDef Axis_SetFrequencyHz(Axis_t *ax, uint32_t freq_hz) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
	if (!ax)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <Axis_SetFrequencyHz+0x14>
		return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e004      	b.n	8001962 <Axis_SetFrequencyHz+0x1e>
	return Axis_ApplyFrequency(ax, freq_hz);
 8001958:	6839      	ldr	r1, [r7, #0]
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fdca 	bl	80014f4 <Axis_ApplyFrequency>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <AxisCalculatePulseToGo>:

HAL_StatusTypeDef AxisCalculatePulseToGo(Axis_t *ax, int32_t target_pos_pulse) {
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
	if (!ax)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <AxisCalculatePulseToGo+0x14>
		return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e033      	b.n	80019e6 <AxisCalculatePulseToGo+0x7c>
	if (ax->state == AXIS_STATE_RUNNING_CONST)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <AxisCalculatePulseToGo+0x22>
		return HAL_BUSY;
 8001988:	2302      	movs	r3, #2
 800198a:	e02c      	b.n	80019e6 <AxisCalculatePulseToGo+0x7c>

	ax->target_pos_pulse = target_pos_pulse;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c
	int32_t delta = ax->target_pos_pulse - ax->current_pos_pulse;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	60fb      	str	r3, [r7, #12]

	if (delta == 0) {
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10b      	bne.n	80019bc <AxisCalculatePulseToGo+0x52>
		ax->pulses_to_go = 0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
		ax->pulses_done = 0;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
		ax->dir_sign = 0;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		return HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e014      	b.n	80019e6 <AxisCalculatePulseToGo+0x7c>
	}

	ax->dir_sign = (delta > 0) ? +1 : -1;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	dd01      	ble.n	80019c6 <AxisCalculatePulseToGo+0x5c>
 80019c2:	2201      	movs	r2, #1
 80019c4:	e001      	b.n	80019ca <AxisCalculatePulseToGo+0x60>
 80019c6:	f04f 32ff 	mov.w	r2, #4294967295
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	ax->pulses_to_go = (delta > 0) ? (uint32_t) delta : (uint32_t) (-delta);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bfb8      	it	lt
 80019d6:	425b      	neglt	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	631a      	str	r2, [r3, #48]	; 0x30
	ax->pulses_done = 0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	635a      	str	r2, [r3, #52]	; 0x34

	return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <Axis_RunPosConst>:

HAL_StatusTypeDef Axis_RunPosConst(Axis_t *ax, int32_t pos_relative_pulse) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
	if (!ax)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <Axis_RunPosConst+0x14>
		return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e010      	b.n	8001a26 <Axis_RunPosConst+0x36>
	if (ax->state == AXIS_STATE_RUNNING_CONST)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <Axis_RunPosConst+0x22>
		return HAL_BUSY;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e009      	b.n	8001a26 <Axis_RunPosConst+0x36>

	int32_t target = ax->current_pos_pulse + pos_relative_pulse;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
	return AxisCalculatePulseToGo(ax, target);
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffa3 	bl	800196a <AxisCalculatePulseToGo>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <Axis_RunToPosConst>:

HAL_StatusTypeDef Axis_RunToPosConst(Axis_t *ax, int32_t pos_target_pulse) {
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
	return AxisCalculatePulseToGo(ax, pos_target_pulse);
 8001a38:	6839      	ldr	r1, [r7, #0]
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff95 	bl	800196a <AxisCalculatePulseToGo>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <Axis_StartAxisConst>:

	// 2. Lập kế hoạch di chuyển như bình thường
	return Axis_RunToPosConst(ax, pos_target_pulse);
}

HAL_StatusTypeDef Axis_StartAxisConst(Axis_t *ax) {
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	if (!ax || !ax->htim_Pul)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <Axis_StartAxisConst+0x16>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <Axis_StartAxisConst+0x1a>
		return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e07c      	b.n	8001b5e <Axis_StartAxisConst+0x114>

	if (ax->state == AXIS_STATE_RUNNING_CONST)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <Axis_StartAxisConst+0x28>
		return HAL_BUSY;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e075      	b.n	8001b5e <Axis_StartAxisConst+0x114>

	if (ax->pulses_to_go == 0) {
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <Axis_StartAxisConst+0x34>
		// Không có gì để chạy
		return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e06f      	b.n	8001b5e <Axis_StartAxisConst+0x114>
	}

	// Chốt tần số (nếu chưa set thì áp min)
	if (ax->run_frequency == 0)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10a      	bne.n	8001a9c <Axis_StartAxisConst+0x52>
		ax->run_frequency = (ax->frequency_min > 0) ? ax->frequency_min : 1000U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <Axis_StartAxisConst+0x4a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	e001      	b.n	8001a98 <Axis_StartAxisConst+0x4e>
 8001a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	63d3      	str	r3, [r2, #60]	; 0x3c
	if (Axis_ApplyFrequency(ax, ax->run_frequency) != HAL_OK) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fd26 	bl	80014f4 <Axis_ApplyFrequency>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <Axis_StartAxisConst+0x70>
		ax->state = AXIS_STATE_ERROR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e051      	b.n	8001b5e <Axis_StartAxisConst+0x114>
	}

	// Set DIR theo dir_sign và invert_dir
	if (ax->GPIOx_Dir) {
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d01b      	beq.n	8001afa <Axis_StartAxisConst+0xb0>
		GPIO_PinState dir_state = GPIO_PIN_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]
		if (ax->dir_sign > 0)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dd01      	ble.n	8001ad4 <Axis_StartAxisConst+0x8a>
			dir_state = GPIO_PIN_SET; // mặc định: + chiều => SET
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
		if (ax->invert_dir)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7f1b      	ldrb	r3, [r3, #28]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <Axis_StartAxisConst+0xa0>
			dir_state =
					(dir_state == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	bf14      	ite	ne
 8001ae2:	2301      	movne	r3, #1
 8001ae4:	2300      	moveq	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
			dir_state =
 8001ae8:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(ax->GPIOx_Dir, ax->GPIO_Pin_Dir, dir_state);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	889b      	ldrh	r3, [r3, #4]
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f002 ff3e 	bl	8004976 <HAL_GPIO_WritePin>
	}

	// Optional: bật EN nếu có
	if (ax->GPIOx_En) {
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d010      	beq.n	8001b24 <Axis_StartAxisConst+0xda>
		GPIO_PinState en_state = ax->invert_en ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(ax->GPIOx_En, ax->GPIO_Pin_En, en_state);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a18      	ldr	r0, [r3, #32]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b1c:	7bba      	ldrb	r2, [r7, #14]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f002 ff29 	bl	8004976 <HAL_GPIO_WritePin>
	}

	__HAL_TIM_SET_COUNTER(ax->htim_Pul, 0U);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24

	// Start PWM + interrupt
	HAL_StatusTypeDef st = HAL_TIM_PWM_Start_IT(ax->htim_Pul, ax->Channel_Pul);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4610      	mov	r0, r2
 8001b3a:	f003 fd89 	bl	8005650 <HAL_TIM_PWM_Start_IT>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	737b      	strb	r3, [r7, #13]
	if (st != HAL_OK) {
 8001b42:	7b7b      	ldrb	r3, [r7, #13]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <Axis_StartAxisConst+0x10a>
		ax->state = AXIS_STATE_ERROR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return st;
 8001b50:	7b7b      	ldrb	r3, [r7, #13]
 8001b52:	e004      	b.n	8001b5e <Axis_StartAxisConst+0x114>
	}

	ax->state = AXIS_STATE_RUNNING_CONST;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <Axis_Stop>:

void Axis_Stop(Axis_t *ax) {
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
	if (!ax || !ax->htim_Pul)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d015      	beq.n	8001ba0 <Axis_Stop+0x3a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d011      	beq.n	8001ba0 <Axis_Stop+0x3a>
		return;

	// Stop PWM interrupt
	HAL_TIM_PWM_Stop_IT(ax->htim_Pul, ax->Channel_Pul);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f003 fe52 	bl	8005830 <HAL_TIM_PWM_Stop_IT>
	// if (ax->GPIOx_En) {
	//   GPIO_PinState en_off = ax->invert_en ? GPIO_PIN_SET : GPIO_PIN_RESET;
	//   HAL_GPIO_WritePin(ax->GPIOx_En, ax->GPIO_Pin_En, en_off);
	// }

	if (ax->state != AXIS_STATE_ERROR) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d005      	beq.n	8001ba2 <Axis_Stop+0x3c>
		ax->state = AXIS_STATE_IDLE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b9e:	e000      	b.n	8001ba2 <Axis_Stop+0x3c>
		return;
 8001ba0:	bf00      	nop
	}
}
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <Axis_TIM_PWM_PulseFinishedCallback_Const>:
	ax->state = AXIS_STATE_ERROR;
	Axis_Stop(ax);
}

// Gọi trong HAL_TIM_PWM_PulseFinishedCallback
void Axis_TIM_PWM_PulseFinishedCallback_Const(TIM_HandleTypeDef *htim) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	if (!htim)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d050      	beq.n	8001c58 <Axis_TIM_PWM_PulseFinishedCallback_Const+0xb0>
		return;

	uint32_t active_ch = htim->Channel; // HAL_TIM_ACTIVE_CHANNEL_x
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7f1b      	ldrb	r3, [r3, #28]
 8001bba:	613b      	str	r3, [r7, #16]

	// Lặp qua registry
	for (uint32_t i = 0; i < AXIS_MAX_INSTANCES; ++i) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e046      	b.n	8001c50 <Axis_TIM_PWM_PulseFinishedCallback_Const+0xa8>
		Axis_t *ax = s_axis_list[i];
 8001bc2:	4a27      	ldr	r2, [pc, #156]	; (8001c60 <Axis_TIM_PWM_PulseFinishedCallback_Const+0xb8>)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	60fb      	str	r3, [r7, #12]
		if (!ax)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d032      	beq.n	8001c38 <Axis_TIM_PWM_PulseFinishedCallback_Const+0x90>
			continue;
		if (ax->htim_Pul != htim)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d12f      	bne.n	8001c3c <Axis_TIM_PWM_PulseFinishedCallback_Const+0x94>
			continue;
		if (ax->state != AXIS_STATE_RUNNING_CONST)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d12c      	bne.n	8001c40 <Axis_TIM_PWM_PulseFinishedCallback_Const+0x98>
			continue;

		// Kiểm tra kênh
		uint32_t expect = Axis_ChannelToActive(ax->Channel_Pul);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fc4e 	bl	800148c <Axis_ChannelToActive>
 8001bf0:	60b8      	str	r0, [r7, #8]
		if (expect == 0xFFFFFFFFu)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d024      	beq.n	8001c44 <Axis_TIM_PWM_PulseFinishedCallback_Const+0x9c>
			continue;
		if (active_ch != expect)
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d122      	bne.n	8001c48 <Axis_TIM_PWM_PulseFinishedCallback_Const+0xa0>
			continue;

		// 1 xung đã hoàn thành
		ax->pulses_done++;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	635a      	str	r2, [r3, #52]	; 0x34
		ax->current_pos_pulse += (int32_t) ax->dir_sign;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	f992 2038 	ldrsb.w	r2, [r2, #56]	; 0x38
 8001c16:	441a      	add	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28

		if (ax->pulses_done >= ax->pulses_to_go) {
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d310      	bcc.n	8001c4a <Axis_TIM_PWM_PulseFinishedCallback_Const+0xa2>
			// Hoàn tất
			Axis_Stop(ax);
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7ff ff9c 	bl	8001b66 <Axis_Stop>
			// Đảm bảo vị trí chốt đúng target khi chạy đủ
			ax->current_pos_pulse = ax->target_pos_pulse;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
 8001c36:	e008      	b.n	8001c4a <Axis_TIM_PWM_PulseFinishedCallback_Const+0xa2>
			continue;
 8001c38:	bf00      	nop
 8001c3a:	e006      	b.n	8001c4a <Axis_TIM_PWM_PulseFinishedCallback_Const+0xa2>
			continue;
 8001c3c:	bf00      	nop
 8001c3e:	e004      	b.n	8001c4a <Axis_TIM_PWM_PulseFinishedCallback_Const+0xa2>
			continue;
 8001c40:	bf00      	nop
 8001c42:	e002      	b.n	8001c4a <Axis_TIM_PWM_PulseFinishedCallback_Const+0xa2>
			continue;
 8001c44:	bf00      	nop
 8001c46:	e000      	b.n	8001c4a <Axis_TIM_PWM_PulseFinishedCallback_Const+0xa2>
			continue;
 8001c48:	bf00      	nop
	for (uint32_t i = 0; i < AXIS_MAX_INSTANCES; ++i) {
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b07      	cmp	r3, #7
 8001c54:	d9b5      	bls.n	8001bc2 <Axis_TIM_PWM_PulseFinishedCallback_Const+0x1a>
 8001c56:	e000      	b.n	8001c5a <Axis_TIM_PWM_PulseFinishedCallback_Const+0xb2>
		return;
 8001c58:	bf00      	nop
		}
	}
}
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000022c 	.word	0x2000022c

08001c64 <Axis_GetCurrentPositionMM>:
		return HAL_ERROR;
	int32_t tgt_pulse = Axis_mm_to_pulse(ax, pos_target_mm);
	return Axis_RunToPosConst(ax, tgt_pulse);
}

float Axis_GetCurrentPositionMM(const Axis_t *ax) {
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	if (!ax || ax->pulse_per_mm == 0)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <Axis_GetCurrentPositionMM+0x16>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d102      	bne.n	8001c80 <Axis_GetCurrentPositionMM+0x1c>
		return 0.0f;
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	e010      	b.n	8001ca2 <Axis_GetCurrentPositionMM+0x3e>
	return (float) ax->current_pos_pulse / (float) ax->pulse_per_mm;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f829 	bl	8000cdc <__aeabi_i2f>
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f81f 	bl	8000cd4 <__aeabi_ui2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7ff f926 	bl	8000eec <__aeabi_fdiv>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd90      	pop	{r4, r7, pc}
	...

08001cac <GCode_ParseLine>:
#include <ctype.h> // for toupper

// Biến lưu trữ trạng thái modal (lệnh G0/G1 trước đó)
static int modal_g_command = 0;

bool GCode_ParseLine(const char *line, GCode_Command_t *command) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	// Reset cấu trúc command
	memset(command, 0, sizeof(GCode_Command_t));
 8001cb6:	2224      	movs	r2, #36	; 0x24
 8001cb8:	2100      	movs	r1, #0
 8001cba:	6838      	ldr	r0, [r7, #0]
 8001cbc:	f005 face 	bl	800725c <memset>
	command->command_num = -1; // Mặc định không có lệnh G/M
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc6:	605a      	str	r2, [r3, #4]

	const char *ptr = line;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	617b      	str	r3, [r7, #20]

	while (*ptr) {
 8001ccc:	e0b4      	b.n	8001e38 <GCode_ParseLine+0x18c>
		// Bỏ qua khoảng trắng
		while (*ptr && isspace((unsigned char )*ptr))
			ptr++;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
		while (*ptr && isspace((unsigned char )*ptr))
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <GCode_ParseLine+0x44>
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	4a6b      	ldr	r2, [pc, #428]	; (8001e90 <GCode_ParseLine+0x1e4>)
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ee      	bne.n	8001cce <GCode_ParseLine+0x22>
		if (!*ptr)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a5 	beq.w	8001e44 <GCode_ParseLine+0x198>
			break; //Exit ptr when finished

		char key = toupper(*ptr); //Viet Hoa
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	74fb      	strb	r3, [r7, #19]
 8001d00:	7cfb      	ldrb	r3, [r7, #19]
 8001d02:	3301      	adds	r3, #1
 8001d04:	4a62      	ldr	r2, [pc, #392]	; (8001e90 <GCode_ParseLine+0x1e4>)
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d102      	bne.n	8001d18 <GCode_ParseLine+0x6c>
 8001d12:	7cfb      	ldrb	r3, [r7, #19]
 8001d14:	3b20      	subs	r3, #32
 8001d16:	e000      	b.n	8001d1a <GCode_ParseLine+0x6e>
 8001d18:	7cfb      	ldrb	r3, [r7, #19]
 8001d1a:	74bb      	strb	r3, [r7, #18]
		ptr++;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
		float value = atof(ptr); // Chuyển chuỗi số thành float
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f005 fa5e 	bl	80071e4 <atof>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe feca 	bl	8000ac8 <__aeabi_d2f>
 8001d34:	4603      	mov	r3, r0
 8001d36:	60fb      	str	r3, [r7, #12]

		switch (key) {
 8001d38:	7cbb      	ldrb	r3, [r7, #18]
 8001d3a:	3b46      	subs	r3, #70	; 0x46
 8001d3c:	2b14      	cmp	r3, #20
 8001d3e:	d86d      	bhi.n	8001e1c <GCode_ParseLine+0x170>
 8001d40:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <GCode_ParseLine+0x9c>)
 8001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001df7 	.word	0x08001df7
 8001d4c:	08001d9d 	.word	0x08001d9d
 8001d50:	08001e1d 	.word	0x08001e1d
 8001d54:	08001e1d 	.word	0x08001e1d
 8001d58:	08001e1d 	.word	0x08001e1d
 8001d5c:	08001e1d 	.word	0x08001e1d
 8001d60:	08001e1d 	.word	0x08001e1d
 8001d64:	08001db9 	.word	0x08001db9
 8001d68:	08001e1d 	.word	0x08001e1d
 8001d6c:	08001e1d 	.word	0x08001e1d
 8001d70:	08001e1d 	.word	0x08001e1d
 8001d74:	08001e1d 	.word	0x08001e1d
 8001d78:	08001e1d 	.word	0x08001e1d
 8001d7c:	08001e05 	.word	0x08001e05
 8001d80:	08001e1d 	.word	0x08001e1d
 8001d84:	08001e1d 	.word	0x08001e1d
 8001d88:	08001e1d 	.word	0x08001e1d
 8001d8c:	08001e1d 	.word	0x08001e1d
 8001d90:	08001dcd 	.word	0x08001dcd
 8001d94:	08001ddb 	.word	0x08001ddb
 8001d98:	08001de9 	.word	0x08001de9
		case 'G':
			command->command_type = 'G';
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2247      	movs	r2, #71	; 0x47
 8001da0:	701a      	strb	r2, [r3, #0]
			command->command_num = (int) value;
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff f93e 	bl	8001024 <__aeabi_f2iz>
 8001da8:	4602      	mov	r2, r0
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	605a      	str	r2, [r3, #4]
			modal_g_command = command->command_num;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a38      	ldr	r2, [pc, #224]	; (8001e94 <GCode_ParseLine+0x1e8>)
 8001db4:	6013      	str	r3, [r2, #0]
			break;
 8001db6:	e02d      	b.n	8001e14 <GCode_ParseLine+0x168>
		case 'M':
			command->command_type = 'M';
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	224d      	movs	r2, #77	; 0x4d
 8001dbc:	701a      	strb	r2, [r3, #0]
			command->command_num = (int) value;
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f7ff f930 	bl	8001024 <__aeabi_f2iz>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
			break;
 8001dca:	e023      	b.n	8001e14 <GCode_ParseLine+0x168>
		case 'X':
			command->x = value;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	609a      	str	r2, [r3, #8]
			command->has_x = true;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	771a      	strb	r2, [r3, #28]
			break;
 8001dd8:	e01c      	b.n	8001e14 <GCode_ParseLine+0x168>
		case 'Y':
			command->y = value;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	60da      	str	r2, [r3, #12]
			command->has_y = true;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	2201      	movs	r2, #1
 8001de4:	775a      	strb	r2, [r3, #29]
			break;
 8001de6:	e015      	b.n	8001e14 <GCode_ParseLine+0x168>
		case 'Z':
			command->z = value;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	611a      	str	r2, [r3, #16]
			command->has_z = true;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	779a      	strb	r2, [r3, #30]
			break;
 8001df4:	e00e      	b.n	8001e14 <GCode_ParseLine+0x168>
		case 'F':
			command->f = value;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	615a      	str	r2, [r3, #20]
			command->has_f = true;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	77da      	strb	r2, [r3, #31]
			break;
 8001e02:	e007      	b.n	8001e14 <GCode_ParseLine+0x168>
		case 'S':
			command->s = value;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	619a      	str	r2, [r3, #24]
			command->has_s = true;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]
			break;
 8001e12:	bf00      	nop
		}

		// Di chuyển con trỏ đến khoảng trắng tiếp theo hoặc cuối chuỗi
		while (*ptr && !isspace((unsigned char )*ptr))
 8001e14:	e002      	b.n	8001e1c <GCode_ParseLine+0x170>
			ptr++;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
		while (*ptr && !isspace((unsigned char )*ptr))
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <GCode_ParseLine+0x18c>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <GCode_ParseLine+0x1e4>)
 8001e2c:	4413      	add	r3, r2
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <GCode_ParseLine+0x16a>
	while (*ptr) {
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f47f af49 	bne.w	8001cd4 <GCode_ParseLine+0x28>
 8001e42:	e000      	b.n	8001e46 <GCode_ParseLine+0x19a>
			break; //Exit ptr when finished
 8001e44:	bf00      	nop
	}

	// Xử lý trường hợp không có G trong dòng (ví dụ: X30.513Y40.683)
	if (command->command_num == -1
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4e:	d112      	bne.n	8001e76 <GCode_ParseLine+0x1ca>
			&& (command->has_x || command->has_y || command->has_z)) {
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	7f1b      	ldrb	r3, [r3, #28]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d107      	bne.n	8001e68 <GCode_ParseLine+0x1bc>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	7f5b      	ldrb	r3, [r3, #29]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d103      	bne.n	8001e68 <GCode_ParseLine+0x1bc>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	7f9b      	ldrb	r3, [r3, #30]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <GCode_ParseLine+0x1ca>
		command->command_type = 'G';
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2247      	movs	r2, #71	; 0x47
 8001e6c:	701a      	strb	r2, [r3, #0]
		command->command_num = modal_g_command; // Dùng lại lệnh G0/G1 trước đó
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <GCode_ParseLine+0x1e8>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	605a      	str	r2, [r3, #4]
	}

	return command->command_num != -1;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	0800b6a6 	.word	0x0800b6a6
 8001e94:	2000024c 	.word	0x2000024c

08001e98 <GCode_ExecuteCommand>:
//    // (mm/min) * (1 min / 60s) * (pulses / mm) = pulses / s = Hz
//    return (uint32_t)((feedrate / 60.0f) * pulses_per_mm);
//}

void GCode_ExecuteCommand(GCode_Command_t *cmd, Axis_t *axisX, Axis_t *axisY,
		Axis_t *axisZ) {
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
//
//    if (cmd->has_f) {
//        last_feedrate = cmd->f;
//    }

	if (cmd->command_type == 'G'
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b47      	cmp	r3, #71	; 0x47
 8001eac:	d17f      	bne.n	8001fae <GCode_ExecuteCommand+0x116>
			&& (cmd->command_num == 0 || cmd->command_num == 1)) {
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <GCode_ExecuteCommand+0x26>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d177      	bne.n	8001fae <GCode_ExecuteCommand+0x116>
//            freq_y = axisY->frequency_max;
//            freq_z = axisZ->frequency_max;
//        }
		// Lập kế hoạch di chuyển
		int32_t target_x =
				cmd->has_x ?
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	7f1b      	ldrb	r3, [r3, #28]
		int32_t target_x =
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d011      	beq.n	8001eea <GCode_ExecuteCommand+0x52>
						(float) ((cmd->x * axisX->pulse_per_mm)) :
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	689c      	ldr	r4, [r3, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe ff00 	bl	8000cd4 <__aeabi_ui2f>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f7fe ff53 	bl	8000d84 <__aeabi_fmul>
 8001ede:	4603      	mov	r3, r0
		int32_t target_x =
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f89f 	bl	8001024 <__aeabi_f2iz>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	e009      	b.n	8001efe <GCode_ExecuteCommand+0x66>
						axisX->current_pos_pulse;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		int32_t target_x =
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fef4 	bl	8000cdc <__aeabi_i2f>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f894 	bl	8001024 <__aeabi_f2iz>
 8001efc:	4603      	mov	r3, r0
 8001efe:	61fb      	str	r3, [r7, #28]
		int32_t target_y =
				cmd->has_y ?
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	7f5b      	ldrb	r3, [r3, #29]
		int32_t target_y =
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d011      	beq.n	8001f2c <GCode_ExecuteCommand+0x94>
						(float) (cmd->y * axisY->pulse_per_mm) :
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	68dc      	ldr	r4, [r3, #12]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fedf 	bl	8000cd4 <__aeabi_ui2f>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7fe ff32 	bl	8000d84 <__aeabi_fmul>
 8001f20:	4603      	mov	r3, r0
		int32_t target_y =
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f87e 	bl	8001024 <__aeabi_f2iz>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	e009      	b.n	8001f40 <GCode_ExecuteCommand+0xa8>
						axisY->current_pos_pulse;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		int32_t target_y =
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fed3 	bl	8000cdc <__aeabi_i2f>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff f873 	bl	8001024 <__aeabi_f2iz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	61bb      	str	r3, [r7, #24]
		int32_t target_z =
				cmd->has_z ?
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	7f9b      	ldrb	r3, [r3, #30]
		int32_t target_z =
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d011      	beq.n	8001f6e <GCode_ExecuteCommand+0xd6>
						(float) (cmd->z * axisZ->pulse_per_mm) :
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	691c      	ldr	r4, [r3, #16]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe febe 	bl	8000cd4 <__aeabi_ui2f>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f7fe ff11 	bl	8000d84 <__aeabi_fmul>
 8001f62:	4603      	mov	r3, r0
		int32_t target_z =
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff f85d 	bl	8001024 <__aeabi_f2iz>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	e009      	b.n	8001f82 <GCode_ExecuteCommand+0xea>
						axisZ->current_pos_pulse;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		int32_t target_z =
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe feb2 	bl	8000cdc <__aeabi_i2f>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff f852 	bl	8001024 <__aeabi_f2iz>
 8001f80:	4603      	mov	r3, r0
 8001f82:	617b      	str	r3, [r7, #20]

//        Axis_RunToPosConstWithFreq(axisX, target_x, freq_x);
//        Axis_RunToPosConstWithFreq(axisY, target_y, freq_y);
//        Axis_RunToPosConstWithFreq(axisZ, target_z, freq_z);

		Axis_RunToPosConst(axisX, target_x);
 8001f84:	69f9      	ldr	r1, [r7, #28]
 8001f86:	68b8      	ldr	r0, [r7, #8]
 8001f88:	f7ff fd51 	bl	8001a2e <Axis_RunToPosConst>
		Axis_RunToPosConst(axisY, target_y);
 8001f8c:	69b9      	ldr	r1, [r7, #24]
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fd4d 	bl	8001a2e <Axis_RunToPosConst>
		Axis_RunToPosConst(axisZ, target_z);
 8001f94:	6979      	ldr	r1, [r7, #20]
 8001f96:	6838      	ldr	r0, [r7, #0]
 8001f98:	f7ff fd49 	bl	8001a2e <Axis_RunToPosConst>
		// Bắt đầu chạy
		Axis_StartAxisConst(axisX);
 8001f9c:	68b8      	ldr	r0, [r7, #8]
 8001f9e:	f7ff fd54 	bl	8001a4a <Axis_StartAxisConst>
		Axis_StartAxisConst(axisY);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fd51 	bl	8001a4a <Axis_StartAxisConst>
		Axis_StartAxisConst(axisZ);
 8001fa8:	6838      	ldr	r0, [r7, #0]
 8001faa:	f7ff fd4e 	bl	8001a4a <Axis_StartAxisConst>
			// Ví dụ: Spindle_SetSpeed(cmd->s);
		} else if (cmd->command_num == 30) {
			// TODO: Chương trình kết thúc, có thể reset hoặc về home
		}
	}
}
 8001fae:	bf00      	nop
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}

08001fb6 <Axis_IsBusy>:

// Callback phải được gọi trong HAL_TIM_PWM_PulseFinishedCallback (PWM interrupt)
void Axis_TIM_PWM_PulseFinishedCallback_Const(TIM_HandleTypeDef *htim);

// Tiện ích
static inline uint8_t Axis_IsBusy(const Axis_t *ax) {
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
	return (ax && ax->state == AXIS_STATE_RUNNING_CONST);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <Axis_IsBusy+0x1c>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <Axis_IsBusy+0x1c>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <Axis_IsBusy+0x1e>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <Axis_GetCurrentPositionPulse>:
}
static inline void Axis_SetCurrentPositionPulse(Axis_t *ax, int32_t pos_pulse) {
	if (ax)
		ax->current_pos_pulse = pos_pulse;
}
static inline int32_t Axis_GetCurrentPositionPulse(const Axis_t *ax) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	return ax ? ax->current_pos_pulse : 0;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <Axis_GetCurrentPositionPulse+0x14>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	e000      	b.n	8001ff6 <Axis_GetCurrentPositionPulse+0x16>
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <ReadButton>:
 * @brief  Reads the state of a button (assumes active low).
 * @param  port: GPIO port of the button.
 * @param  pin: GPIO pin of the button.
 * @retval 1 if pressed, 0 if not pressed.
 */
static inline uint8_t ReadButton(GPIO_TypeDef *port, uint16_t pin) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
	return (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET);
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	4619      	mov	r1, r3
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f002 fc99 	bl	8004948 <HAL_GPIO_ReadPin>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <Axis_GotoPosition>:

/**
 * @brief  Plans and starts a move to a preset position.
 * @param  pos: Pointer to the target position struct.
 */
void Axis_GotoPosition(Position_t *pos) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	Axis_RunToPosConst(&axisX, pos->x);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	4814      	ldr	r0, [pc, #80]	; (800208c <Axis_GotoPosition+0x60>)
 800203c:	f7ff fcf7 	bl	8001a2e <Axis_RunToPosConst>
	Axis_RunToPosConst(&axisY, pos->y);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4619      	mov	r1, r3
 8002046:	4812      	ldr	r0, [pc, #72]	; (8002090 <Axis_GotoPosition+0x64>)
 8002048:	f7ff fcf1 	bl	8001a2e <Axis_RunToPosConst>
	int32_t pos_z_temp = axisZ.current_pos_pulse;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <Axis_GotoPosition+0x68>)
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	60fb      	str	r3, [r7, #12]
	// Special value -9999 means "do not move Z axis"
	if (pos->z == -9999) {
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	4a10      	ldr	r2, [pc, #64]	; (8002098 <Axis_GotoPosition+0x6c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d104      	bne.n	8002066 <Axis_GotoPosition+0x3a>
		Axis_RunToPosConst(&axisZ, pos_z_temp);
 800205c:	68f9      	ldr	r1, [r7, #12]
 800205e:	480d      	ldr	r0, [pc, #52]	; (8002094 <Axis_GotoPosition+0x68>)
 8002060:	f7ff fce5 	bl	8001a2e <Axis_RunToPosConst>
 8002064:	e005      	b.n	8002072 <Axis_GotoPosition+0x46>
	} else {
		Axis_RunToPosConst(&axisZ, pos->z);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4619      	mov	r1, r3
 800206c:	4809      	ldr	r0, [pc, #36]	; (8002094 <Axis_GotoPosition+0x68>)
 800206e:	f7ff fcde 	bl	8001a2e <Axis_RunToPosConst>
	}
	Axis_StartAxisConst(&axisX);
 8002072:	4806      	ldr	r0, [pc, #24]	; (800208c <Axis_GotoPosition+0x60>)
 8002074:	f7ff fce9 	bl	8001a4a <Axis_StartAxisConst>
	Axis_StartAxisConst(&axisY);
 8002078:	4805      	ldr	r0, [pc, #20]	; (8002090 <Axis_GotoPosition+0x64>)
 800207a:	f7ff fce6 	bl	8001a4a <Axis_StartAxisConst>
	Axis_StartAxisConst(&axisZ);
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <Axis_GotoPosition+0x68>)
 8002080:	f7ff fce3 	bl	8001a4a <Axis_StartAxisConst>
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200003fc 	.word	0x200003fc
 8002090:	20000440 	.word	0x20000440
 8002094:	20000484 	.word	0x20000484
 8002098:	ffffd8f1 	.word	0xffffd8f1

0800209c <ADC_ReadChannel>:
/**
 * @brief  Reads a single ADC channel using polling mode.
 * @param  channel: The ADC channel to read (e.g., ADC_CHANNEL_0).
 * @retval The 12-bit raw ADC value.
 */
uint16_t ADC_ReadChannel(uint32_t channel) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80020a4:	f107 0308 	add.w	r3, r7, #8
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
	sConfig.Channel = channel;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80020b8:	2303      	movs	r3, #3
 80020ba:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	4619      	mov	r1, r3
 80020c2:	480c      	ldr	r0, [pc, #48]	; (80020f4 <ADC_ReadChannel+0x58>)
 80020c4:	f001 fe06 	bl	8003cd4 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&hadc1);
 80020c8:	480a      	ldr	r0, [pc, #40]	; (80020f4 <ADC_ReadChannel+0x58>)
 80020ca:	f001 fc17 	bl	80038fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80020ce:	f04f 31ff 	mov.w	r1, #4294967295
 80020d2:	4808      	ldr	r0, [pc, #32]	; (80020f4 <ADC_ReadChannel+0x58>)
 80020d4:	f001 fcec 	bl	8003ab0 <HAL_ADC_PollForConversion>
	uint16_t value = HAL_ADC_GetValue(&hadc1);
 80020d8:	4806      	ldr	r0, [pc, #24]	; (80020f4 <ADC_ReadChannel+0x58>)
 80020da:	f001 fdef 	bl	8003cbc <HAL_ADC_GetValue>
 80020de:	4603      	mov	r3, r0
 80020e0:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 80020e2:	4804      	ldr	r0, [pc, #16]	; (80020f4 <ADC_ReadChannel+0x58>)
 80020e4:	f001 fcb8 	bl	8003a58 <HAL_ADC_Stop>
	return value;
 80020e8:	8afb      	ldrh	r3, [r7, #22]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000250 	.word	0x20000250

080020f8 <Joystick_ScaleX>:
/**
 * @brief  Scales the raw ADC value for the X-axis to a -100 to 100 range.
 * @param  raw: The raw 12-bit ADC value.
 * @retval Scaled value from -100 to 100.
 */
int16_t Joystick_ScaleX(uint16_t raw) {
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
	int32_t diff = (int32_t) raw - JOY_CENTER;
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 8002108:	60bb      	str	r3, [r7, #8]

	if (diff > -JOY_DEADZONE && diff < JOY_DEADZONE)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8002110:	dd05      	ble.n	800211e <Joystick_ScaleX+0x26>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002118:	da01      	bge.n	800211e <Joystick_ScaleX+0x26>
		return 0;
 800211a:	2300      	movs	r3, #0
 800211c:	e01a      	b.n	8002154 <Joystick_ScaleX+0x5c>

	int16_t scaled = (diff * 100) / (JOY_CENTER - JOY_DEADZONE);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2264      	movs	r2, #100	; 0x64
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <Joystick_ScaleX+0x68>)
 8002128:	fb82 1203 	smull	r1, r2, r2, r3
 800212c:	1252      	asrs	r2, r2, #9
 800212e:	17db      	asrs	r3, r3, #31
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	81fb      	strh	r3, [r7, #14]
	if (scaled > 100)
 8002134:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	dd01      	ble.n	8002140 <Joystick_ScaleX+0x48>
		scaled = 100;
 800213c:	2364      	movs	r3, #100	; 0x64
 800213e:	81fb      	strh	r3, [r7, #14]
	if (scaled < -100)
 8002140:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002144:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8002148:	da02      	bge.n	8002150 <Joystick_ScaleX+0x58>
		scaled = -100;
 800214a:	f64f 739c 	movw	r3, #65436	; 0xff9c
 800214e:	81fb      	strh	r3, [r7, #14]
	return scaled;
 8002150:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	4f950fb3 	.word	0x4f950fb3

08002164 <Joystick_ScaleY>:
/**
 * @brief  Scales the raw ADC value for the Y-axis to a -100 to 100 range.
 * @param  raw: The raw 12-bit ADC value.
 * @retval Scaled value from -100 to 100.
 */
int16_t Joystick_ScaleY(uint16_t raw) {
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	80fb      	strh	r3, [r7, #6]
	int32_t diff = (int32_t) raw - JOY_CENTER;
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 8002174:	60bb      	str	r3, [r7, #8]

	if (diff > -JOY_DEADZONE && diff < JOY_DEADZONE)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 800217c:	dd05      	ble.n	800218a <Joystick_ScaleY+0x26>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002184:	da01      	bge.n	800218a <Joystick_ScaleY+0x26>
		return 0;
 8002186:	2300      	movs	r3, #0
 8002188:	e01a      	b.n	80021c0 <Joystick_ScaleY+0x5c>

	int16_t scaled = (diff * 100) / (JOY_CENTER - JOY_DEADZONE);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2264      	movs	r2, #100	; 0x64
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <Joystick_ScaleY+0x68>)
 8002194:	fb82 1203 	smull	r1, r2, r2, r3
 8002198:	1252      	asrs	r2, r2, #9
 800219a:	17db      	asrs	r3, r3, #31
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	81fb      	strh	r3, [r7, #14]
	if (scaled > 100)
 80021a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021a4:	2b64      	cmp	r3, #100	; 0x64
 80021a6:	dd01      	ble.n	80021ac <Joystick_ScaleY+0x48>
		scaled = 100;
 80021a8:	2364      	movs	r3, #100	; 0x64
 80021aa:	81fb      	strh	r3, [r7, #14]
	if (scaled < -100)
 80021ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021b0:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80021b4:	da02      	bge.n	80021bc <Joystick_ScaleY+0x58>
		scaled = -100;
 80021b6:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80021ba:	81fb      	strh	r3, [r7, #14]
	return scaled;
 80021bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	4f950fb3 	.word	0x4f950fb3

080021d0 <HandleJoystick>:
/**
 * @brief  Processes joystick input to move the X and Y axes.
 * @param  rawX: The raw 12-bit ADC value for the X-axis.
 * @param  rawY: The raw 12-bit ADC value for the Y-axis.
 */
void HandleJoystick(uint16_t rawX, uint16_t rawY) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	460a      	mov	r2, r1
 80021da:	80fb      	strh	r3, [r7, #6]
 80021dc:	4613      	mov	r3, r2
 80021de:	80bb      	strh	r3, [r7, #4]
	int16_t joyX_scaled = Joystick_ScaleX(rawX);
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff88 	bl	80020f8 <Joystick_ScaleX>
 80021e8:	4603      	mov	r3, r0
 80021ea:	82fb      	strh	r3, [r7, #22]
	int16_t joyY_scaled = Joystick_ScaleY(rawY);
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ffb8 	bl	8002164 <Joystick_ScaleY>
 80021f4:	4603      	mov	r3, r0
 80021f6:	82bb      	strh	r3, [r7, #20]

	// Handle X-axis movement
	if (joyX_scaled != 0) {
 80021f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d015      	beq.n	800222c <HandleJoystick+0x5c>
		if (!Axis_IsBusy(&axisX)) {
 8002200:	4819      	ldr	r0, [pc, #100]	; (8002268 <HandleJoystick+0x98>)
 8002202:	f7ff fed8 	bl	8001fb6 <Axis_IsBusy>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10f      	bne.n	800222c <HandleJoystick+0x5c>
			// Move a small distance. The direction depends on the joystick sign.
			int32_t dist = (joyX_scaled > 0) ? -100 : 100; // Inverted due to axis setup
 800220c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002210:	2b00      	cmp	r3, #0
 8002212:	dd02      	ble.n	800221a <HandleJoystick+0x4a>
 8002214:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002218:	e000      	b.n	800221c <HandleJoystick+0x4c>
 800221a:	2364      	movs	r3, #100	; 0x64
 800221c:	613b      	str	r3, [r7, #16]
			Axis_RunPosConst(&axisX, dist);
 800221e:	6939      	ldr	r1, [r7, #16]
 8002220:	4811      	ldr	r0, [pc, #68]	; (8002268 <HandleJoystick+0x98>)
 8002222:	f7ff fbe5 	bl	80019f0 <Axis_RunPosConst>
			Axis_StartAxisConst(&axisX);
 8002226:	4810      	ldr	r0, [pc, #64]	; (8002268 <HandleJoystick+0x98>)
 8002228:	f7ff fc0f 	bl	8001a4a <Axis_StartAxisConst>
		}
	}

	// Handle Y-axis movement
	if (joyY_scaled != 0) {
 800222c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d015      	beq.n	8002260 <HandleJoystick+0x90>
		if (!Axis_IsBusy(&axisY)) {
 8002234:	480d      	ldr	r0, [pc, #52]	; (800226c <HandleJoystick+0x9c>)
 8002236:	f7ff febe 	bl	8001fb6 <Axis_IsBusy>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10f      	bne.n	8002260 <HandleJoystick+0x90>
			int32_t dist = (joyY_scaled > 0) ? 100 : -100;
 8002240:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002244:	2b00      	cmp	r3, #0
 8002246:	dd01      	ble.n	800224c <HandleJoystick+0x7c>
 8002248:	2364      	movs	r3, #100	; 0x64
 800224a:	e001      	b.n	8002250 <HandleJoystick+0x80>
 800224c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002250:	60fb      	str	r3, [r7, #12]
			Axis_RunPosConst(&axisY, dist);
 8002252:	68f9      	ldr	r1, [r7, #12]
 8002254:	4805      	ldr	r0, [pc, #20]	; (800226c <HandleJoystick+0x9c>)
 8002256:	f7ff fbcb 	bl	80019f0 <Axis_RunPosConst>
			Axis_StartAxisConst(&axisY);
 800225a:	4804      	ldr	r0, [pc, #16]	; (800226c <HandleJoystick+0x9c>)
 800225c:	f7ff fbf5 	bl	8001a4a <Axis_StartAxisConst>
		}
	}
}
 8002260:	bf00      	nop
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200003fc 	.word	0x200003fc
 800226c:	20000440 	.word	0x20000440

08002270 <HandleManualButtons>:

/**
 * @brief  Processes input from manual control buttons (A,B,C,D,Z, L, R, Stop).
 */
void HandleManualButtons(void) {
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	if (ReadButton(A_BUTTON_GPIO_Port, A_BUTTON_Pin))
 8002274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002278:	484f      	ldr	r0, [pc, #316]	; (80023b8 <HandleManualButtons+0x148>)
 800227a:	f7ff fec1 	bl	8002000 <ReadButton>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <HandleManualButtons+0x1a>
		Axis_GotoPosition(&posA);
 8002284:	484d      	ldr	r0, [pc, #308]	; (80023bc <HandleManualButtons+0x14c>)
 8002286:	f7ff fed1 	bl	800202c <Axis_GotoPosition>
	if (ReadButton(B_BUTTON_GPIO_Port, B_BUTTON_Pin))
 800228a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800228e:	484a      	ldr	r0, [pc, #296]	; (80023b8 <HandleManualButtons+0x148>)
 8002290:	f7ff feb6 	bl	8002000 <ReadButton>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HandleManualButtons+0x30>
		Axis_GotoPosition(&posB);
 800229a:	4849      	ldr	r0, [pc, #292]	; (80023c0 <HandleManualButtons+0x150>)
 800229c:	f7ff fec6 	bl	800202c <Axis_GotoPosition>
	if (ReadButton(C_BUTTON_GPIO_Port, C_BUTTON_Pin))
 80022a0:	2102      	movs	r1, #2
 80022a2:	4845      	ldr	r0, [pc, #276]	; (80023b8 <HandleManualButtons+0x148>)
 80022a4:	f7ff feac 	bl	8002000 <ReadButton>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HandleManualButtons+0x44>
		Axis_GotoPosition(&posC);
 80022ae:	4845      	ldr	r0, [pc, #276]	; (80023c4 <HandleManualButtons+0x154>)
 80022b0:	f7ff febc 	bl	800202c <Axis_GotoPosition>
	if (ReadButton(D_BUTTON_GPIO_Port, D_BUTTON_Pin))
 80022b4:	2101      	movs	r1, #1
 80022b6:	4840      	ldr	r0, [pc, #256]	; (80023b8 <HandleManualButtons+0x148>)
 80022b8:	f7ff fea2 	bl	8002000 <ReadButton>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HandleManualButtons+0x58>
		Axis_GotoPosition(&posD);
 80022c2:	4841      	ldr	r0, [pc, #260]	; (80023c8 <HandleManualButtons+0x158>)
 80022c4:	f7ff feb2 	bl	800202c <Axis_GotoPosition>

	// Z-axis up/down
	if (ReadButton(ZUP_GPIO_Port, ZUP_Pin)) {
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	4840      	ldr	r0, [pc, #256]	; (80023cc <HandleManualButtons+0x15c>)
 80022cc:	f7ff fe98 	bl	8002000 <ReadButton>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d010      	beq.n	80022f8 <HandleManualButtons+0x88>
		g_lastButtonPressed = BUTTON_Z_UP;
 80022d6:	4b3e      	ldr	r3, [pc, #248]	; (80023d0 <HandleManualButtons+0x160>)
 80022d8:	2205      	movs	r2, #5
 80022da:	701a      	strb	r2, [r3, #0]
		if (!Axis_IsBusy(&axisZ)) {
 80022dc:	483d      	ldr	r0, [pc, #244]	; (80023d4 <HandleManualButtons+0x164>)
 80022de:	f7ff fe6a 	bl	8001fb6 <Axis_IsBusy>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d11f      	bne.n	8002328 <HandleManualButtons+0xb8>
			Axis_RunPosConst(&axisZ, +50);
 80022e8:	2132      	movs	r1, #50	; 0x32
 80022ea:	483a      	ldr	r0, [pc, #232]	; (80023d4 <HandleManualButtons+0x164>)
 80022ec:	f7ff fb80 	bl	80019f0 <Axis_RunPosConst>
			Axis_StartAxisConst(&axisZ);
 80022f0:	4838      	ldr	r0, [pc, #224]	; (80023d4 <HandleManualButtons+0x164>)
 80022f2:	f7ff fbaa 	bl	8001a4a <Axis_StartAxisConst>
 80022f6:	e017      	b.n	8002328 <HandleManualButtons+0xb8>
		}
	} else if (ReadButton(ZDOWN_GPIO_Port, ZDOWN_Pin)) {
 80022f8:	2140      	movs	r1, #64	; 0x40
 80022fa:	4834      	ldr	r0, [pc, #208]	; (80023cc <HandleManualButtons+0x15c>)
 80022fc:	f7ff fe80 	bl	8002000 <ReadButton>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d010      	beq.n	8002328 <HandleManualButtons+0xb8>
		g_lastButtonPressed = BUTTON_Z_DOWN;
 8002306:	4b32      	ldr	r3, [pc, #200]	; (80023d0 <HandleManualButtons+0x160>)
 8002308:	2206      	movs	r2, #6
 800230a:	701a      	strb	r2, [r3, #0]
		if (!Axis_IsBusy(&axisZ)) {
 800230c:	4831      	ldr	r0, [pc, #196]	; (80023d4 <HandleManualButtons+0x164>)
 800230e:	f7ff fe52 	bl	8001fb6 <Axis_IsBusy>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HandleManualButtons+0xb8>
			Axis_RunPosConst(&axisZ, -50);
 8002318:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800231c:	482d      	ldr	r0, [pc, #180]	; (80023d4 <HandleManualButtons+0x164>)
 800231e:	f7ff fb67 	bl	80019f0 <Axis_RunPosConst>
			Axis_StartAxisConst(&axisZ);
 8002322:	482c      	ldr	r0, [pc, #176]	; (80023d4 <HandleManualButtons+0x164>)
 8002324:	f7ff fb91 	bl	8001a4a <Axis_StartAxisConst>
		}
	}

	// X-axis left/right
	if (ReadButton(L_BUTTON_GPIO_Port, L_BUTTON_Pin)) {
 8002328:	2110      	movs	r1, #16
 800232a:	4828      	ldr	r0, [pc, #160]	; (80023cc <HandleManualButtons+0x15c>)
 800232c:	f7ff fe68 	bl	8002000 <ReadButton>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d011      	beq.n	800235a <HandleManualButtons+0xea>
		g_lastButtonPressed = BUTTON_L;
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HandleManualButtons+0x160>)
 8002338:	2207      	movs	r2, #7
 800233a:	701a      	strb	r2, [r3, #0]
		if (!Axis_IsBusy(&axisX)) {
 800233c:	4826      	ldr	r0, [pc, #152]	; (80023d8 <HandleManualButtons+0x168>)
 800233e:	f7ff fe3a 	bl	8001fb6 <Axis_IsBusy>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d11f      	bne.n	8002388 <HandleManualButtons+0x118>
			Axis_RunPosConst(&axisX, -100);
 8002348:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800234c:	4822      	ldr	r0, [pc, #136]	; (80023d8 <HandleManualButtons+0x168>)
 800234e:	f7ff fb4f 	bl	80019f0 <Axis_RunPosConst>
			Axis_StartAxisConst(&axisX);
 8002352:	4821      	ldr	r0, [pc, #132]	; (80023d8 <HandleManualButtons+0x168>)
 8002354:	f7ff fb79 	bl	8001a4a <Axis_StartAxisConst>
 8002358:	e016      	b.n	8002388 <HandleManualButtons+0x118>
		}
	} else if (ReadButton(R_BUTTON_GPIO_Port, R_BUTTON_Pin)) {
 800235a:	2120      	movs	r1, #32
 800235c:	481b      	ldr	r0, [pc, #108]	; (80023cc <HandleManualButtons+0x15c>)
 800235e:	f7ff fe4f 	bl	8002000 <ReadButton>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00f      	beq.n	8002388 <HandleManualButtons+0x118>
		g_lastButtonPressed = BUTTON_R;
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HandleManualButtons+0x160>)
 800236a:	2208      	movs	r2, #8
 800236c:	701a      	strb	r2, [r3, #0]
		if (!Axis_IsBusy(&axisX)) {
 800236e:	481a      	ldr	r0, [pc, #104]	; (80023d8 <HandleManualButtons+0x168>)
 8002370:	f7ff fe21 	bl	8001fb6 <Axis_IsBusy>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HandleManualButtons+0x118>
			Axis_RunPosConst(&axisX, +100);
 800237a:	2164      	movs	r1, #100	; 0x64
 800237c:	4816      	ldr	r0, [pc, #88]	; (80023d8 <HandleManualButtons+0x168>)
 800237e:	f7ff fb37 	bl	80019f0 <Axis_RunPosConst>
			Axis_StartAxisConst(&axisX);
 8002382:	4815      	ldr	r0, [pc, #84]	; (80023d8 <HandleManualButtons+0x168>)
 8002384:	f7ff fb61 	bl	8001a4a <Axis_StartAxisConst>
		}
	}

	// Stop button
	if (ReadButton(SWITCH_BUTTON_GPIO_Port, SWITCH_BUTTON_Pin)) {
 8002388:	2108      	movs	r1, #8
 800238a:	4810      	ldr	r0, [pc, #64]	; (80023cc <HandleManualButtons+0x15c>)
 800238c:	f7ff fe38 	bl	8002000 <ReadButton>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00e      	beq.n	80023b4 <HandleManualButtons+0x144>
		g_lastButtonPressed = BUTTON_SWITCH_STOP;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HandleManualButtons+0x160>)
 8002398:	2209      	movs	r2, #9
 800239a:	701a      	strb	r2, [r3, #0]
		Axis_Stop(&axisX);
 800239c:	480e      	ldr	r0, [pc, #56]	; (80023d8 <HandleManualButtons+0x168>)
 800239e:	f7ff fbe2 	bl	8001b66 <Axis_Stop>
		Axis_Stop(&axisY);
 80023a2:	480e      	ldr	r0, [pc, #56]	; (80023dc <HandleManualButtons+0x16c>)
 80023a4:	f7ff fbdf 	bl	8001b66 <Axis_Stop>
		Axis_Stop(&axisZ);
 80023a8:	480a      	ldr	r0, [pc, #40]	; (80023d4 <HandleManualButtons+0x164>)
 80023aa:	f7ff fbdc 	bl	8001b66 <Axis_Stop>
		g_machineState = MACHINE_STATE_IDLE;
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <HandleManualButtons+0x170>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
	}
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40010c00 	.word	0x40010c00
 80023bc:	20000000 	.word	0x20000000
 80023c0:	2000000c 	.word	0x2000000c
 80023c4:	20000018 	.word	0x20000018
 80023c8:	20000024 	.word	0x20000024
 80023cc:	40010800 	.word	0x40010800
 80023d0:	200003f7 	.word	0x200003f7
 80023d4:	20000484 	.word	0x20000484
 80023d8:	200003fc 	.word	0x200003fc
 80023dc:	20000440 	.word	0x20000440
 80023e0:	200003e4 	.word	0x200003e4

080023e4 <Parse_SetCommand>:
/**
 * @brief  Parses and executes a "SET" command to update preset positions.
 * @param  line: The command line received from UART.
 * @retval true if the line was a SET command, false otherwise.
 */
bool Parse_SetCommand(const char *line) {
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	if (strncmp(line, "SET", 3) != 0) {
 80023ec:	2203      	movs	r2, #3
 80023ee:	4956      	ldr	r1, [pc, #344]	; (8002548 <Parse_SetCommand+0x164>)
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f005 fbc8 	bl	8007b86 <strncmp>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <Parse_SetCommand+0x1c>
		return false;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e09e      	b.n	800253e <Parse_SetCommand+0x15a>
	}

	Position_t *target_pos = NULL;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
	const char *ptr = line + 4; // Skip "SET "
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	613b      	str	r3, [r7, #16]

	if (*ptr == 'A')
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b41      	cmp	r3, #65	; 0x41
 8002410:	d102      	bne.n	8002418 <Parse_SetCommand+0x34>
		target_pos = &posA;
 8002412:	4b4e      	ldr	r3, [pc, #312]	; (800254c <Parse_SetCommand+0x168>)
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e019      	b.n	800244c <Parse_SetCommand+0x68>
	else if (*ptr == 'B')
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b42      	cmp	r3, #66	; 0x42
 800241e:	d102      	bne.n	8002426 <Parse_SetCommand+0x42>
		target_pos = &posB;
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <Parse_SetCommand+0x16c>)
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	e012      	b.n	800244c <Parse_SetCommand+0x68>
	else if (*ptr == 'C')
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b43      	cmp	r3, #67	; 0x43
 800242c:	d102      	bne.n	8002434 <Parse_SetCommand+0x50>
		target_pos = &posC;
 800242e:	4b49      	ldr	r3, [pc, #292]	; (8002554 <Parse_SetCommand+0x170>)
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e00b      	b.n	800244c <Parse_SetCommand+0x68>
	else if (*ptr == 'D')
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b44      	cmp	r3, #68	; 0x44
 800243a:	d102      	bne.n	8002442 <Parse_SetCommand+0x5e>
		target_pos = &posD;
 800243c:	4b46      	ldr	r3, [pc, #280]	; (8002558 <Parse_SetCommand+0x174>)
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	e004      	b.n	800244c <Parse_SetCommand+0x68>
	else {
		UART_Transmit("Error: Invalid position name.\r\n");
 8002442:	4846      	ldr	r0, [pc, #280]	; (800255c <Parse_SetCommand+0x178>)
 8002444:	f001 f89c 	bl	8003580 <UART_Transmit>
		return true; // It was a SET command, but it failed.
 8002448:	2301      	movs	r3, #1
 800244a:	e078      	b.n	800253e <Parse_SetCommand+0x15a>
	}

	char *coord_ptr;
	if ((coord_ptr = strstr(ptr, "X"))) {
 800244c:	2158      	movs	r1, #88	; 0x58
 800244e:	6938      	ldr	r0, [r7, #16]
 8002450:	f005 fb8c 	bl	8007b6c <strchr>
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01e      	beq.n	800249a <Parse_SetCommand+0xb6>
		target_pos->x = (float) (atof(coord_ptr + 1) * axisX.pulse_per_mm);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3301      	adds	r3, #1
 8002460:	4618      	mov	r0, r3
 8002462:	f004 febf 	bl	80071e4 <atof>
 8002466:	4604      	mov	r4, r0
 8002468:	460d      	mov	r5, r1
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <Parse_SetCommand+0x17c>)
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fd ffb8 	bl	80003e4 <__aeabi_ui2d>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4620      	mov	r0, r4
 800247a:	4629      	mov	r1, r5
 800247c:	f7fe f82c 	bl	80004d8 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe fb1e 	bl	8000ac8 <__aeabi_d2f>
 800248c:	4603      	mov	r3, r0
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fdc8 	bl	8001024 <__aeabi_f2iz>
 8002494:	4602      	mov	r2, r0
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	601a      	str	r2, [r3, #0]
	}
	if ((coord_ptr = strstr(ptr, "Y"))) {
 800249a:	2159      	movs	r1, #89	; 0x59
 800249c:	6938      	ldr	r0, [r7, #16]
 800249e:	f005 fb65 	bl	8007b6c <strchr>
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d01e      	beq.n	80024e8 <Parse_SetCommand+0x104>
		target_pos->y = (float) (atof(coord_ptr + 1) * axisY.pulse_per_mm);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3301      	adds	r3, #1
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 fe98 	bl	80071e4 <atof>
 80024b4:	4604      	mov	r4, r0
 80024b6:	460d      	mov	r5, r1
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <Parse_SetCommand+0x180>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fd ff91 	bl	80003e4 <__aeabi_ui2d>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4620      	mov	r0, r4
 80024c8:	4629      	mov	r1, r5
 80024ca:	f7fe f805 	bl	80004d8 <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fe faf7 	bl	8000ac8 <__aeabi_d2f>
 80024da:	4603      	mov	r3, r0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fda1 	bl	8001024 <__aeabi_f2iz>
 80024e2:	4602      	mov	r2, r0
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	605a      	str	r2, [r3, #4]
	}
	if ((coord_ptr = strstr(ptr, "Z"))) {
 80024e8:	215a      	movs	r1, #90	; 0x5a
 80024ea:	6938      	ldr	r0, [r7, #16]
 80024ec:	f005 fb3e 	bl	8007b6c <strchr>
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01e      	beq.n	8002536 <Parse_SetCommand+0x152>
		target_pos->z = (float) (atof(coord_ptr + 1) * axisZ.pulse_per_mm);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3301      	adds	r3, #1
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 fe71 	bl	80071e4 <atof>
 8002502:	4604      	mov	r4, r0
 8002504:	460d      	mov	r5, r1
 8002506:	4b18      	ldr	r3, [pc, #96]	; (8002568 <Parse_SetCommand+0x184>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fd ff6a 	bl	80003e4 <__aeabi_ui2d>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4620      	mov	r0, r4
 8002516:	4629      	mov	r1, r5
 8002518:	f7fd ffde 	bl	80004d8 <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f7fe fad0 	bl	8000ac8 <__aeabi_d2f>
 8002528:	4603      	mov	r3, r0
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fd7a 	bl	8001024 <__aeabi_f2iz>
 8002530:	4602      	mov	r2, r0
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	609a      	str	r2, [r3, #8]
	}

	UART_Transmit("Position set OK\r\n");
 8002536:	480d      	ldr	r0, [pc, #52]	; (800256c <Parse_SetCommand+0x188>)
 8002538:	f001 f822 	bl	8003580 <UART_Transmit>
	return true;
 800253c:	2301      	movs	r3, #1
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bdb0      	pop	{r4, r5, r7, pc}
 8002546:	bf00      	nop
 8002548:	0800b5c8 	.word	0x0800b5c8
 800254c:	20000000 	.word	0x20000000
 8002550:	2000000c 	.word	0x2000000c
 8002554:	20000018 	.word	0x20000018
 8002558:	20000024 	.word	0x20000024
 800255c:	0800b5cc 	.word	0x0800b5cc
 8002560:	200003fc 	.word	0x200003fc
 8002564:	20000440 	.word	0x20000440
 8002568:	20000484 	.word	0x20000484
 800256c:	0800b5ec 	.word	0x0800b5ec

08002570 <Parse_GotoCommand>:
/**
 * @brief  Parses and executes a "GOTO" command to Move to a point.
 * @param  line: The command line received from UART.
 * @retval true if the line was a GOTO command, false otherwise.
 */
bool Parse_GotoCommand(const char *line) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	if (strncmp(line, "GOTO", 4) != 0) {
 8002578:	2204      	movs	r2, #4
 800257a:	491c      	ldr	r1, [pc, #112]	; (80025ec <Parse_GotoCommand+0x7c>)
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f005 fb02 	bl	8007b86 <strncmp>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <Parse_GotoCommand+0x1c>
		return false;
 8002588:	2300      	movs	r3, #0
 800258a:	e02b      	b.n	80025e4 <Parse_GotoCommand+0x74>
	}
	const char *ptr = line + 5; // Skip "GOTO "
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3305      	adds	r3, #5
 8002590:	60fb      	str	r3, [r7, #12]
	if (*ptr == 'A')
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b41      	cmp	r3, #65	; 0x41
 8002598:	d103      	bne.n	80025a2 <Parse_GotoCommand+0x32>
		Axis_GotoPosition(&posA);
 800259a:	4815      	ldr	r0, [pc, #84]	; (80025f0 <Parse_GotoCommand+0x80>)
 800259c:	f7ff fd46 	bl	800202c <Axis_GotoPosition>
 80025a0:	e01c      	b.n	80025dc <Parse_GotoCommand+0x6c>
	else if (*ptr == 'B')
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b42      	cmp	r3, #66	; 0x42
 80025a8:	d103      	bne.n	80025b2 <Parse_GotoCommand+0x42>
		Axis_GotoPosition(&posB);
 80025aa:	4812      	ldr	r0, [pc, #72]	; (80025f4 <Parse_GotoCommand+0x84>)
 80025ac:	f7ff fd3e 	bl	800202c <Axis_GotoPosition>
 80025b0:	e014      	b.n	80025dc <Parse_GotoCommand+0x6c>
	else if (*ptr == 'C')
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b43      	cmp	r3, #67	; 0x43
 80025b8:	d103      	bne.n	80025c2 <Parse_GotoCommand+0x52>
		Axis_GotoPosition(&posC);
 80025ba:	480f      	ldr	r0, [pc, #60]	; (80025f8 <Parse_GotoCommand+0x88>)
 80025bc:	f7ff fd36 	bl	800202c <Axis_GotoPosition>
 80025c0:	e00c      	b.n	80025dc <Parse_GotoCommand+0x6c>
	else if (*ptr == 'D')
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b44      	cmp	r3, #68	; 0x44
 80025c8:	d103      	bne.n	80025d2 <Parse_GotoCommand+0x62>
		Axis_GotoPosition(&posD);
 80025ca:	480c      	ldr	r0, [pc, #48]	; (80025fc <Parse_GotoCommand+0x8c>)
 80025cc:	f7ff fd2e 	bl	800202c <Axis_GotoPosition>
 80025d0:	e004      	b.n	80025dc <Parse_GotoCommand+0x6c>
	else {
		UART_Transmit("Error: Invalid Go To Position.\r\n");
 80025d2:	480b      	ldr	r0, [pc, #44]	; (8002600 <Parse_GotoCommand+0x90>)
 80025d4:	f000 ffd4 	bl	8003580 <UART_Transmit>
		return true; // It was a Go To command, but it failed.
 80025d8:	2301      	movs	r3, #1
 80025da:	e003      	b.n	80025e4 <Parse_GotoCommand+0x74>
	}
	UART_Transmit("Go TO Position OK\r\n");
 80025dc:	4809      	ldr	r0, [pc, #36]	; (8002604 <Parse_GotoCommand+0x94>)
 80025de:	f000 ffcf 	bl	8003580 <UART_Transmit>
	return true;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	0800b600 	.word	0x0800b600
 80025f0:	20000000 	.word	0x20000000
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	20000018 	.word	0x20000018
 80025fc:	20000024 	.word	0x20000024
 8002600:	0800b608 	.word	0x0800b608
 8002604:	0800b62c 	.word	0x0800b62c

08002608 <Send_StatusReport>:

/**
 * @brief  Formats and sends the current machine status (state and position) over UART.
 * This mimics the real-time DRO (Digital Read-Out) of systems like Mach3/GRBL.
 */
void Send_StatusReport(void) {
 8002608:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800260c:	b0aa      	sub	sp, #168	; 0xa8
 800260e:	af06      	add	r7, sp, #24
	// A buffer to hold the formatted status string. 128 bytes is safe.
	char status_buffer[128];

	// Convert the current pulse positions to millimeters (float)
	float pos_x_mm = Axis_GetCurrentPositionMM(&axisX);
 8002610:	4820      	ldr	r0, [pc, #128]	; (8002694 <Send_StatusReport+0x8c>)
 8002612:	f7ff fb27 	bl	8001c64 <Axis_GetCurrentPositionMM>
 8002616:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	float pos_y_mm = Axis_GetCurrentPositionMM(&axisY);
 800261a:	481f      	ldr	r0, [pc, #124]	; (8002698 <Send_StatusReport+0x90>)
 800261c:	f7ff fb22 	bl	8001c64 <Axis_GetCurrentPositionMM>
 8002620:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	float pos_z_mm = Axis_GetCurrentPositionMM(&axisZ);
 8002624:	481d      	ldr	r0, [pc, #116]	; (800269c <Send_StatusReport+0x94>)
 8002626:	f7ff fb1d 	bl	8001c64 <Axis_GetCurrentPositionMM>
 800262a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	// Determine the current state string based on the state machine
	const char *state_str = "Idle";
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <Send_StatusReport+0x98>)
 8002630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (g_machineState == MACHINE_STATE_BUSY) {
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <Send_StatusReport+0x9c>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d102      	bne.n	8002644 <Send_StatusReport+0x3c>
		state_str = "Run";
 800263e:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <Send_StatusReport+0xa0>)
 8002640:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}
	// Format the string into a GRBL-like status report: <State|WPos:X,Y,Z>
	// %.3f formats the float to 3 decimal places.
	sprintf(status_buffer, "<%s|WPos:%.3f,%.3f,%.3f>\r\n", state_str, pos_x_mm,
 8002644:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002648:	f7fd feee 	bl	8000428 <__aeabi_f2d>
 800264c:	4604      	mov	r4, r0
 800264e:	460d      	mov	r5, r1
 8002650:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002654:	f7fd fee8 	bl	8000428 <__aeabi_f2d>
 8002658:	4680      	mov	r8, r0
 800265a:	4689      	mov	r9, r1
 800265c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002660:	f7fd fee2 	bl	8000428 <__aeabi_f2d>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4638      	mov	r0, r7
 800266a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800266e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002672:	e9cd 4500 	strd	r4, r5, [sp]
 8002676:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800267a:	490c      	ldr	r1, [pc, #48]	; (80026ac <Send_StatusReport+0xa4>)
 800267c:	f005 fa56 	bl	8007b2c <siprintf>
			pos_y_mm, pos_z_mm);

	// Transmit the final string
	UART_Transmit(status_buffer);
 8002680:	463b      	mov	r3, r7
 8002682:	4618      	mov	r0, r3
 8002684:	f000 ff7c 	bl	8003580 <UART_Transmit>
}
 8002688:	bf00      	nop
 800268a:	3790      	adds	r7, #144	; 0x90
 800268c:	46bd      	mov	sp, r7
 800268e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002692:	bf00      	nop
 8002694:	200003fc 	.word	0x200003fc
 8002698:	20000440 	.word	0x20000440
 800269c:	20000484 	.word	0x20000484
 80026a0:	0800b640 	.word	0x0800b640
 80026a4:	200003e4 	.word	0x200003e4
 80026a8:	0800b648 	.word	0x0800b648
 80026ac:	0800b64c 	.word	0x0800b64c

080026b0 <HAL_TIM_PWM_PulseFinishedCallback>:

// ================== CALLBACK ==================
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	Axis_TIM_PWM_PulseFinishedCallback_Const(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff fa75 	bl	8001ba8 <Axis_TIM_PWM_PulseFinishedCallback_Const>

}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <HAL_UART_RxCpltCallback+0x20>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_UART_RxCpltCallback+0x16>
		UART_Receive_Callback();
 80026da:	f000 ff69 	bl	80035b0 <UART_Receive_Callback>
	}
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40013800 	.word	0x40013800

080026ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b0aa      	sub	sp, #168	; 0xa8
 80026f0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80026f2:	f000 ffc9 	bl	8003688 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80026f6:	f000 f94d 	bl	8002994 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80026fa:	f000 fb7b 	bl	8002df4 <MX_GPIO_Init>
	MX_DMA_Init();
 80026fe:	f000 fb5b 	bl	8002db8 <MX_DMA_Init>
	MX_TIM2_Init();
 8002702:	f000 f9eb 	bl	8002adc <MX_TIM2_Init>
	MX_TIM3_Init();
 8002706:	f000 fa69 	bl	8002bdc <MX_TIM3_Init>
	MX_ADC1_Init();
 800270a:	f000 f999 	bl	8002a40 <MX_ADC1_Init>
	MX_TIM4_Init();
 800270e:	f000 fadb 	bl	8002cc8 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8002712:	f000 fb27 	bl	8002d64 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	UART_Init(&huart1);
 8002716:	488c      	ldr	r0, [pc, #560]	; (8002948 <main+0x25c>)
 8002718:	f000 fed0 	bl	80034bc <UART_Init>
	// cấu hình trục
	axisX.GPIOx_Dir = DirX_GPIO_Port;
 800271c:	4b8b      	ldr	r3, [pc, #556]	; (800294c <main+0x260>)
 800271e:	4a8c      	ldr	r2, [pc, #560]	; (8002950 <main+0x264>)
 8002720:	601a      	str	r2, [r3, #0]
	axisX.GPIO_Pin_Dir = DirX_Pin;
 8002722:	4b8a      	ldr	r3, [pc, #552]	; (800294c <main+0x260>)
 8002724:	2220      	movs	r2, #32
 8002726:	809a      	strh	r2, [r3, #4]
	axisX.htim_Pul = &htim2;
 8002728:	4b88      	ldr	r3, [pc, #544]	; (800294c <main+0x260>)
 800272a:	4a8a      	ldr	r2, [pc, #552]	; (8002954 <main+0x268>)
 800272c:	609a      	str	r2, [r3, #8]
	axisX.Channel_Pul = TIM_CHANNEL_2;
 800272e:	4b87      	ldr	r3, [pc, #540]	; (800294c <main+0x260>)
 8002730:	2204      	movs	r2, #4
 8002732:	60da      	str	r2, [r3, #12]
	axisX.pulse_per_mm = 20000;
 8002734:	4b85      	ldr	r3, [pc, #532]	; (800294c <main+0x260>)
 8002736:	f644 6220 	movw	r2, #20000	; 0x4e20
 800273a:	619a      	str	r2, [r3, #24]
	axisX.invert_dir = 1;
 800273c:	4b83      	ldr	r3, [pc, #524]	; (800294c <main+0x260>)
 800273e:	2201      	movs	r2, #1
 8002740:	771a      	strb	r2, [r3, #28]
	axisX.frequency_max = 20000;
 8002742:	4b82      	ldr	r3, [pc, #520]	; (800294c <main+0x260>)
 8002744:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002748:	615a      	str	r2, [r3, #20]
	axisX.frequency_min = 100;
 800274a:	4b80      	ldr	r3, [pc, #512]	; (800294c <main+0x260>)
 800274c:	2264      	movs	r2, #100	; 0x64
 800274e:	611a      	str	r2, [r3, #16]

	axisY.GPIOx_Dir = DirY_GPIO_Port;
 8002750:	4b81      	ldr	r3, [pc, #516]	; (8002958 <main+0x26c>)
 8002752:	4a7f      	ldr	r2, [pc, #508]	; (8002950 <main+0x264>)
 8002754:	601a      	str	r2, [r3, #0]
	axisY.GPIO_Pin_Dir = DirY_Pin;
 8002756:	4b80      	ldr	r3, [pc, #512]	; (8002958 <main+0x26c>)
 8002758:	2240      	movs	r2, #64	; 0x40
 800275a:	809a      	strh	r2, [r3, #4]
	axisY.htim_Pul = &htim2;
 800275c:	4b7e      	ldr	r3, [pc, #504]	; (8002958 <main+0x26c>)
 800275e:	4a7d      	ldr	r2, [pc, #500]	; (8002954 <main+0x268>)
 8002760:	609a      	str	r2, [r3, #8]
	axisY.Channel_Pul = TIM_CHANNEL_1;
 8002762:	4b7d      	ldr	r3, [pc, #500]	; (8002958 <main+0x26c>)
 8002764:	2200      	movs	r2, #0
 8002766:	60da      	str	r2, [r3, #12]
	axisY.pulse_per_mm = 20000;
 8002768:	4b7b      	ldr	r3, [pc, #492]	; (8002958 <main+0x26c>)
 800276a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800276e:	619a      	str	r2, [r3, #24]
	axisY.invert_dir = 1;
 8002770:	4b79      	ldr	r3, [pc, #484]	; (8002958 <main+0x26c>)
 8002772:	2201      	movs	r2, #1
 8002774:	771a      	strb	r2, [r3, #28]
	axisY.frequency_max = 20000;
 8002776:	4b78      	ldr	r3, [pc, #480]	; (8002958 <main+0x26c>)
 8002778:	f644 6220 	movw	r2, #20000	; 0x4e20
 800277c:	615a      	str	r2, [r3, #20]
	axisY.frequency_min = 100;
 800277e:	4b76      	ldr	r3, [pc, #472]	; (8002958 <main+0x26c>)
 8002780:	2264      	movs	r2, #100	; 0x64
 8002782:	611a      	str	r2, [r3, #16]

	axisZ.GPIOx_Dir = DirZ_GPIO_Port;
 8002784:	4b75      	ldr	r3, [pc, #468]	; (800295c <main+0x270>)
 8002786:	4a72      	ldr	r2, [pc, #456]	; (8002950 <main+0x264>)
 8002788:	601a      	str	r2, [r3, #0]
	axisZ.GPIO_Pin_Dir = DirZ_Pin;
 800278a:	4b74      	ldr	r3, [pc, #464]	; (800295c <main+0x270>)
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	809a      	strh	r2, [r3, #4]
	axisZ.htim_Pul = &htim3;
 8002790:	4b72      	ldr	r3, [pc, #456]	; (800295c <main+0x270>)
 8002792:	4a73      	ldr	r2, [pc, #460]	; (8002960 <main+0x274>)
 8002794:	609a      	str	r2, [r3, #8]
	axisZ.Channel_Pul = TIM_CHANNEL_1;
 8002796:	4b71      	ldr	r3, [pc, #452]	; (800295c <main+0x270>)
 8002798:	2200      	movs	r2, #0
 800279a:	60da      	str	r2, [r3, #12]
	axisZ.pulse_per_mm = 12800;
 800279c:	4b6f      	ldr	r3, [pc, #444]	; (800295c <main+0x270>)
 800279e:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 80027a2:	619a      	str	r2, [r3, #24]
	axisZ.invert_dir = 1;
 80027a4:	4b6d      	ldr	r3, [pc, #436]	; (800295c <main+0x270>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	771a      	strb	r2, [r3, #28]
	axisZ.frequency_max = 20000;
 80027aa:	4b6c      	ldr	r3, [pc, #432]	; (800295c <main+0x270>)
 80027ac:	f644 6220 	movw	r2, #20000	; 0x4e20
 80027b0:	615a      	str	r2, [r3, #20]
	axisZ.frequency_min = 100;
 80027b2:	4b6a      	ldr	r3, [pc, #424]	; (800295c <main+0x270>)
 80027b4:	2264      	movs	r2, #100	; 0x64
 80027b6:	611a      	str	r2, [r3, #16]
//      // Axis_Init(&axis_struct, DIR_Port, DIR_Pin, TIM_Handle, TIM_Channel, freq_min, freq_max, pulse_per_mm, invert_dir);
//      Axis_Init(&axisX, axisX.irX_GPIO_Port, DirX_Pin, &htim2, TIM_CHANNEL_2, 100, 20000, 20000, 0);
//      Axis_Init(&axisY, DirY_GPIO_Port, DirY_Pin, &htim2, TIM_CHANNEL_1, 100, 20000, 20000, 0);
//      Axis_Init(&axisZ, DirZ_GPIO_Port, DirZ_Pin, &htim3, TIM_CHANNEL_1, 100, 10000, 12800, 0);
	// Set default running frequency for all axes
	Axis_SetFrequencyHz(&axisX, 2800);
 80027b8:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 80027bc:	4863      	ldr	r0, [pc, #396]	; (800294c <main+0x260>)
 80027be:	f7ff f8c1 	bl	8001944 <Axis_SetFrequencyHz>
	Axis_SetFrequencyHz(&axisY, 2800);
 80027c2:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 80027c6:	4864      	ldr	r0, [pc, #400]	; (8002958 <main+0x26c>)
 80027c8:	f7ff f8bc 	bl	8001944 <Axis_SetFrequencyHz>
	Axis_SetFrequencyHz(&axisZ, 20000);
 80027cc:	f644 6120 	movw	r1, #20000	; 0x4e20
 80027d0:	4862      	ldr	r0, [pc, #392]	; (800295c <main+0x270>)
 80027d2:	f7ff f8b7 	bl	8001944 <Axis_SetFrequencyHz>

	// *** REGISTER THE AXES! ***
	Axis_Register(&axisX);
 80027d6:	485d      	ldr	r0, [pc, #372]	; (800294c <main+0x260>)
 80027d8:	f7ff f882 	bl	80018e0 <Axis_Register>
	Axis_Register(&axisY);
 80027dc:	485e      	ldr	r0, [pc, #376]	; (8002958 <main+0x26c>)
 80027de:	f7ff f87f 	bl	80018e0 <Axis_Register>
	Axis_Register(&axisZ);
 80027e2:	485e      	ldr	r0, [pc, #376]	; (800295c <main+0x270>)
 80027e4:	f7ff f87c 	bl	80018e0 <Axis_Register>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		uint32_t current_tick = HAL_GetTick();
 80027e8:	f000 ffa6 	bl	8003738 <HAL_GetTick>
 80027ec:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		g_lastButtonPressed = BUTTON_NONE;
 80027f0:	4b5c      	ldr	r3, [pc, #368]	; (8002964 <main+0x278>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
		switch (g_machineState) {
 80027f6:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <main+0x27c>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <main+0x11a>
 8002800:	2b01      	cmp	r3, #1
 8002802:	d052      	beq.n	80028aa <main+0x1be>
 8002804:	e06a      	b.n	80028dc <main+0x1f0>

		case MACHINE_STATE_IDLE:
			// Priority 1: Check for commands from UART
			if (UART_IsNewLineReady()) {
 8002806:	f000 fe6f 	bl	80034e8 <UART_IsNewLineReady>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d028      	beq.n	8002862 <main+0x176>
				char command_line[RX_BUFFER_SIZE];
				UART_GetLine(command_line);
 8002810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fe73 	bl	8003500 <UART_GetLine>

				// Check for special "SET" command first
				if (Parse_SetCommand(command_line)) {
 800281a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fde0 	bl	80023e4 <Parse_SetCommand>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d155      	bne.n	80028d6 <main+0x1ea>
					// Command was handled, do nothing else.
				} else if (Parse_GotoCommand(command_line)) {
 800282a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fe9e 	bl	8002570 <Parse_GotoCommand>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d14d      	bne.n	80028d6 <main+0x1ea>

				}
				// Otherwise, treat it as a G-code command
				else {
					GCode_Command_t cmd;
					if (GCode_ParseLine(command_line, &cmd)) {
 800283a:	463a      	mov	r2, r7
 800283c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fa32 	bl	8001cac <GCode_ParseLine>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d043      	beq.n	80028d6 <main+0x1ea>
						GCode_ExecuteCommand(&cmd, &axisX, &axisY, &axisZ);
 800284e:	4638      	mov	r0, r7
 8002850:	4b42      	ldr	r3, [pc, #264]	; (800295c <main+0x270>)
 8002852:	4a41      	ldr	r2, [pc, #260]	; (8002958 <main+0x26c>)
 8002854:	493d      	ldr	r1, [pc, #244]	; (800294c <main+0x260>)
 8002856:	f7ff fb1f 	bl	8001e98 <GCode_ExecuteCommand>
						g_machineState = MACHINE_STATE_BUSY; // Switch to busy state
 800285a:	4b43      	ldr	r3, [pc, #268]	; (8002968 <main+0x27c>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
				}

				// Buttons can be checked every loop cycle
				HandleManualButtons();
			}
			break;
 8002860:	e039      	b.n	80028d6 <main+0x1ea>
				if (current_tick - last_joystick_read_tick >= 100) {
 8002862:	4b42      	ldr	r3, [pc, #264]	; (800296c <main+0x280>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b63      	cmp	r3, #99	; 0x63
 800286e:	d919      	bls.n	80028a4 <main+0x1b8>
					rawX = ADC_ReadChannel(ADC_CHANNEL_0);
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff fc13 	bl	800209c <ADC_ReadChannel>
 8002876:	4603      	mov	r3, r0
 8002878:	461a      	mov	r2, r3
 800287a:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <main+0x284>)
 800287c:	801a      	strh	r2, [r3, #0]
					rawY = ADC_ReadChannel(ADC_CHANNEL_1);
 800287e:	2001      	movs	r0, #1
 8002880:	f7ff fc0c 	bl	800209c <ADC_ReadChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	461a      	mov	r2, r3
 8002888:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <main+0x288>)
 800288a:	801a      	strh	r2, [r3, #0]
					HandleJoystick(rawX, rawY);
 800288c:	4b38      	ldr	r3, [pc, #224]	; (8002970 <main+0x284>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	4a38      	ldr	r2, [pc, #224]	; (8002974 <main+0x288>)
 8002892:	8812      	ldrh	r2, [r2, #0]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fc9a 	bl	80021d0 <HandleJoystick>
					last_joystick_read_tick = current_tick;
 800289c:	4a33      	ldr	r2, [pc, #204]	; (800296c <main+0x280>)
 800289e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028a2:	6013      	str	r3, [r2, #0]
				HandleManualButtons();
 80028a4:	f7ff fce4 	bl	8002270 <HandleManualButtons>
			break;
 80028a8:	e015      	b.n	80028d6 <main+0x1ea>

		case MACHINE_STATE_BUSY:
			// While busy, only check if all movements are complete
			if (!Axis_IsBusy(&axisX) && !Axis_IsBusy(&axisY)
 80028aa:	4828      	ldr	r0, [pc, #160]	; (800294c <main+0x260>)
 80028ac:	f7ff fb83 	bl	8001fb6 <Axis_IsBusy>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d111      	bne.n	80028da <main+0x1ee>
 80028b6:	4828      	ldr	r0, [pc, #160]	; (8002958 <main+0x26c>)
 80028b8:	f7ff fb7d 	bl	8001fb6 <Axis_IsBusy>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10b      	bne.n	80028da <main+0x1ee>
					&& !Axis_IsBusy(&axisZ)) {
 80028c2:	4826      	ldr	r0, [pc, #152]	; (800295c <main+0x270>)
 80028c4:	f7ff fb77 	bl	8001fb6 <Axis_IsBusy>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <main+0x1ee>
				g_machineState = MACHINE_STATE_IDLE; // Return to idle state
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <main+0x27c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80028d4:	e001      	b.n	80028da <main+0x1ee>
			break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <main+0x1f0>
			break;
 80028da:	bf00      	nop
		}

		// Update debug variables at the end of each loop
		dbg_pos_x = Axis_GetCurrentPositionPulse(&axisX);
 80028dc:	481b      	ldr	r0, [pc, #108]	; (800294c <main+0x260>)
 80028de:	f7ff fb7f 	bl	8001fe0 <Axis_GetCurrentPositionPulse>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4a24      	ldr	r2, [pc, #144]	; (8002978 <main+0x28c>)
 80028e6:	6013      	str	r3, [r2, #0]
		dbg_pos_y = Axis_GetCurrentPositionPulse(&axisY);
 80028e8:	481b      	ldr	r0, [pc, #108]	; (8002958 <main+0x26c>)
 80028ea:	f7ff fb79 	bl	8001fe0 <Axis_GetCurrentPositionPulse>
 80028ee:	4603      	mov	r3, r0
 80028f0:	4a22      	ldr	r2, [pc, #136]	; (800297c <main+0x290>)
 80028f2:	6013      	str	r3, [r2, #0]
		dbg_pos_z = Axis_GetCurrentPositionPulse(&axisZ);
 80028f4:	4819      	ldr	r0, [pc, #100]	; (800295c <main+0x270>)
 80028f6:	f7ff fb73 	bl	8001fe0 <Axis_GetCurrentPositionPulse>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4a20      	ldr	r2, [pc, #128]	; (8002980 <main+0x294>)
 80028fe:	6013      	str	r3, [r2, #0]
		dbg_x_is_busy = Axis_IsBusy(&axisX);
 8002900:	4812      	ldr	r0, [pc, #72]	; (800294c <main+0x260>)
 8002902:	f7ff fb58 	bl	8001fb6 <Axis_IsBusy>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <main+0x298>)
 800290c:	701a      	strb	r2, [r3, #0]
		dbg_y_is_busy = Axis_IsBusy(&axisY);
 800290e:	4812      	ldr	r0, [pc, #72]	; (8002958 <main+0x26c>)
 8002910:	f7ff fb51 	bl	8001fb6 <Axis_IsBusy>
 8002914:	4603      	mov	r3, r0
 8002916:	461a      	mov	r2, r3
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <main+0x29c>)
 800291a:	701a      	strb	r2, [r3, #0]
		dbg_z_is_busy = Axis_IsBusy(&axisZ);
 800291c:	480f      	ldr	r0, [pc, #60]	; (800295c <main+0x270>)
 800291e:	f7ff fb4a 	bl	8001fb6 <Axis_IsBusy>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <main+0x2a0>)
 8002928:	701a      	strb	r2, [r3, #0]
		// --- Periodic Status Reporting (like Mach3 DRO) ---
		// It sends a position update every 200 milliseconds.
		if (current_tick - last_status_report_tick >= 200) {
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <main+0x2a4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2bc7      	cmp	r3, #199	; 0xc7
 8002936:	f67f af57 	bls.w	80027e8 <main+0xfc>
			Send_StatusReport();
 800293a:	f7ff fe65 	bl	8002608 <Send_StatusReport>
			last_status_report_tick = current_tick;
 800293e:	4a14      	ldr	r2, [pc, #80]	; (8002990 <main+0x2a4>)
 8002940:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002944:	6013      	str	r3, [r2, #0]
	while (1) {
 8002946:	e74f      	b.n	80027e8 <main+0xfc>
 8002948:	2000039c 	.word	0x2000039c
 800294c:	200003fc 	.word	0x200003fc
 8002950:	40010c00 	.word	0x40010c00
 8002954:	200002c4 	.word	0x200002c4
 8002958:	20000440 	.word	0x20000440
 800295c:	20000484 	.word	0x20000484
 8002960:	2000030c 	.word	0x2000030c
 8002964:	200003f7 	.word	0x200003f7
 8002968:	200003e4 	.word	0x200003e4
 800296c:	200004c8 	.word	0x200004c8
 8002970:	200003f8 	.word	0x200003f8
 8002974:	200003fa 	.word	0x200003fa
 8002978:	200003e8 	.word	0x200003e8
 800297c:	200003ec 	.word	0x200003ec
 8002980:	200003f0 	.word	0x200003f0
 8002984:	200003f4 	.word	0x200003f4
 8002988:	200003f5 	.word	0x200003f5
 800298c:	200003f6 	.word	0x200003f6
 8002990:	200004cc 	.word	0x200004cc

08002994 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b094      	sub	sp, #80	; 0x50
 8002998:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800299a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800299e:	2228      	movs	r2, #40	; 0x28
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f004 fc5a 	bl	800725c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029c4:	2302      	movs	r3, #2
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029c8:	2301      	movs	r3, #1
 80029ca:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029cc:	2310      	movs	r3, #16
 80029ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029d0:	2302      	movs	r3, #2
 80029d2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80029d4:	2300      	movs	r3, #0
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80029d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80029de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 ffe0 	bl	80049a8 <HAL_RCC_OscConfig>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <SystemClock_Config+0x5e>
		Error_Handler();
 80029ee:	f000 fa75 	bl	8002edc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80029f2:	230f      	movs	r3, #15
 80029f4:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f6:	2302      	movs	r3, #2
 80029f8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f002 fa4d 	bl	8004eac <HAL_RCC_ClockConfig>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <SystemClock_Config+0x88>
		Error_Handler();
 8002a18:	f000 fa60 	bl	8002edc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 fbfe 	bl	8005228 <HAL_RCCEx_PeriphCLKConfig>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <SystemClock_Config+0xa2>
		Error_Handler();
 8002a32:	f000 fa53 	bl	8002edc <Error_Handler>
	}
}
 8002a36:	bf00      	nop
 8002a38:	3750      	adds	r7, #80	; 0x50
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002a50:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <MX_ADC1_Init+0x94>)
 8002a52:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <MX_ADC1_Init+0x98>)
 8002a54:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002a56:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <MX_ADC1_Init+0x94>)
 8002a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a5c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <MX_ADC1_Init+0x94>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <MX_ADC1_Init+0x94>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <MX_ADC1_Init+0x94>)
 8002a6c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002a70:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <MX_ADC1_Init+0x94>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 2;
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <MX_ADC1_Init+0x94>)
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002a7e:	4815      	ldr	r0, [pc, #84]	; (8002ad4 <MX_ADC1_Init+0x94>)
 8002a80:	f000 fe64 	bl	800374c <HAL_ADC_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_ADC1_Init+0x4e>
		Error_Handler();
 8002a8a:	f000 fa27 	bl	8002edc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a92:	2301      	movs	r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002a96:	2305      	movs	r3, #5
 8002a98:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	480d      	ldr	r0, [pc, #52]	; (8002ad4 <MX_ADC1_Init+0x94>)
 8002aa0:	f001 f918 	bl	8003cd4 <HAL_ADC_ConfigChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_ADC1_Init+0x6e>
		Error_Handler();
 8002aaa:	f000 fa17 	bl	8002edc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4806      	ldr	r0, [pc, #24]	; (8002ad4 <MX_ADC1_Init+0x94>)
 8002abc:	f001 f90a 	bl	8003cd4 <HAL_ADC_ConfigChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_ADC1_Init+0x8a>
		Error_Handler();
 8002ac6:	f000 fa09 	bl	8002edc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000250 	.word	0x20000250
 8002ad8:	40012400 	.word	0x40012400

08002adc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08e      	sub	sp, #56	; 0x38
 8002ae0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002af0:	f107 0320 	add.w	r3, r7, #32
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
 8002b08:	615a      	str	r2, [r3, #20]
 8002b0a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002b0c:	4b32      	ldr	r3, [pc, #200]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002b0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b12:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 200 - 1;
 8002b14:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002b16:	22c7      	movs	r2, #199	; 0xc7
 8002b18:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1a:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10 - 1;
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002b22:	2209      	movs	r2, #9
 8002b24:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b26:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b2c:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002b32:	4829      	ldr	r0, [pc, #164]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002b34:	f002 fce4 	bl	8005500 <HAL_TIM_Base_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM2_Init+0x66>
		Error_Handler();
 8002b3e:	f000 f9cd 	bl	8002edc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002b48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4822      	ldr	r0, [pc, #136]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002b50:	f003 f8d2 	bl	8005cf8 <HAL_TIM_ConfigClockSource>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM2_Init+0x82>
		Error_Handler();
 8002b5a:	f000 f9bf 	bl	8002edc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002b5e:	481e      	ldr	r0, [pc, #120]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002b60:	f002 fd1d 	bl	800559e <HAL_TIM_PWM_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM2_Init+0x92>
		Error_Handler();
 8002b6a:	f000 f9b7 	bl	8002edc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002b76:	f107 0320 	add.w	r3, r7, #32
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4816      	ldr	r0, [pc, #88]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002b7e:	f003 fc57 	bl	8006430 <HAL_TIMEx_MasterConfigSynchronization>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM2_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002b88:	f000 f9a8 	bl	8002edc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b8c:	2360      	movs	r3, #96	; 0x60
 8002b8e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 8 - 1;
 8002b90:	2307      	movs	r3, #7
 8002b92:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002ba4:	f002 ffe6 	bl	8005b74 <HAL_TIM_PWM_ConfigChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM2_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8002bae:	f000 f995 	bl	8002edc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4807      	ldr	r0, [pc, #28]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002bba:	f002 ffdb 	bl	8005b74 <HAL_TIM_PWM_ConfigChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_TIM2_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8002bc4:	f000 f98a 	bl	8002edc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002bc8:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <MX_TIM2_Init+0xfc>)
 8002bca:	f000 fa7b 	bl	80030c4 <HAL_TIM_MspPostInit>

}
 8002bce:	bf00      	nop
 8002bd0:	3738      	adds	r7, #56	; 0x38
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200002c4 	.word	0x200002c4

08002bdc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08e      	sub	sp, #56	; 0x38
 8002be0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002bf0:	f107 0320 	add.w	r3, r7, #32
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	611a      	str	r2, [r3, #16]
 8002c08:	615a      	str	r2, [r3, #20]
 8002c0a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002c0c:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <MX_TIM3_Init+0xe4>)
 8002c0e:	4a2d      	ldr	r2, [pc, #180]	; (8002cc4 <MX_TIM3_Init+0xe8>)
 8002c10:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 200 - 1;
 8002c12:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <MX_TIM3_Init+0xe4>)
 8002c14:	22c7      	movs	r2, #199	; 0xc7
 8002c16:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c18:	4b29      	ldr	r3, [pc, #164]	; (8002cc0 <MX_TIM3_Init+0xe4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10 - 1;
 8002c1e:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <MX_TIM3_Init+0xe4>)
 8002c20:	2209      	movs	r2, #9
 8002c22:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c24:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <MX_TIM3_Init+0xe4>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c2a:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <MX_TIM3_Init+0xe4>)
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002c30:	4823      	ldr	r0, [pc, #140]	; (8002cc0 <MX_TIM3_Init+0xe4>)
 8002c32:	f002 fc65 	bl	8005500 <HAL_TIM_Base_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM3_Init+0x64>
		Error_Handler();
 8002c3c:	f000 f94e 	bl	8002edc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	481c      	ldr	r0, [pc, #112]	; (8002cc0 <MX_TIM3_Init+0xe4>)
 8002c4e:	f003 f853 	bl	8005cf8 <HAL_TIM_ConfigClockSource>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_TIM3_Init+0x80>
		Error_Handler();
 8002c58:	f000 f940 	bl	8002edc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002c5c:	4818      	ldr	r0, [pc, #96]	; (8002cc0 <MX_TIM3_Init+0xe4>)
 8002c5e:	f002 fc9e 	bl	800559e <HAL_TIM_PWM_Init>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM3_Init+0x90>
		Error_Handler();
 8002c68:	f000 f938 	bl	8002edc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002c74:	f107 0320 	add.w	r3, r7, #32
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4811      	ldr	r0, [pc, #68]	; (8002cc0 <MX_TIM3_Init+0xe4>)
 8002c7c:	f003 fbd8 	bl	8006430 <HAL_TIMEx_MasterConfigSynchronization>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_TIM3_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8002c86:	f000 f929 	bl	8002edc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c8a:	2360      	movs	r3, #96	; 0x60
 8002c8c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 8;
 8002c8e:	2308      	movs	r3, #8
 8002c90:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4807      	ldr	r0, [pc, #28]	; (8002cc0 <MX_TIM3_Init+0xe4>)
 8002ca2:	f002 ff67 	bl	8005b74 <HAL_TIM_PWM_ConfigChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM3_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8002cac:	f000 f916 	bl	8002edc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002cb0:	4803      	ldr	r0, [pc, #12]	; (8002cc0 <MX_TIM3_Init+0xe4>)
 8002cb2:	f000 fa07 	bl	80030c4 <HAL_TIM_MspPostInit>

}
 8002cb6:	bf00      	nop
 8002cb8:	3738      	adds	r7, #56	; 0x38
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000030c 	.word	0x2000030c
 8002cc4:	40000400 	.word	0x40000400

08002cc8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002cce:	f107 0308 	add.w	r3, r7, #8
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002cdc:	463b      	mov	r3, r7
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <MX_TIM4_Init+0x94>)
 8002ce6:	4a1e      	ldr	r2, [pc, #120]	; (8002d60 <MX_TIM4_Init+0x98>)
 8002ce8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002cea:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <MX_TIM4_Init+0x94>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <MX_TIM4_Init+0x94>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <MX_TIM4_Init+0x94>)
 8002cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cfc:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cfe:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <MX_TIM4_Init+0x94>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d04:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <MX_TIM4_Init+0x94>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002d0a:	4814      	ldr	r0, [pc, #80]	; (8002d5c <MX_TIM4_Init+0x94>)
 8002d0c:	f002 fbf8 	bl	8005500 <HAL_TIM_Base_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_TIM4_Init+0x52>
		Error_Handler();
 8002d16:	f000 f8e1 	bl	8002edc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d1e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002d20:	f107 0308 	add.w	r3, r7, #8
 8002d24:	4619      	mov	r1, r3
 8002d26:	480d      	ldr	r0, [pc, #52]	; (8002d5c <MX_TIM4_Init+0x94>)
 8002d28:	f002 ffe6 	bl	8005cf8 <HAL_TIM_ConfigClockSource>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_TIM4_Init+0x6e>
		Error_Handler();
 8002d32:	f000 f8d3 	bl	8002edc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d36:	2300      	movs	r3, #0
 8002d38:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002d3e:	463b      	mov	r3, r7
 8002d40:	4619      	mov	r1, r3
 8002d42:	4806      	ldr	r0, [pc, #24]	; (8002d5c <MX_TIM4_Init+0x94>)
 8002d44:	f003 fb74 	bl	8006430 <HAL_TIMEx_MasterConfigSynchronization>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002d4e:	f000 f8c5 	bl	8002edc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8002d52:	bf00      	nop
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000354 	.word	0x20000354
 8002d60:	40000800 	.word	0x40000800

08002d64 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <MX_USART1_UART_Init+0x4c>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <MX_USART1_UART_Init+0x50>)
 8002d6c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <MX_USART1_UART_Init+0x4c>)
 8002d70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d74:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <MX_USART1_UART_Init+0x4c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <MX_USART1_UART_Init+0x4c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <MX_USART1_UART_Init+0x4c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <MX_USART1_UART_Init+0x4c>)
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <MX_USART1_UART_Init+0x4c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <MX_USART1_UART_Init+0x4c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002d9a:	4805      	ldr	r0, [pc, #20]	; (8002db0 <MX_USART1_UART_Init+0x4c>)
 8002d9c:	f003 fbb8 	bl	8006510 <HAL_UART_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002da6:	f000 f899 	bl	8002edc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	2000039c 	.word	0x2000039c
 8002db4:	40013800 	.word	0x40013800

08002db8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <MX_DMA_Init+0x38>)
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <MX_DMA_Init+0x38>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6153      	str	r3, [r2, #20]
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <MX_DMA_Init+0x38>)
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2100      	movs	r1, #0
 8002dda:	200b      	movs	r0, #11
 8002ddc:	f001 f9e5 	bl	80041aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002de0:	200b      	movs	r0, #11
 8002de2:	f001 f9fe 	bl	80041e2 <HAL_NVIC_EnableIRQ>

}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000

08002df4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002dfa:	f107 0310 	add.w	r3, r7, #16
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <MX_GPIO_Init+0xd8>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	4a2f      	ldr	r2, [pc, #188]	; (8002ecc <MX_GPIO_Init+0xd8>)
 8002e0e:	f043 0320 	orr.w	r3, r3, #32
 8002e12:	6193      	str	r3, [r2, #24]
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <MX_GPIO_Init+0xd8>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e20:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <MX_GPIO_Init+0xd8>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <MX_GPIO_Init+0xd8>)
 8002e26:	f043 0304 	orr.w	r3, r3, #4
 8002e2a:	6193      	str	r3, [r2, #24]
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <MX_GPIO_Init+0xd8>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <MX_GPIO_Init+0xd8>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	4a23      	ldr	r2, [pc, #140]	; (8002ecc <MX_GPIO_Init+0xd8>)
 8002e3e:	f043 0308 	orr.w	r3, r3, #8
 8002e42:	6193      	str	r3, [r2, #24]
 8002e44:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <MX_GPIO_Init+0xd8>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DirX_Pin | DirY_Pin | DirZ_Pin, GPIO_PIN_RESET);
 8002e50:	2200      	movs	r2, #0
 8002e52:	21e0      	movs	r1, #224	; 0xe0
 8002e54:	481e      	ldr	r0, [pc, #120]	; (8002ed0 <MX_GPIO_Init+0xdc>)
 8002e56:	f001 fd8e 	bl	8004976 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : HOME_BUTTON_Pin SWITCH_BUTTON_Pin L_BUTTON_Pin R_BUTTON_Pin
	 ZDOWN_Pin ZUP_Pin */
	GPIO_InitStruct.Pin = HOME_BUTTON_Pin | SWITCH_BUTTON_Pin | L_BUTTON_Pin
 8002e5a:	23fc      	movs	r3, #252	; 0xfc
 8002e5c:	613b      	str	r3, [r7, #16]
			| R_BUTTON_Pin | ZDOWN_Pin | ZUP_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e62:	2301      	movs	r3, #1
 8002e64:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	f107 0310 	add.w	r3, r7, #16
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4819      	ldr	r0, [pc, #100]	; (8002ed4 <MX_GPIO_Init+0xe0>)
 8002e6e:	f001 fbe7 	bl	8004640 <HAL_GPIO_Init>

	/*Configure GPIO pins : D_BUTTON_Pin C_BUTTON_Pin B_BUTTON_Pin A_BUTTON_Pin */
	GPIO_InitStruct.Pin = D_BUTTON_Pin | C_BUTTON_Pin | B_BUTTON_Pin
 8002e72:	f640 4303 	movw	r3, #3075	; 0xc03
 8002e76:	613b      	str	r3, [r7, #16]
			| A_BUTTON_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e80:	f107 0310 	add.w	r3, r7, #16
 8002e84:	4619      	mov	r1, r3
 8002e86:	4812      	ldr	r0, [pc, #72]	; (8002ed0 <MX_GPIO_Init+0xdc>)
 8002e88:	f001 fbda 	bl	8004640 <HAL_GPIO_Init>

	/*Configure GPIO pins : EndY_Pin EndX_Pin */
	GPIO_InitStruct.Pin = EndY_Pin | EndX_Pin;
 8002e8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e90:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <MX_GPIO_Init+0xe4>)
 8002e94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9a:	f107 0310 	add.w	r3, r7, #16
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	480c      	ldr	r0, [pc, #48]	; (8002ed4 <MX_GPIO_Init+0xe0>)
 8002ea2:	f001 fbcd 	bl	8004640 <HAL_GPIO_Init>

	/*Configure GPIO pins : DirX_Pin DirY_Pin DirZ_Pin */
	GPIO_InitStruct.Pin = DirX_Pin | DirY_Pin | DirZ_Pin;
 8002ea6:	23e0      	movs	r3, #224	; 0xe0
 8002ea8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb6:	f107 0310 	add.w	r3, r7, #16
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <MX_GPIO_Init+0xdc>)
 8002ebe:	f001 fbbf 	bl	8004640 <HAL_GPIO_Init>

}
 8002ec2:	bf00      	nop
 8002ec4:	3720      	adds	r7, #32
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40010c00 	.word	0x40010c00
 8002ed4:	40010800 	.word	0x40010800
 8002ed8:	10110000 	.word	0x10110000

08002edc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee0:	b672      	cpsid	i
}
 8002ee2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ee4:	e7fe      	b.n	8002ee4 <Error_Handler+0x8>
	...

08002ee8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_MspInit+0x5c>)
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_MspInit+0x5c>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6193      	str	r3, [r2, #24]
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_MspInit+0x5c>)
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_MspInit+0x5c>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <HAL_MspInit+0x5c>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f10:	61d3      	str	r3, [r2, #28]
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_MspInit+0x5c>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_MspInit+0x60>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_MspInit+0x60>)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40010000 	.word	0x40010000

08002f4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 0310 	add.w	r3, r7, #16
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a28      	ldr	r2, [pc, #160]	; (8003008 <HAL_ADC_MspInit+0xbc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d149      	bne.n	8003000 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <HAL_ADC_MspInit+0xc0>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	4a26      	ldr	r2, [pc, #152]	; (800300c <HAL_ADC_MspInit+0xc0>)
 8002f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f76:	6193      	str	r3, [r2, #24]
 8002f78:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_ADC_MspInit+0xc0>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_ADC_MspInit+0xc0>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	4a20      	ldr	r2, [pc, #128]	; (800300c <HAL_ADC_MspInit+0xc0>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6193      	str	r3, [r2, #24]
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_ADC_MspInit+0xc0>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = JoyX_Pin|JoyY_Pin;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa4:	f107 0310 	add.w	r3, r7, #16
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4819      	ldr	r0, [pc, #100]	; (8003010 <HAL_ADC_MspInit+0xc4>)
 8002fac:	f001 fb48 	bl	8004640 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002fb0:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_ADC_MspInit+0xc8>)
 8002fb2:	4a19      	ldr	r2, [pc, #100]	; (8003018 <HAL_ADC_MspInit+0xcc>)
 8002fb4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_ADC_MspInit+0xc8>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fbc:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_ADC_MspInit+0xc8>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_ADC_MspInit+0xc8>)
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_ADC_MspInit+0xc8>)
 8002fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fd0:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_ADC_MspInit+0xc8>)
 8002fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fd6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_ADC_MspInit+0xc8>)
 8002fda:	2220      	movs	r2, #32
 8002fdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_ADC_MspInit+0xc8>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fe4:	480b      	ldr	r0, [pc, #44]	; (8003014 <HAL_ADC_MspInit+0xc8>)
 8002fe6:	f001 f917 	bl	8004218 <HAL_DMA_Init>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002ff0:	f7ff ff74 	bl	8002edc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a07      	ldr	r2, [pc, #28]	; (8003014 <HAL_ADC_MspInit+0xc8>)
 8002ff8:	621a      	str	r2, [r3, #32]
 8002ffa:	4a06      	ldr	r2, [pc, #24]	; (8003014 <HAL_ADC_MspInit+0xc8>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003000:	bf00      	nop
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40012400 	.word	0x40012400
 800300c:	40021000 	.word	0x40021000
 8003010:	40010800 	.word	0x40010800
 8003014:	20000280 	.word	0x20000280
 8003018:	40020008 	.word	0x40020008

0800301c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302c:	d114      	bne.n	8003058 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_TIM_Base_MspInit+0x9c>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4a21      	ldr	r2, [pc, #132]	; (80030b8 <HAL_TIM_Base_MspInit+0x9c>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	61d3      	str	r3, [r2, #28]
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <HAL_TIM_Base_MspInit+0x9c>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2100      	movs	r1, #0
 800304a:	201c      	movs	r0, #28
 800304c:	f001 f8ad 	bl	80041aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003050:	201c      	movs	r0, #28
 8003052:	f001 f8c6 	bl	80041e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003056:	e02a      	b.n	80030ae <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a17      	ldr	r2, [pc, #92]	; (80030bc <HAL_TIM_Base_MspInit+0xa0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d114      	bne.n	800308c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_TIM_Base_MspInit+0x9c>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_TIM_Base_MspInit+0x9c>)
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	61d3      	str	r3, [r2, #28]
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_TIM_Base_MspInit+0x9c>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	201d      	movs	r0, #29
 8003080:	f001 f893 	bl	80041aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003084:	201d      	movs	r0, #29
 8003086:	f001 f8ac 	bl	80041e2 <HAL_NVIC_EnableIRQ>
}
 800308a:	e010      	b.n	80030ae <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <HAL_TIM_Base_MspInit+0xa4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10b      	bne.n	80030ae <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_TIM_Base_MspInit+0x9c>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <HAL_TIM_Base_MspInit+0x9c>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	61d3      	str	r3, [r2, #28]
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_TIM_Base_MspInit+0x9c>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800

080030c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08c      	sub	sp, #48	; 0x30
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 0318 	add.w	r3, r7, #24
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e2:	d143      	bne.n	800316c <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e4:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_TIM_MspPostInit+0x110>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	4a3a      	ldr	r2, [pc, #232]	; (80031d4 <HAL_TIM_MspPostInit+0x110>)
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	6193      	str	r3, [r2, #24]
 80030f0:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <HAL_TIM_MspPostInit+0x110>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <HAL_TIM_MspPostInit+0x110>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	4a34      	ldr	r2, [pc, #208]	; (80031d4 <HAL_TIM_MspPostInit+0x110>)
 8003102:	f043 0308 	orr.w	r3, r3, #8
 8003106:	6193      	str	r3, [r2, #24]
 8003108:	4b32      	ldr	r3, [pc, #200]	; (80031d4 <HAL_TIM_MspPostInit+0x110>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM_Y_Pin;
 8003114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2302      	movs	r3, #2
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_Y_GPIO_Port, &GPIO_InitStruct);
 8003122:	f107 0318 	add.w	r3, r7, #24
 8003126:	4619      	mov	r1, r3
 8003128:	482b      	ldr	r0, [pc, #172]	; (80031d8 <HAL_TIM_MspPostInit+0x114>)
 800312a:	f001 fa89 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_X_Pin;
 800312e:	2308      	movs	r3, #8
 8003130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2302      	movs	r3, #2
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_X_GPIO_Port, &GPIO_InitStruct);
 800313a:	f107 0318 	add.w	r3, r7, #24
 800313e:	4619      	mov	r1, r3
 8003140:	4826      	ldr	r0, [pc, #152]	; (80031dc <HAL_TIM_MspPostInit+0x118>)
 8003142:	f001 fa7d 	bl	8004640 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003146:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <HAL_TIM_MspPostInit+0x11c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28
 8003164:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <HAL_TIM_MspPostInit+0x11c>)
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800316a:	e02e      	b.n	80031ca <HAL_TIM_MspPostInit+0x106>
  else if(htim->Instance==TIM3)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <HAL_TIM_MspPostInit+0x120>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d129      	bne.n	80031ca <HAL_TIM_MspPostInit+0x106>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_TIM_MspPostInit+0x110>)
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_TIM_MspPostInit+0x110>)
 800317c:	f043 0308 	orr.w	r3, r3, #8
 8003180:	6193      	str	r3, [r2, #24]
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_TIM_MspPostInit+0x110>)
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_Z_Pin;
 800318e:	2310      	movs	r3, #16
 8003190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2302      	movs	r3, #2
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_Z_GPIO_Port, &GPIO_InitStruct);
 800319a:	f107 0318 	add.w	r3, r7, #24
 800319e:	4619      	mov	r1, r3
 80031a0:	480e      	ldr	r0, [pc, #56]	; (80031dc <HAL_TIM_MspPostInit+0x118>)
 80031a2:	f001 fa4d 	bl	8004640 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_TIM_MspPostInit+0x11c>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c4:	4a06      	ldr	r2, [pc, #24]	; (80031e0 <HAL_TIM_MspPostInit+0x11c>)
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	6053      	str	r3, [r2, #4]
}
 80031ca:	bf00      	nop
 80031cc:	3730      	adds	r7, #48	; 0x30
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40010800 	.word	0x40010800
 80031dc:	40010c00 	.word	0x40010c00
 80031e0:	40010000 	.word	0x40010000
 80031e4:	40000400 	.word	0x40000400

080031e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 0310 	add.w	r3, r7, #16
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a20      	ldr	r2, [pc, #128]	; (8003284 <HAL_UART_MspInit+0x9c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d139      	bne.n	800327c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003208:	4b1f      	ldr	r3, [pc, #124]	; (8003288 <HAL_UART_MspInit+0xa0>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <HAL_UART_MspInit+0xa0>)
 800320e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003212:	6193      	str	r3, [r2, #24]
 8003214:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <HAL_UART_MspInit+0xa0>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_UART_MspInit+0xa0>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	4a18      	ldr	r2, [pc, #96]	; (8003288 <HAL_UART_MspInit+0xa0>)
 8003226:	f043 0304 	orr.w	r3, r3, #4
 800322a:	6193      	str	r3, [r2, #24]
 800322c:	4b16      	ldr	r3, [pc, #88]	; (8003288 <HAL_UART_MspInit+0xa0>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800323c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003242:	2303      	movs	r3, #3
 8003244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003246:	f107 0310 	add.w	r3, r7, #16
 800324a:	4619      	mov	r1, r3
 800324c:	480f      	ldr	r0, [pc, #60]	; (800328c <HAL_UART_MspInit+0xa4>)
 800324e:	f001 f9f7 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003260:	f107 0310 	add.w	r3, r7, #16
 8003264:	4619      	mov	r1, r3
 8003266:	4809      	ldr	r0, [pc, #36]	; (800328c <HAL_UART_MspInit+0xa4>)
 8003268:	f001 f9ea 	bl	8004640 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800326c:	2200      	movs	r2, #0
 800326e:	2100      	movs	r1, #0
 8003270:	2025      	movs	r0, #37	; 0x25
 8003272:	f000 ff9a 	bl	80041aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003276:	2025      	movs	r0, #37	; 0x25
 8003278:	f000 ffb3 	bl	80041e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800327c:	bf00      	nop
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40013800 	.word	0x40013800
 8003288:	40021000 	.word	0x40021000
 800328c:	40010800 	.word	0x40010800

08003290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003294:	e7fe      	b.n	8003294 <NMI_Handler+0x4>

08003296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800329a:	e7fe      	b.n	800329a <HardFault_Handler+0x4>

0800329c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032a0:	e7fe      	b.n	80032a0 <MemManage_Handler+0x4>

080032a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032a6:	e7fe      	b.n	80032a6 <BusFault_Handler+0x4>

080032a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032ac:	e7fe      	b.n	80032ac <UsageFault_Handler+0x4>

080032ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032d6:	f000 fa1d 	bl	8003714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <DMA1_Channel1_IRQHandler+0x10>)
 80032e6:	f001 f8a5 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000280 	.word	0x20000280

080032f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <TIM2_IRQHandler+0x10>)
 80032fa:	f002 fb4b 	bl	8005994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200002c4 	.word	0x200002c4

08003308 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <TIM3_IRQHandler+0x10>)
 800330e:	f002 fb41 	bl	8005994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	2000030c 	.word	0x2000030c

0800331c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003320:	4802      	ldr	r0, [pc, #8]	; (800332c <USART1_IRQHandler+0x10>)
 8003322:	f003 f9f5 	bl	8006710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000039c 	.word	0x2000039c

08003330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
	return 1;
 8003334:	2301      	movs	r3, #1
}
 8003336:	4618      	mov	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <_kill>:

int _kill(int pid, int sig)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003348:	f003 ff50 	bl	80071ec <__errno>
 800334c:	4603      	mov	r3, r0
 800334e:	2216      	movs	r2, #22
 8003350:	601a      	str	r2, [r3, #0]
	return -1;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <_exit>:

void _exit (int status)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003366:	f04f 31ff 	mov.w	r1, #4294967295
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ffe7 	bl	800333e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003370:	e7fe      	b.n	8003370 <_exit+0x12>

08003372 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	e00a      	b.n	800339a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003384:	f3af 8000 	nop.w
 8003388:	4601      	mov	r1, r0
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	60ba      	str	r2, [r7, #8]
 8003390:	b2ca      	uxtb	r2, r1
 8003392:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3301      	adds	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	429a      	cmp	r2, r3
 80033a0:	dbf0      	blt.n	8003384 <_read+0x12>
	}

return len;
 80033a2:	687b      	ldr	r3, [r7, #4]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	e009      	b.n	80033d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	60ba      	str	r2, [r7, #8]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	3301      	adds	r3, #1
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	dbf1      	blt.n	80033be <_write+0x12>
	}
	return len;
 80033da:	687b      	ldr	r3, [r7, #4]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <_close>:

int _close(int file)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	return -1;
 80033ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800340a:	605a      	str	r2, [r3, #4]
	return 0;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <_isatty>:

int _isatty(int file)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	return 1;
 8003420:	2301      	movs	r3, #1
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
	return 0;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <_sbrk+0x5c>)
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <_sbrk+0x60>)
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003458:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <_sbrk+0x64>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <_sbrk+0x64>)
 8003462:	4a12      	ldr	r2, [pc, #72]	; (80034ac <_sbrk+0x68>)
 8003464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <_sbrk+0x64>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	429a      	cmp	r2, r3
 8003472:	d207      	bcs.n	8003484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003474:	f003 feba 	bl	80071ec <__errno>
 8003478:	4603      	mov	r3, r0
 800347a:	220c      	movs	r2, #12
 800347c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	e009      	b.n	8003498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800348a:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <_sbrk+0x64>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	4a05      	ldr	r2, [pc, #20]	; (80034a8 <_sbrk+0x64>)
 8003494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003496:	68fb      	ldr	r3, [r7, #12]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20005000 	.word	0x20005000
 80034a4:	00000400 	.word	0x00000400
 80034a8:	200004d0 	.word	0x200004d0
 80034ac:	20000578 	.word	0x20000578

080034b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <UART_Init>:
static uint8_t rx_char; // Biến tạm để nhận 1 ký tự
static volatile uint16_t rx_index = 0;
static volatile bool new_line_ready = false;

// Hàm khởi tạo
void UART_Init(UART_HandleTypeDef *huart) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	g_huart = huart;
 80034c4:	4a06      	ldr	r2, [pc, #24]	; (80034e0 <UART_Init+0x24>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6013      	str	r3, [r2, #0]
	// Kích hoạt ngắt nhận UART, mỗi lần nhận 1 ký tự
	HAL_UART_Receive_IT(g_huart, &rx_char, 1);
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <UART_Init+0x24>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2201      	movs	r2, #1
 80034d0:	4904      	ldr	r1, [pc, #16]	; (80034e4 <UART_Init+0x28>)
 80034d2:	4618      	mov	r0, r3
 80034d4:	f003 f8f7 	bl	80066c6 <HAL_UART_Receive_IT>
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	200004d4 	.word	0x200004d4
 80034e4:	20000558 	.word	0x20000558

080034e8 <UART_IsNewLineReady>:

// Hàm kiểm tra
bool UART_IsNewLineReady(void) {
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
	return new_line_ready;
 80034ec:	4b03      	ldr	r3, [pc, #12]	; (80034fc <UART_IsNewLineReady+0x14>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b2db      	uxtb	r3, r3
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	2000055c 	.word	0x2000055c

08003500 <UART_GetLine>:

// Hàm lấy dòng lệnh
void UART_GetLine(char *buffer) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	if (new_line_ready) {
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <UART_GetLine+0x70>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d029      	beq.n	8003566 <UART_GetLine+0x66>
		// Tạm thời vô hiệu hóa ngắt để sao chép an toàn
		__HAL_UART_DISABLE_IT(g_huart, UART_IT_RXNE);
 8003512:	4b18      	ldr	r3, [pc, #96]	; (8003574 <UART_GetLine+0x74>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	4b16      	ldr	r3, [pc, #88]	; (8003574 <UART_GetLine+0x74>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0220 	bic.w	r2, r2, #32
 8003524:	60da      	str	r2, [r3, #12]

		memcpy(buffer, (char*) rx_buffer, rx_index);
 8003526:	4b14      	ldr	r3, [pc, #80]	; (8003578 <UART_GetLine+0x78>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	b29b      	uxth	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	4913      	ldr	r1, [pc, #76]	; (800357c <UART_GetLine+0x7c>)
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f003 fe85 	bl	8007240 <memcpy>
		buffer[rx_index] = '\0'; // Kết thúc chuỗi
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <UART_GetLine+0x78>)
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
		rx_index = 0;
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <UART_GetLine+0x78>)
 8003548:	2200      	movs	r2, #0
 800354a:	801a      	strh	r2, [r3, #0]

		new_line_ready = false;
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <UART_GetLine+0x70>)
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]

		// Bật lại ngắt
		__HAL_UART_ENABLE_IT(g_huart, UART_IT_RXNE);
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <UART_GetLine+0x74>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <UART_GetLine+0x74>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0220 	orr.w	r2, r2, #32
 8003564:	60da      	str	r2, [r3, #12]
	}
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	2000055c 	.word	0x2000055c
 8003574:	200004d4 	.word	0x200004d4
 8003578:	2000055a 	.word	0x2000055a
 800357c:	200004d8 	.word	0x200004d8

08003580 <UART_Transmit>:

// Hàm gửi chuỗi
void UART_Transmit(const char *str) {
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(g_huart, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <UART_Transmit+0x2c>)
 800358a:	681c      	ldr	r4, [r3, #0]
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fc fddf 	bl	8000150 <strlen>
 8003592:	4603      	mov	r3, r0
 8003594:	b29a      	uxth	r2, r3
 8003596:	f04f 33ff 	mov.w	r3, #4294967295
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4620      	mov	r0, r4
 800359e:	f003 f807 	bl	80065b0 <HAL_UART_Transmit>
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd90      	pop	{r4, r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200004d4 	.word	0x200004d4

080035b0 <UART_Receive_Callback>:

// Hàm Callback được gọi khi ngắt UART xảy ra
// *** RẤT QUAN TRỌNG: Bạn phải gọi hàm này từ callback chính của HAL ***
void UART_Receive_Callback(void) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
	if (!new_line_ready) {
 80035b4:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <UART_Receive_Callback+0x78>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f083 0301 	eor.w	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d028      	beq.n	8003616 <UART_Receive_Callback+0x66>
		// Nếu là ký tự xuống dòng, báo hiệu đã nhận xong 1 dòng
		if (rx_char == '\n' || rx_char == '\r') {
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <UART_Receive_Callback+0x7c>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b0a      	cmp	r3, #10
 80035ca:	d003      	beq.n	80035d4 <UART_Receive_Callback+0x24>
 80035cc:	4b17      	ldr	r3, [pc, #92]	; (800362c <UART_Receive_Callback+0x7c>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b0d      	cmp	r3, #13
 80035d2:	d10f      	bne.n	80035f4 <UART_Receive_Callback+0x44>
			if (rx_index > 0) { // Chỉ xử lý nếu dòng không rỗng
 80035d4:	4b16      	ldr	r3, [pc, #88]	; (8003630 <UART_Receive_Callback+0x80>)
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01b      	beq.n	8003616 <UART_Receive_Callback+0x66>
				rx_buffer[rx_index] = '\0'; // Kết thúc chuỗi
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <UART_Receive_Callback+0x80>)
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <UART_Receive_Callback+0x84>)
 80035e8:	2100      	movs	r1, #0
 80035ea:	5499      	strb	r1, [r3, r2]
				new_line_ready = true;
 80035ec:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <UART_Receive_Callback+0x78>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
			if (rx_index > 0) { // Chỉ xử lý nếu dòng không rỗng
 80035f2:	e010      	b.n	8003616 <UART_Receive_Callback+0x66>
			}
		} else {
			// Lưu ký tự vào buffer
			if (rx_index < RX_BUFFER_SIZE - 1) {
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <UART_Receive_Callback+0x80>)
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b7e      	cmp	r3, #126	; 0x7e
 80035fc:	d80b      	bhi.n	8003616 <UART_Receive_Callback+0x66>
				rx_buffer[rx_index++] = rx_char;
 80035fe:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <UART_Receive_Callback+0x80>)
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	b291      	uxth	r1, r2
 8003608:	4a09      	ldr	r2, [pc, #36]	; (8003630 <UART_Receive_Callback+0x80>)
 800360a:	8011      	strh	r1, [r2, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <UART_Receive_Callback+0x7c>)
 8003610:	7819      	ldrb	r1, [r3, #0]
 8003612:	4b08      	ldr	r3, [pc, #32]	; (8003634 <UART_Receive_Callback+0x84>)
 8003614:	5499      	strb	r1, [r3, r2]
			}
		}
	}
	// Kích hoạt lại ngắt để nhận ký tự tiếp theo
	HAL_UART_Receive_IT(g_huart, &rx_char, 1);
 8003616:	4b08      	ldr	r3, [pc, #32]	; (8003638 <UART_Receive_Callback+0x88>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2201      	movs	r2, #1
 800361c:	4903      	ldr	r1, [pc, #12]	; (800362c <UART_Receive_Callback+0x7c>)
 800361e:	4618      	mov	r0, r3
 8003620:	f003 f851 	bl	80066c6 <HAL_UART_Receive_IT>
}
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}
 8003628:	2000055c 	.word	0x2000055c
 800362c:	20000558 	.word	0x20000558
 8003630:	2000055a 	.word	0x2000055a
 8003634:	200004d8 	.word	0x200004d8
 8003638:	200004d4 	.word	0x200004d4

0800363c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800363c:	f7ff ff38 	bl	80034b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003640:	480b      	ldr	r0, [pc, #44]	; (8003670 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003642:	490c      	ldr	r1, [pc, #48]	; (8003674 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003644:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003648:	e002      	b.n	8003650 <LoopCopyDataInit>

0800364a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800364a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800364c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800364e:	3304      	adds	r3, #4

08003650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003654:	d3f9      	bcc.n	800364a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003658:	4c09      	ldr	r4, [pc, #36]	; (8003680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800365a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800365c:	e001      	b.n	8003662 <LoopFillZerobss>

0800365e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800365e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003660:	3204      	adds	r2, #4

08003662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003664:	d3fb      	bcc.n	800365e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003666:	f003 fdc7 	bl	80071f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800366a:	f7ff f83f 	bl	80026ec <main>
  bx lr
 800366e:	4770      	bx	lr
  ldr r0, =_sdata
 8003670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003674:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003678:	0800bb54 	.word	0x0800bb54
  ldr r2, =_sbss
 800367c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003680:	20000574 	.word	0x20000574

08003684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003684:	e7fe      	b.n	8003684 <ADC1_2_IRQHandler>
	...

08003688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_Init+0x28>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <HAL_Init+0x28>)
 8003692:	f043 0310 	orr.w	r3, r3, #16
 8003696:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003698:	2003      	movs	r0, #3
 800369a:	f000 fd7b 	bl	8004194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800369e:	200f      	movs	r0, #15
 80036a0:	f000 f808 	bl	80036b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a4:	f7ff fc20 	bl	8002ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40022000 	.word	0x40022000

080036b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_InitTick+0x54>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_InitTick+0x58>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4619      	mov	r1, r3
 80036c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fd93 	bl	80041fe <HAL_SYSTICK_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e00e      	b.n	8003700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b0f      	cmp	r3, #15
 80036e6:	d80a      	bhi.n	80036fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036e8:	2200      	movs	r2, #0
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	f000 fd5b 	bl	80041aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036f4:	4a06      	ldr	r2, [pc, #24]	; (8003710 <HAL_InitTick+0x5c>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000030 	.word	0x20000030
 800370c:	20000038 	.word	0x20000038
 8003710:	20000034 	.word	0x20000034

08003714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_IncTick+0x1c>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_IncTick+0x20>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4413      	add	r3, r2
 8003724:	4a03      	ldr	r2, [pc, #12]	; (8003734 <HAL_IncTick+0x20>)
 8003726:	6013      	str	r3, [r2, #0]
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	20000038 	.word	0x20000038
 8003734:	20000560 	.word	0x20000560

08003738 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return uwTick;
 800373c:	4b02      	ldr	r3, [pc, #8]	; (8003748 <HAL_GetTick+0x10>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr
 8003748:	20000560 	.word	0x20000560

0800374c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e0be      	b.n	80038ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d109      	bne.n	8003790 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff fbde 	bl	8002f4c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fbf1 	bl	8003f78 <ADC_ConversionStop_Disable>
 8003796:	4603      	mov	r3, r0
 8003798:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 8099 	bne.w	80038da <HAL_ADC_Init+0x18e>
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f040 8095 	bne.w	80038da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037b8:	f023 0302 	bic.w	r3, r3, #2
 80037bc:	f043 0202 	orr.w	r2, r3, #2
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80037cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	7b1b      	ldrb	r3, [r3, #12]
 80037d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80037d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e4:	d003      	beq.n	80037ee <HAL_ADC_Init+0xa2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d102      	bne.n	80037f4 <HAL_ADC_Init+0xa8>
 80037ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f2:	e000      	b.n	80037f6 <HAL_ADC_Init+0xaa>
 80037f4:	2300      	movs	r3, #0
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	7d1b      	ldrb	r3, [r3, #20]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d119      	bne.n	8003838 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	7b1b      	ldrb	r3, [r3, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	3b01      	subs	r3, #1
 8003812:	035a      	lsls	r2, r3, #13
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	e00b      	b.n	8003838 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	f043 0201 	orr.w	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	430a      	orrs	r2, r1
 800384a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	4b28      	ldr	r3, [pc, #160]	; (80038f4 <HAL_ADC_Init+0x1a8>)
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	430b      	orrs	r3, r1
 800385e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003868:	d003      	beq.n	8003872 <HAL_ADC_Init+0x126>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d104      	bne.n	800387c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	3b01      	subs	r3, #1
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	430a      	orrs	r2, r1
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <HAL_ADC_Init+0x1ac>)
 8003898:	4013      	ands	r3, r2
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	429a      	cmp	r2, r3
 800389e:	d10b      	bne.n	80038b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038b6:	e018      	b.n	80038ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	f023 0312 	bic.w	r3, r3, #18
 80038c0:	f043 0210 	orr.w	r2, r3, #16
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038d8:	e007      	b.n	80038ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	f043 0210 	orr.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	ffe1f7fd 	.word	0xffe1f7fd
 80038f8:	ff1f0efe 	.word	0xff1f0efe

080038fc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_ADC_Start+0x1a>
 8003912:	2302      	movs	r3, #2
 8003914:	e098      	b.n	8003a48 <HAL_ADC_Start+0x14c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fad0 	bl	8003ec4 <ADC_Enable>
 8003924:	4603      	mov	r3, r0
 8003926:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 8087 	bne.w	8003a3e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a41      	ldr	r2, [pc, #260]	; (8003a50 <HAL_ADC_Start+0x154>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d105      	bne.n	800395a <HAL_ADC_Start+0x5e>
 800394e:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <HAL_ADC_Start+0x158>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d115      	bne.n	8003986 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003970:	2b00      	cmp	r3, #0
 8003972:	d026      	beq.n	80039c2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800397c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003984:	e01d      	b.n	80039c2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2f      	ldr	r2, [pc, #188]	; (8003a54 <HAL_ADC_Start+0x158>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_ADC_Start+0xaa>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2b      	ldr	r2, [pc, #172]	; (8003a50 <HAL_ADC_Start+0x154>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10d      	bne.n	80039c2 <HAL_ADC_Start+0xc6>
 80039a6:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <HAL_ADC_Start+0x158>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d006      	beq.n	80039dc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	f023 0206 	bic.w	r2, r3, #6
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80039da:	e002      	b.n	80039e2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f06f 0202 	mvn.w	r2, #2
 80039f2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80039fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003a02:	d113      	bne.n	8003a2c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003a08:	4a11      	ldr	r2, [pc, #68]	; (8003a50 <HAL_ADC_Start+0x154>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d105      	bne.n	8003a1a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003a0e:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <HAL_ADC_Start+0x158>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d108      	bne.n	8003a2c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	e00c      	b.n	8003a46 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	e003      	b.n	8003a46 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40012800 	.word	0x40012800
 8003a54:	40012400 	.word	0x40012400

08003a58 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_ADC_Stop+0x1a>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e01a      	b.n	8003aa8 <HAL_ADC_Stop+0x50>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fa7c 	bl	8003f78 <ADC_ConversionStop_Disable>
 8003a80:	4603      	mov	r3, r0
 8003a82:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	f043 0201 	orr.w	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ac6:	f7ff fe37 	bl	8003738 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	f043 0220 	orr.w	r2, r3, #32
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0d3      	b.n	8003c9a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d131      	bne.n	8003b64 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d12a      	bne.n	8003b64 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003b0e:	e021      	b.n	8003b54 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d01d      	beq.n	8003b54 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_ADC_PollForConversion+0x7e>
 8003b1e:	f7ff fe0b 	bl	8003738 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d212      	bcs.n	8003b54 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	f043 0204 	orr.w	r2, r3, #4
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e0a2      	b.n	8003c9a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0d6      	beq.n	8003b10 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003b62:	e070      	b.n	8003c46 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003b64:	4b4f      	ldr	r3, [pc, #316]	; (8003ca4 <HAL_ADC_PollForConversion+0x1f4>)
 8003b66:	681c      	ldr	r4, [r3, #0]
 8003b68:	2002      	movs	r0, #2
 8003b6a:	f001 fc13 	bl	8005394 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6919      	ldr	r1, [r3, #16]
 8003b7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <HAL_ADC_PollForConversion+0x1f8>)
 8003b7c:	400b      	ands	r3, r1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d118      	bne.n	8003bb4 <HAL_ADC_PollForConversion+0x104>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68d9      	ldr	r1, [r3, #12]
 8003b88:	4b48      	ldr	r3, [pc, #288]	; (8003cac <HAL_ADC_PollForConversion+0x1fc>)
 8003b8a:	400b      	ands	r3, r1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d111      	bne.n	8003bb4 <HAL_ADC_PollForConversion+0x104>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6919      	ldr	r1, [r3, #16]
 8003b96:	4b46      	ldr	r3, [pc, #280]	; (8003cb0 <HAL_ADC_PollForConversion+0x200>)
 8003b98:	400b      	ands	r3, r1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d108      	bne.n	8003bb0 <HAL_ADC_PollForConversion+0x100>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68d9      	ldr	r1, [r3, #12]
 8003ba4:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <HAL_ADC_PollForConversion+0x204>)
 8003ba6:	400b      	ands	r3, r1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_ADC_PollForConversion+0x100>
 8003bac:	2314      	movs	r3, #20
 8003bae:	e020      	b.n	8003bf2 <HAL_ADC_PollForConversion+0x142>
 8003bb0:	2329      	movs	r3, #41	; 0x29
 8003bb2:	e01e      	b.n	8003bf2 <HAL_ADC_PollForConversion+0x142>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6919      	ldr	r1, [r3, #16]
 8003bba:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <HAL_ADC_PollForConversion+0x200>)
 8003bbc:	400b      	ands	r3, r1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_ADC_PollForConversion+0x120>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68d9      	ldr	r1, [r3, #12]
 8003bc8:	4b3a      	ldr	r3, [pc, #232]	; (8003cb4 <HAL_ADC_PollForConversion+0x204>)
 8003bca:	400b      	ands	r3, r1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00d      	beq.n	8003bec <HAL_ADC_PollForConversion+0x13c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6919      	ldr	r1, [r3, #16]
 8003bd6:	4b38      	ldr	r3, [pc, #224]	; (8003cb8 <HAL_ADC_PollForConversion+0x208>)
 8003bd8:	400b      	ands	r3, r1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d108      	bne.n	8003bf0 <HAL_ADC_PollForConversion+0x140>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68d9      	ldr	r1, [r3, #12]
 8003be4:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <HAL_ADC_PollForConversion+0x208>)
 8003be6:	400b      	ands	r3, r1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_PollForConversion+0x140>
 8003bec:	2354      	movs	r3, #84	; 0x54
 8003bee:	e000      	b.n	8003bf2 <HAL_ADC_PollForConversion+0x142>
 8003bf0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003bf8:	e021      	b.n	8003c3e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d01a      	beq.n	8003c38 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <HAL_ADC_PollForConversion+0x168>
 8003c08:	f7ff fd96 	bl	8003738 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d20f      	bcs.n	8003c38 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d90b      	bls.n	8003c38 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	f043 0204 	orr.w	r2, r3, #4
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e030      	b.n	8003c9a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d8d9      	bhi.n	8003bfa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f06f 0212 	mvn.w	r2, #18
 8003c4e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c66:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003c6a:	d115      	bne.n	8003c98 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d111      	bne.n	8003c98 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	f043 0201 	orr.w	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd90      	pop	{r4, r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000030 	.word	0x20000030
 8003ca8:	24924924 	.word	0x24924924
 8003cac:	00924924 	.word	0x00924924
 8003cb0:	12492492 	.word	0x12492492
 8003cb4:	00492492 	.word	0x00492492
 8003cb8:	00249249 	.word	0x00249249

08003cbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x20>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e0dc      	b.n	8003eae <HAL_ADC_ConfigChannel+0x1da>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b06      	cmp	r3, #6
 8003d02:	d81c      	bhi.n	8003d3e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	3b05      	subs	r3, #5
 8003d16:	221f      	movs	r2, #31
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	4019      	ands	r1, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3b05      	subs	r3, #5
 8003d30:	fa00 f203 	lsl.w	r2, r0, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	635a      	str	r2, [r3, #52]	; 0x34
 8003d3c:	e03c      	b.n	8003db8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	d81c      	bhi.n	8003d80 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	3b23      	subs	r3, #35	; 0x23
 8003d58:	221f      	movs	r2, #31
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	4019      	ands	r1, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	3b23      	subs	r3, #35	; 0x23
 8003d72:	fa00 f203 	lsl.w	r2, r0, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d7e:	e01b      	b.n	8003db8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	3b41      	subs	r3, #65	; 0x41
 8003d92:	221f      	movs	r2, #31
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	4019      	ands	r1, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	3b41      	subs	r3, #65	; 0x41
 8003dac:	fa00 f203 	lsl.w	r2, r0, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b09      	cmp	r3, #9
 8003dbe:	d91c      	bls.n	8003dfa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68d9      	ldr	r1, [r3, #12]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	3b1e      	subs	r3, #30
 8003dd2:	2207      	movs	r2, #7
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	4019      	ands	r1, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6898      	ldr	r0, [r3, #8]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4613      	mov	r3, r2
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4413      	add	r3, r2
 8003dea:	3b1e      	subs	r3, #30
 8003dec:	fa00 f203 	lsl.w	r2, r0, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	e019      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6919      	ldr	r1, [r3, #16]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	4413      	add	r3, r2
 8003e0a:	2207      	movs	r2, #7
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	4019      	ands	r1, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6898      	ldr	r0, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	4413      	add	r3, r2
 8003e22:	fa00 f203 	lsl.w	r2, r0, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b10      	cmp	r3, #16
 8003e34:	d003      	beq.n	8003e3e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e3a:	2b11      	cmp	r3, #17
 8003e3c:	d132      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d125      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d126      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003e64:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d11a      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <HAL_ADC_ConfigChannel+0x1e8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	0c9a      	lsrs	r2, r3, #18
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e84:	e002      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f9      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x1b2>
 8003e92:	e007      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	f043 0220 	orr.w	r2, r3, #32
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr
 8003eb8:	40012400 	.word	0x40012400
 8003ebc:	20000030 	.word	0x20000030
 8003ec0:	431bde83 	.word	0x431bde83

08003ec4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d040      	beq.n	8003f64 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0201 	orr.w	r2, r2, #1
 8003ef0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	; (8003f70 <ADC_Enable+0xac>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <ADC_Enable+0xb0>)
 8003ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8003efc:	0c9b      	lsrs	r3, r3, #18
 8003efe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f00:	e002      	b.n	8003f08 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f9      	bne.n	8003f02 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f0e:	f7ff fc13 	bl	8003738 <HAL_GetTick>
 8003f12:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f14:	e01f      	b.n	8003f56 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f16:	f7ff fc0f 	bl	8003738 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d918      	bls.n	8003f56 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d011      	beq.n	8003f56 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	f043 0210 	orr.w	r2, r3, #16
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	f043 0201 	orr.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e007      	b.n	8003f66 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d1d8      	bne.n	8003f16 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000030 	.word	0x20000030
 8003f74:	431bde83 	.word	0x431bde83

08003f78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d12e      	bne.n	8003ff0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fa2:	f7ff fbc9 	bl	8003738 <HAL_GetTick>
 8003fa6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003fa8:	e01b      	b.n	8003fe2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003faa:	f7ff fbc5 	bl	8003738 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d914      	bls.n	8003fe2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d10d      	bne.n	8003fe2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	f043 0210 	orr.w	r2, r3, #16
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	f043 0201 	orr.w	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e007      	b.n	8003ff2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d0dc      	beq.n	8003faa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004018:	4013      	ands	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800402e:	4a04      	ldr	r2, [pc, #16]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	60d3      	str	r3, [r2, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <__NVIC_GetPriorityGrouping+0x18>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	f003 0307 	and.w	r3, r3, #7
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	2b00      	cmp	r3, #0
 8004070:	db0b      	blt.n	800408a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4906      	ldr	r1, [pc, #24]	; (8004094 <__NVIC_EnableIRQ+0x34>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2001      	movs	r0, #1
 8004082:	fa00 f202 	lsl.w	r2, r0, r2
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	e000e100 	.word	0xe000e100

08004098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	6039      	str	r1, [r7, #0]
 80040a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	db0a      	blt.n	80040c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	490c      	ldr	r1, [pc, #48]	; (80040e4 <__NVIC_SetPriority+0x4c>)
 80040b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b6:	0112      	lsls	r2, r2, #4
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	440b      	add	r3, r1
 80040bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c0:	e00a      	b.n	80040d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	4908      	ldr	r1, [pc, #32]	; (80040e8 <__NVIC_SetPriority+0x50>)
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	3b04      	subs	r3, #4
 80040d0:	0112      	lsls	r2, r2, #4
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	440b      	add	r3, r1
 80040d6:	761a      	strb	r2, [r3, #24]
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	e000e100 	.word	0xe000e100
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b089      	sub	sp, #36	; 0x24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f1c3 0307 	rsb	r3, r3, #7
 8004106:	2b04      	cmp	r3, #4
 8004108:	bf28      	it	cs
 800410a:	2304      	movcs	r3, #4
 800410c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3304      	adds	r3, #4
 8004112:	2b06      	cmp	r3, #6
 8004114:	d902      	bls.n	800411c <NVIC_EncodePriority+0x30>
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3b03      	subs	r3, #3
 800411a:	e000      	b.n	800411e <NVIC_EncodePriority+0x32>
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004120:	f04f 32ff 	mov.w	r2, #4294967295
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43da      	mvns	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	401a      	ands	r2, r3
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004134:	f04f 31ff 	mov.w	r1, #4294967295
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	fa01 f303 	lsl.w	r3, r1, r3
 800413e:	43d9      	mvns	r1, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004144:	4313      	orrs	r3, r2
         );
}
 8004146:	4618      	mov	r0, r3
 8004148:	3724      	adds	r7, #36	; 0x24
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3b01      	subs	r3, #1
 800415c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004160:	d301      	bcc.n	8004166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004162:	2301      	movs	r3, #1
 8004164:	e00f      	b.n	8004186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004166:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <SysTick_Config+0x40>)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3b01      	subs	r3, #1
 800416c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800416e:	210f      	movs	r1, #15
 8004170:	f04f 30ff 	mov.w	r0, #4294967295
 8004174:	f7ff ff90 	bl	8004098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <SysTick_Config+0x40>)
 800417a:	2200      	movs	r2, #0
 800417c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <SysTick_Config+0x40>)
 8004180:	2207      	movs	r2, #7
 8004182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	e000e010 	.word	0xe000e010

08004194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ff2d 	bl	8003ffc <__NVIC_SetPriorityGrouping>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	4603      	mov	r3, r0
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041bc:	f7ff ff42 	bl	8004044 <__NVIC_GetPriorityGrouping>
 80041c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	6978      	ldr	r0, [r7, #20]
 80041c8:	f7ff ff90 	bl	80040ec <NVIC_EncodePriority>
 80041cc:	4602      	mov	r2, r0
 80041ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041d2:	4611      	mov	r1, r2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff ff5f 	bl	8004098 <__NVIC_SetPriority>
}
 80041da:	bf00      	nop
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	4603      	mov	r3, r0
 80041ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff ff35 	bl	8004060 <__NVIC_EnableIRQ>
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff ffa2 	bl	8004150 <SysTick_Config>
 800420c:	4603      	mov	r3, r0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e043      	b.n	80042b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <HAL_DMA_Init+0xa8>)
 8004236:	4413      	add	r3, r2
 8004238:	4a22      	ldr	r2, [pc, #136]	; (80042c4 <HAL_DMA_Init+0xac>)
 800423a:	fba2 2303 	umull	r2, r3, r2, r3
 800423e:	091b      	lsrs	r3, r3, #4
 8004240:	009a      	lsls	r2, r3, #2
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a1f      	ldr	r2, [pc, #124]	; (80042c8 <HAL_DMA_Init+0xb0>)
 800424a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004262:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004266:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800427c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	bffdfff8 	.word	0xbffdfff8
 80042c4:	cccccccd 	.word	0xcccccccd
 80042c8:	40020000 	.word	0x40020000

080042cc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d008      	beq.n	80042f6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2204      	movs	r2, #4
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e020      	b.n	8004338 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 020e 	bic.w	r2, r2, #14
 8004304:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f202 	lsl.w	r2, r1, r2
 8004324:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004336:	7bfb      	ldrb	r3, [r7, #15]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr
	...

08004344 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d005      	beq.n	8004368 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2204      	movs	r2, #4
 8004360:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
 8004366:	e051      	b.n	800440c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 020e 	bic.w	r2, r2, #14
 8004376:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_DMA_Abort_IT+0xd4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d029      	beq.n	80043e6 <HAL_DMA_Abort_IT+0xa2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a21      	ldr	r2, [pc, #132]	; (800441c <HAL_DMA_Abort_IT+0xd8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d022      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x9e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_DMA_Abort_IT+0xdc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01a      	beq.n	80043dc <HAL_DMA_Abort_IT+0x98>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <HAL_DMA_Abort_IT+0xe0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d012      	beq.n	80043d6 <HAL_DMA_Abort_IT+0x92>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <HAL_DMA_Abort_IT+0xe4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00a      	beq.n	80043d0 <HAL_DMA_Abort_IT+0x8c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1b      	ldr	r2, [pc, #108]	; (800442c <HAL_DMA_Abort_IT+0xe8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d102      	bne.n	80043ca <HAL_DMA_Abort_IT+0x86>
 80043c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043c8:	e00e      	b.n	80043e8 <HAL_DMA_Abort_IT+0xa4>
 80043ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043ce:	e00b      	b.n	80043e8 <HAL_DMA_Abort_IT+0xa4>
 80043d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043d4:	e008      	b.n	80043e8 <HAL_DMA_Abort_IT+0xa4>
 80043d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043da:	e005      	b.n	80043e8 <HAL_DMA_Abort_IT+0xa4>
 80043dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043e0:	e002      	b.n	80043e8 <HAL_DMA_Abort_IT+0xa4>
 80043e2:	2310      	movs	r3, #16
 80043e4:	e000      	b.n	80043e8 <HAL_DMA_Abort_IT+0xa4>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4a11      	ldr	r2, [pc, #68]	; (8004430 <HAL_DMA_Abort_IT+0xec>)
 80043ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
    } 
  }
  return status;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40020008 	.word	0x40020008
 800441c:	4002001c 	.word	0x4002001c
 8004420:	40020030 	.word	0x40020030
 8004424:	40020044 	.word	0x40020044
 8004428:	40020058 	.word	0x40020058
 800442c:	4002006c 	.word	0x4002006c
 8004430:	40020000 	.word	0x40020000

08004434 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2204      	movs	r2, #4
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d04f      	beq.n	80044fc <HAL_DMA_IRQHandler+0xc8>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d04a      	beq.n	80044fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d107      	bne.n	8004484 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0204 	bic.w	r2, r2, #4
 8004482:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a66      	ldr	r2, [pc, #408]	; (8004624 <HAL_DMA_IRQHandler+0x1f0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d029      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xae>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a65      	ldr	r2, [pc, #404]	; (8004628 <HAL_DMA_IRQHandler+0x1f4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d022      	beq.n	80044de <HAL_DMA_IRQHandler+0xaa>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a63      	ldr	r2, [pc, #396]	; (800462c <HAL_DMA_IRQHandler+0x1f8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01a      	beq.n	80044d8 <HAL_DMA_IRQHandler+0xa4>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a62      	ldr	r2, [pc, #392]	; (8004630 <HAL_DMA_IRQHandler+0x1fc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d012      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x9e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a60      	ldr	r2, [pc, #384]	; (8004634 <HAL_DMA_IRQHandler+0x200>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00a      	beq.n	80044cc <HAL_DMA_IRQHandler+0x98>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a5f      	ldr	r2, [pc, #380]	; (8004638 <HAL_DMA_IRQHandler+0x204>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d102      	bne.n	80044c6 <HAL_DMA_IRQHandler+0x92>
 80044c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044c4:	e00e      	b.n	80044e4 <HAL_DMA_IRQHandler+0xb0>
 80044c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044ca:	e00b      	b.n	80044e4 <HAL_DMA_IRQHandler+0xb0>
 80044cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044d0:	e008      	b.n	80044e4 <HAL_DMA_IRQHandler+0xb0>
 80044d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044d6:	e005      	b.n	80044e4 <HAL_DMA_IRQHandler+0xb0>
 80044d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044dc:	e002      	b.n	80044e4 <HAL_DMA_IRQHandler+0xb0>
 80044de:	2340      	movs	r3, #64	; 0x40
 80044e0:	e000      	b.n	80044e4 <HAL_DMA_IRQHandler+0xb0>
 80044e2:	2304      	movs	r3, #4
 80044e4:	4a55      	ldr	r2, [pc, #340]	; (800463c <HAL_DMA_IRQHandler+0x208>)
 80044e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8094 	beq.w	800461a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80044fa:	e08e      	b.n	800461a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	2202      	movs	r2, #2
 8004502:	409a      	lsls	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d056      	beq.n	80045ba <HAL_DMA_IRQHandler+0x186>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d051      	beq.n	80045ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 020a 	bic.w	r2, r2, #10
 8004532:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a38      	ldr	r2, [pc, #224]	; (8004624 <HAL_DMA_IRQHandler+0x1f0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d029      	beq.n	800459a <HAL_DMA_IRQHandler+0x166>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a37      	ldr	r2, [pc, #220]	; (8004628 <HAL_DMA_IRQHandler+0x1f4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d022      	beq.n	8004596 <HAL_DMA_IRQHandler+0x162>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a35      	ldr	r2, [pc, #212]	; (800462c <HAL_DMA_IRQHandler+0x1f8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01a      	beq.n	8004590 <HAL_DMA_IRQHandler+0x15c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a34      	ldr	r2, [pc, #208]	; (8004630 <HAL_DMA_IRQHandler+0x1fc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d012      	beq.n	800458a <HAL_DMA_IRQHandler+0x156>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a32      	ldr	r2, [pc, #200]	; (8004634 <HAL_DMA_IRQHandler+0x200>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00a      	beq.n	8004584 <HAL_DMA_IRQHandler+0x150>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a31      	ldr	r2, [pc, #196]	; (8004638 <HAL_DMA_IRQHandler+0x204>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d102      	bne.n	800457e <HAL_DMA_IRQHandler+0x14a>
 8004578:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800457c:	e00e      	b.n	800459c <HAL_DMA_IRQHandler+0x168>
 800457e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004582:	e00b      	b.n	800459c <HAL_DMA_IRQHandler+0x168>
 8004584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004588:	e008      	b.n	800459c <HAL_DMA_IRQHandler+0x168>
 800458a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800458e:	e005      	b.n	800459c <HAL_DMA_IRQHandler+0x168>
 8004590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004594:	e002      	b.n	800459c <HAL_DMA_IRQHandler+0x168>
 8004596:	2320      	movs	r3, #32
 8004598:	e000      	b.n	800459c <HAL_DMA_IRQHandler+0x168>
 800459a:	2302      	movs	r3, #2
 800459c:	4a27      	ldr	r2, [pc, #156]	; (800463c <HAL_DMA_IRQHandler+0x208>)
 800459e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d034      	beq.n	800461a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80045b8:	e02f      	b.n	800461a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	2208      	movs	r2, #8
 80045c0:	409a      	lsls	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d028      	beq.n	800461c <HAL_DMA_IRQHandler+0x1e8>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d023      	beq.n	800461c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 020e 	bic.w	r2, r2, #14
 80045e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	2101      	movs	r1, #1
 80045ee:	fa01 f202 	lsl.w	r2, r1, r2
 80045f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
    }
  }
  return;
 800461a:	bf00      	nop
 800461c:	bf00      	nop
}
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40020008 	.word	0x40020008
 8004628:	4002001c 	.word	0x4002001c
 800462c:	40020030 	.word	0x40020030
 8004630:	40020044 	.word	0x40020044
 8004634:	40020058 	.word	0x40020058
 8004638:	4002006c 	.word	0x4002006c
 800463c:	40020000 	.word	0x40020000

08004640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004640:	b480      	push	{r7}
 8004642:	b08b      	sub	sp, #44	; 0x2c
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800464a:	2300      	movs	r3, #0
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800464e:	2300      	movs	r3, #0
 8004650:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004652:	e169      	b.n	8004928 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004654:	2201      	movs	r2, #1
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	4013      	ands	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	429a      	cmp	r2, r3
 800466e:	f040 8158 	bne.w	8004922 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	4a9a      	ldr	r2, [pc, #616]	; (80048e0 <HAL_GPIO_Init+0x2a0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d05e      	beq.n	800473a <HAL_GPIO_Init+0xfa>
 800467c:	4a98      	ldr	r2, [pc, #608]	; (80048e0 <HAL_GPIO_Init+0x2a0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d875      	bhi.n	800476e <HAL_GPIO_Init+0x12e>
 8004682:	4a98      	ldr	r2, [pc, #608]	; (80048e4 <HAL_GPIO_Init+0x2a4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d058      	beq.n	800473a <HAL_GPIO_Init+0xfa>
 8004688:	4a96      	ldr	r2, [pc, #600]	; (80048e4 <HAL_GPIO_Init+0x2a4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d86f      	bhi.n	800476e <HAL_GPIO_Init+0x12e>
 800468e:	4a96      	ldr	r2, [pc, #600]	; (80048e8 <HAL_GPIO_Init+0x2a8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d052      	beq.n	800473a <HAL_GPIO_Init+0xfa>
 8004694:	4a94      	ldr	r2, [pc, #592]	; (80048e8 <HAL_GPIO_Init+0x2a8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d869      	bhi.n	800476e <HAL_GPIO_Init+0x12e>
 800469a:	4a94      	ldr	r2, [pc, #592]	; (80048ec <HAL_GPIO_Init+0x2ac>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d04c      	beq.n	800473a <HAL_GPIO_Init+0xfa>
 80046a0:	4a92      	ldr	r2, [pc, #584]	; (80048ec <HAL_GPIO_Init+0x2ac>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d863      	bhi.n	800476e <HAL_GPIO_Init+0x12e>
 80046a6:	4a92      	ldr	r2, [pc, #584]	; (80048f0 <HAL_GPIO_Init+0x2b0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d046      	beq.n	800473a <HAL_GPIO_Init+0xfa>
 80046ac:	4a90      	ldr	r2, [pc, #576]	; (80048f0 <HAL_GPIO_Init+0x2b0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d85d      	bhi.n	800476e <HAL_GPIO_Init+0x12e>
 80046b2:	2b12      	cmp	r3, #18
 80046b4:	d82a      	bhi.n	800470c <HAL_GPIO_Init+0xcc>
 80046b6:	2b12      	cmp	r3, #18
 80046b8:	d859      	bhi.n	800476e <HAL_GPIO_Init+0x12e>
 80046ba:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <HAL_GPIO_Init+0x80>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	0800473b 	.word	0x0800473b
 80046c4:	08004715 	.word	0x08004715
 80046c8:	08004727 	.word	0x08004727
 80046cc:	08004769 	.word	0x08004769
 80046d0:	0800476f 	.word	0x0800476f
 80046d4:	0800476f 	.word	0x0800476f
 80046d8:	0800476f 	.word	0x0800476f
 80046dc:	0800476f 	.word	0x0800476f
 80046e0:	0800476f 	.word	0x0800476f
 80046e4:	0800476f 	.word	0x0800476f
 80046e8:	0800476f 	.word	0x0800476f
 80046ec:	0800476f 	.word	0x0800476f
 80046f0:	0800476f 	.word	0x0800476f
 80046f4:	0800476f 	.word	0x0800476f
 80046f8:	0800476f 	.word	0x0800476f
 80046fc:	0800476f 	.word	0x0800476f
 8004700:	0800476f 	.word	0x0800476f
 8004704:	0800471d 	.word	0x0800471d
 8004708:	08004731 	.word	0x08004731
 800470c:	4a79      	ldr	r2, [pc, #484]	; (80048f4 <HAL_GPIO_Init+0x2b4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004712:	e02c      	b.n	800476e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	623b      	str	r3, [r7, #32]
          break;
 800471a:	e029      	b.n	8004770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	3304      	adds	r3, #4
 8004722:	623b      	str	r3, [r7, #32]
          break;
 8004724:	e024      	b.n	8004770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	3308      	adds	r3, #8
 800472c:	623b      	str	r3, [r7, #32]
          break;
 800472e:	e01f      	b.n	8004770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	330c      	adds	r3, #12
 8004736:	623b      	str	r3, [r7, #32]
          break;
 8004738:	e01a      	b.n	8004770 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d102      	bne.n	8004748 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004742:	2304      	movs	r3, #4
 8004744:	623b      	str	r3, [r7, #32]
          break;
 8004746:	e013      	b.n	8004770 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d105      	bne.n	800475c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004750:	2308      	movs	r3, #8
 8004752:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	611a      	str	r2, [r3, #16]
          break;
 800475a:	e009      	b.n	8004770 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800475c:	2308      	movs	r3, #8
 800475e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	615a      	str	r2, [r3, #20]
          break;
 8004766:	e003      	b.n	8004770 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004768:	2300      	movs	r3, #0
 800476a:	623b      	str	r3, [r7, #32]
          break;
 800476c:	e000      	b.n	8004770 <HAL_GPIO_Init+0x130>
          break;
 800476e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2bff      	cmp	r3, #255	; 0xff
 8004774:	d801      	bhi.n	800477a <HAL_GPIO_Init+0x13a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	e001      	b.n	800477e <HAL_GPIO_Init+0x13e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3304      	adds	r3, #4
 800477e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2bff      	cmp	r3, #255	; 0xff
 8004784:	d802      	bhi.n	800478c <HAL_GPIO_Init+0x14c>
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	e002      	b.n	8004792 <HAL_GPIO_Init+0x152>
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	3b08      	subs	r3, #8
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	210f      	movs	r1, #15
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	fa01 f303 	lsl.w	r3, r1, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	401a      	ands	r2, r3
 80047a4:	6a39      	ldr	r1, [r7, #32]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	431a      	orrs	r2, r3
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80b1 	beq.w	8004922 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80047c0:	4b4d      	ldr	r3, [pc, #308]	; (80048f8 <HAL_GPIO_Init+0x2b8>)
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	4a4c      	ldr	r2, [pc, #304]	; (80048f8 <HAL_GPIO_Init+0x2b8>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6193      	str	r3, [r2, #24]
 80047cc:	4b4a      	ldr	r3, [pc, #296]	; (80048f8 <HAL_GPIO_Init+0x2b8>)
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80047d8:	4a48      	ldr	r2, [pc, #288]	; (80048fc <HAL_GPIO_Init+0x2bc>)
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	089b      	lsrs	r3, r3, #2
 80047de:	3302      	adds	r3, #2
 80047e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	220f      	movs	r2, #15
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4013      	ands	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a40      	ldr	r2, [pc, #256]	; (8004900 <HAL_GPIO_Init+0x2c0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <HAL_GPIO_Init+0x1ec>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a3f      	ldr	r2, [pc, #252]	; (8004904 <HAL_GPIO_Init+0x2c4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00d      	beq.n	8004828 <HAL_GPIO_Init+0x1e8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a3e      	ldr	r2, [pc, #248]	; (8004908 <HAL_GPIO_Init+0x2c8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d007      	beq.n	8004824 <HAL_GPIO_Init+0x1e4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a3d      	ldr	r2, [pc, #244]	; (800490c <HAL_GPIO_Init+0x2cc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d101      	bne.n	8004820 <HAL_GPIO_Init+0x1e0>
 800481c:	2303      	movs	r3, #3
 800481e:	e006      	b.n	800482e <HAL_GPIO_Init+0x1ee>
 8004820:	2304      	movs	r3, #4
 8004822:	e004      	b.n	800482e <HAL_GPIO_Init+0x1ee>
 8004824:	2302      	movs	r3, #2
 8004826:	e002      	b.n	800482e <HAL_GPIO_Init+0x1ee>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <HAL_GPIO_Init+0x1ee>
 800482c:	2300      	movs	r3, #0
 800482e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004830:	f002 0203 	and.w	r2, r2, #3
 8004834:	0092      	lsls	r2, r2, #2
 8004836:	4093      	lsls	r3, r2
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800483e:	492f      	ldr	r1, [pc, #188]	; (80048fc <HAL_GPIO_Init+0x2bc>)
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	089b      	lsrs	r3, r3, #2
 8004844:	3302      	adds	r3, #2
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d006      	beq.n	8004866 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004858:	4b2d      	ldr	r3, [pc, #180]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	492c      	ldr	r1, [pc, #176]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	4313      	orrs	r3, r2
 8004862:	608b      	str	r3, [r1, #8]
 8004864:	e006      	b.n	8004874 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004866:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	43db      	mvns	r3, r3
 800486e:	4928      	ldr	r1, [pc, #160]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 8004870:	4013      	ands	r3, r2
 8004872:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d006      	beq.n	800488e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004880:	4b23      	ldr	r3, [pc, #140]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	4922      	ldr	r1, [pc, #136]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	4313      	orrs	r3, r2
 800488a:	60cb      	str	r3, [r1, #12]
 800488c:	e006      	b.n	800489c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800488e:	4b20      	ldr	r3, [pc, #128]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	43db      	mvns	r3, r3
 8004896:	491e      	ldr	r1, [pc, #120]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 8004898:	4013      	ands	r3, r2
 800489a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d006      	beq.n	80048b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	4918      	ldr	r1, [pc, #96]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	604b      	str	r3, [r1, #4]
 80048b4:	e006      	b.n	80048c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048b6:	4b16      	ldr	r3, [pc, #88]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	43db      	mvns	r3, r3
 80048be:	4914      	ldr	r1, [pc, #80]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d021      	beq.n	8004914 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80048d0:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	490e      	ldr	r1, [pc, #56]	; (8004910 <HAL_GPIO_Init+0x2d0>)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	4313      	orrs	r3, r2
 80048da:	600b      	str	r3, [r1, #0]
 80048dc:	e021      	b.n	8004922 <HAL_GPIO_Init+0x2e2>
 80048de:	bf00      	nop
 80048e0:	10320000 	.word	0x10320000
 80048e4:	10310000 	.word	0x10310000
 80048e8:	10220000 	.word	0x10220000
 80048ec:	10210000 	.word	0x10210000
 80048f0:	10120000 	.word	0x10120000
 80048f4:	10110000 	.word	0x10110000
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40010000 	.word	0x40010000
 8004900:	40010800 	.word	0x40010800
 8004904:	40010c00 	.word	0x40010c00
 8004908:	40011000 	.word	0x40011000
 800490c:	40011400 	.word	0x40011400
 8004910:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_GPIO_Init+0x304>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	43db      	mvns	r3, r3
 800491c:	4909      	ldr	r1, [pc, #36]	; (8004944 <HAL_GPIO_Init+0x304>)
 800491e:	4013      	ands	r3, r2
 8004920:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	3301      	adds	r3, #1
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	fa22 f303 	lsr.w	r3, r2, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	f47f ae8e 	bne.w	8004654 <HAL_GPIO_Init+0x14>
  }
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	372c      	adds	r7, #44	; 0x2c
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	40010400 	.word	0x40010400

08004948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	887b      	ldrh	r3, [r7, #2]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
 8004964:	e001      	b.n	800496a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr

08004976 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	807b      	strh	r3, [r7, #2]
 8004982:	4613      	mov	r3, r2
 8004984:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004986:	787b      	ldrb	r3, [r7, #1]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800498c:	887a      	ldrh	r2, [r7, #2]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004992:	e003      	b.n	800499c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004994:	887b      	ldrh	r3, [r7, #2]
 8004996:	041a      	lsls	r2, r3, #16
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	611a      	str	r2, [r3, #16]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr
	...

080049a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e272      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8087 	beq.w	8004ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049c8:	4b92      	ldr	r3, [pc, #584]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 030c 	and.w	r3, r3, #12
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d00c      	beq.n	80049ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049d4:	4b8f      	ldr	r3, [pc, #572]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 030c 	and.w	r3, r3, #12
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d112      	bne.n	8004a06 <HAL_RCC_OscConfig+0x5e>
 80049e0:	4b8c      	ldr	r3, [pc, #560]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ec:	d10b      	bne.n	8004a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ee:	4b89      	ldr	r3, [pc, #548]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d06c      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x12c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d168      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e24c      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0e:	d106      	bne.n	8004a1e <HAL_RCC_OscConfig+0x76>
 8004a10:	4b80      	ldr	r3, [pc, #512]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a7f      	ldr	r2, [pc, #508]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	e02e      	b.n	8004a7c <HAL_RCC_OscConfig+0xd4>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10c      	bne.n	8004a40 <HAL_RCC_OscConfig+0x98>
 8004a26:	4b7b      	ldr	r3, [pc, #492]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a7a      	ldr	r2, [pc, #488]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	4b78      	ldr	r3, [pc, #480]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a77      	ldr	r2, [pc, #476]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e01d      	b.n	8004a7c <HAL_RCC_OscConfig+0xd4>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0xbc>
 8004a4a:	4b72      	ldr	r3, [pc, #456]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a71      	ldr	r2, [pc, #452]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	4b6f      	ldr	r3, [pc, #444]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a6e      	ldr	r2, [pc, #440]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e00b      	b.n	8004a7c <HAL_RCC_OscConfig+0xd4>
 8004a64:	4b6b      	ldr	r3, [pc, #428]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a6a      	ldr	r2, [pc, #424]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	4b68      	ldr	r3, [pc, #416]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a67      	ldr	r2, [pc, #412]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d013      	beq.n	8004aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a84:	f7fe fe58 	bl	8003738 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a8c:	f7fe fe54 	bl	8003738 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b64      	cmp	r3, #100	; 0x64
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e200      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9e:	4b5d      	ldr	r3, [pc, #372]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0xe4>
 8004aaa:	e014      	b.n	8004ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fe fe44 	bl	8003738 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab4:	f7fe fe40 	bl	8003738 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	; 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e1ec      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac6:	4b53      	ldr	r3, [pc, #332]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x10c>
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d063      	beq.n	8004baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ae2:	4b4c      	ldr	r3, [pc, #304]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f003 030c 	and.w	r3, r3, #12
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00b      	beq.n	8004b06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004aee:	4b49      	ldr	r3, [pc, #292]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d11c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x18c>
 8004afa:	4b46      	ldr	r3, [pc, #280]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d116      	bne.n	8004b34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b06:	4b43      	ldr	r3, [pc, #268]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <HAL_RCC_OscConfig+0x176>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d001      	beq.n	8004b1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e1c0      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1e:	4b3d      	ldr	r3, [pc, #244]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4939      	ldr	r1, [pc, #228]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b32:	e03a      	b.n	8004baa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d020      	beq.n	8004b7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b3c:	4b36      	ldr	r3, [pc, #216]	; (8004c18 <HAL_RCC_OscConfig+0x270>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b42:	f7fe fdf9 	bl	8003738 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4a:	f7fe fdf5 	bl	8003738 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e1a1      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5c:	4b2d      	ldr	r3, [pc, #180]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b68:	4b2a      	ldr	r3, [pc, #168]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4927      	ldr	r1, [pc, #156]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	600b      	str	r3, [r1, #0]
 8004b7c:	e015      	b.n	8004baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b7e:	4b26      	ldr	r3, [pc, #152]	; (8004c18 <HAL_RCC_OscConfig+0x270>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fe fdd8 	bl	8003738 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b8c:	f7fe fdd4 	bl	8003738 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e180      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9e:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d03a      	beq.n	8004c2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d019      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bbe:	4b17      	ldr	r3, [pc, #92]	; (8004c1c <HAL_RCC_OscConfig+0x274>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc4:	f7fe fdb8 	bl	8003738 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bcc:	f7fe fdb4 	bl	8003738 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e160      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bde:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <HAL_RCC_OscConfig+0x26c>)
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004bea:	2001      	movs	r0, #1
 8004bec:	f000 fafe 	bl	80051ec <RCC_Delay>
 8004bf0:	e01c      	b.n	8004c2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <HAL_RCC_OscConfig+0x274>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf8:	f7fe fd9e 	bl	8003738 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bfe:	e00f      	b.n	8004c20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c00:	f7fe fd9a 	bl	8003738 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d908      	bls.n	8004c20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e146      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000
 8004c18:	42420000 	.word	0x42420000
 8004c1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c20:	4b92      	ldr	r3, [pc, #584]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e9      	bne.n	8004c00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80a6 	beq.w	8004d86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3e:	4b8b      	ldr	r3, [pc, #556]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10d      	bne.n	8004c66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4a:	4b88      	ldr	r3, [pc, #544]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	4a87      	ldr	r2, [pc, #540]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c54:	61d3      	str	r3, [r2, #28]
 8004c56:	4b85      	ldr	r3, [pc, #532]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c66:	4b82      	ldr	r3, [pc, #520]	; (8004e70 <HAL_RCC_OscConfig+0x4c8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d118      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c72:	4b7f      	ldr	r3, [pc, #508]	; (8004e70 <HAL_RCC_OscConfig+0x4c8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a7e      	ldr	r2, [pc, #504]	; (8004e70 <HAL_RCC_OscConfig+0x4c8>)
 8004c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c7e:	f7fe fd5b 	bl	8003738 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c86:	f7fe fd57 	bl	8003738 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b64      	cmp	r3, #100	; 0x64
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e103      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c98:	4b75      	ldr	r3, [pc, #468]	; (8004e70 <HAL_RCC_OscConfig+0x4c8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d106      	bne.n	8004cba <HAL_RCC_OscConfig+0x312>
 8004cac:	4b6f      	ldr	r3, [pc, #444]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	4a6e      	ldr	r2, [pc, #440]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	6213      	str	r3, [r2, #32]
 8004cb8:	e02d      	b.n	8004d16 <HAL_RCC_OscConfig+0x36e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0x334>
 8004cc2:	4b6a      	ldr	r3, [pc, #424]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	4a69      	ldr	r2, [pc, #420]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004cc8:	f023 0301 	bic.w	r3, r3, #1
 8004ccc:	6213      	str	r3, [r2, #32]
 8004cce:	4b67      	ldr	r3, [pc, #412]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	4a66      	ldr	r2, [pc, #408]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004cd4:	f023 0304 	bic.w	r3, r3, #4
 8004cd8:	6213      	str	r3, [r2, #32]
 8004cda:	e01c      	b.n	8004d16 <HAL_RCC_OscConfig+0x36e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	2b05      	cmp	r3, #5
 8004ce2:	d10c      	bne.n	8004cfe <HAL_RCC_OscConfig+0x356>
 8004ce4:	4b61      	ldr	r3, [pc, #388]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	4a60      	ldr	r2, [pc, #384]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004cea:	f043 0304 	orr.w	r3, r3, #4
 8004cee:	6213      	str	r3, [r2, #32]
 8004cf0:	4b5e      	ldr	r3, [pc, #376]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	4a5d      	ldr	r2, [pc, #372]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	6213      	str	r3, [r2, #32]
 8004cfc:	e00b      	b.n	8004d16 <HAL_RCC_OscConfig+0x36e>
 8004cfe:	4b5b      	ldr	r3, [pc, #364]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	4a5a      	ldr	r2, [pc, #360]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004d04:	f023 0301 	bic.w	r3, r3, #1
 8004d08:	6213      	str	r3, [r2, #32]
 8004d0a:	4b58      	ldr	r3, [pc, #352]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	4a57      	ldr	r2, [pc, #348]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004d10:	f023 0304 	bic.w	r3, r3, #4
 8004d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d015      	beq.n	8004d4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1e:	f7fe fd0b 	bl	8003738 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d24:	e00a      	b.n	8004d3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d26:	f7fe fd07 	bl	8003738 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e0b1      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d3c:	4b4b      	ldr	r3, [pc, #300]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0ee      	beq.n	8004d26 <HAL_RCC_OscConfig+0x37e>
 8004d48:	e014      	b.n	8004d74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4a:	f7fe fcf5 	bl	8003738 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d50:	e00a      	b.n	8004d68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d52:	f7fe fcf1 	bl	8003738 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e09b      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d68:	4b40      	ldr	r3, [pc, #256]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1ee      	bne.n	8004d52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d74:	7dfb      	ldrb	r3, [r7, #23]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d105      	bne.n	8004d86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d7a:	4b3c      	ldr	r3, [pc, #240]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	4a3b      	ldr	r2, [pc, #236]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8087 	beq.w	8004e9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d90:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 030c 	and.w	r3, r3, #12
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d061      	beq.n	8004e60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d146      	bne.n	8004e32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da4:	4b33      	ldr	r3, [pc, #204]	; (8004e74 <HAL_RCC_OscConfig+0x4cc>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004daa:	f7fe fcc5 	bl	8003738 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db2:	f7fe fcc1 	bl	8003738 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e06d      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dc4:	4b29      	ldr	r3, [pc, #164]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	d108      	bne.n	8004dec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004dda:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	4921      	ldr	r1, [pc, #132]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dec:	4b1f      	ldr	r3, [pc, #124]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a19      	ldr	r1, [r3, #32]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	491b      	ldr	r1, [pc, #108]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e04:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <HAL_RCC_OscConfig+0x4cc>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0a:	f7fe fc95 	bl	8003738 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e12:	f7fe fc91 	bl	8003738 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e03d      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e24:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCC_OscConfig+0x46a>
 8004e30:	e035      	b.n	8004e9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e32:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <HAL_RCC_OscConfig+0x4cc>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e38:	f7fe fc7e 	bl	8003738 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e40:	f7fe fc7a 	bl	8003738 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e026      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_RCC_OscConfig+0x4c4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1f0      	bne.n	8004e40 <HAL_RCC_OscConfig+0x498>
 8004e5e:	e01e      	b.n	8004e9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d107      	bne.n	8004e78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e019      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	40007000 	.word	0x40007000
 8004e74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_RCC_OscConfig+0x500>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d001      	beq.n	8004e9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40021000 	.word	0x40021000

08004eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0d0      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec0:	4b6a      	ldr	r3, [pc, #424]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d910      	bls.n	8004ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ece:	4b67      	ldr	r3, [pc, #412]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f023 0207 	bic.w	r2, r3, #7
 8004ed6:	4965      	ldr	r1, [pc, #404]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ede:	4b63      	ldr	r3, [pc, #396]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0b8      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d020      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f08:	4b59      	ldr	r3, [pc, #356]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4a58      	ldr	r2, [pc, #352]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f20:	4b53      	ldr	r3, [pc, #332]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	4a52      	ldr	r2, [pc, #328]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f2c:	4b50      	ldr	r3, [pc, #320]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	494d      	ldr	r1, [pc, #308]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d040      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d107      	bne.n	8004f62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f52:	4b47      	ldr	r3, [pc, #284]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d115      	bne.n	8004f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e07f      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d107      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6a:	4b41      	ldr	r3, [pc, #260]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e073      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7a:	4b3d      	ldr	r3, [pc, #244]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e06b      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f8a:	4b39      	ldr	r3, [pc, #228]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f023 0203 	bic.w	r2, r3, #3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	4936      	ldr	r1, [pc, #216]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f9c:	f7fe fbcc 	bl	8003738 <HAL_GetTick>
 8004fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa2:	e00a      	b.n	8004fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa4:	f7fe fbc8 	bl	8003738 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e053      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fba:	4b2d      	ldr	r3, [pc, #180]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f003 020c 	and.w	r2, r3, #12
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d1eb      	bne.n	8004fa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fcc:	4b27      	ldr	r3, [pc, #156]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d210      	bcs.n	8004ffc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fda:	4b24      	ldr	r3, [pc, #144]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 0207 	bic.w	r2, r3, #7
 8004fe2:	4922      	ldr	r1, [pc, #136]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fea:	4b20      	ldr	r3, [pc, #128]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e032      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005008:	4b19      	ldr	r3, [pc, #100]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	4916      	ldr	r1, [pc, #88]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8005016:	4313      	orrs	r3, r2
 8005018:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d009      	beq.n	800503a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005026:	4b12      	ldr	r3, [pc, #72]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	490e      	ldr	r1, [pc, #56]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8005036:	4313      	orrs	r3, r2
 8005038:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800503a:	f000 f821 	bl	8005080 <HAL_RCC_GetSysClockFreq>
 800503e:	4602      	mov	r2, r0
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	490a      	ldr	r1, [pc, #40]	; (8005074 <HAL_RCC_ClockConfig+0x1c8>)
 800504c:	5ccb      	ldrb	r3, [r1, r3]
 800504e:	fa22 f303 	lsr.w	r3, r2, r3
 8005052:	4a09      	ldr	r2, [pc, #36]	; (8005078 <HAL_RCC_ClockConfig+0x1cc>)
 8005054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005056:	4b09      	ldr	r3, [pc, #36]	; (800507c <HAL_RCC_ClockConfig+0x1d0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fb2a 	bl	80036b4 <HAL_InitTick>

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40022000 	.word	0x40022000
 8005070:	40021000 	.word	0x40021000
 8005074:	0800b668 	.word	0x0800b668
 8005078:	20000030 	.word	0x20000030
 800507c:	20000034 	.word	0x20000034

08005080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800509a:	4b1e      	ldr	r3, [pc, #120]	; (8005114 <HAL_RCC_GetSysClockFreq+0x94>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d002      	beq.n	80050b0 <HAL_RCC_GetSysClockFreq+0x30>
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d003      	beq.n	80050b6 <HAL_RCC_GetSysClockFreq+0x36>
 80050ae:	e027      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050b0:	4b19      	ldr	r3, [pc, #100]	; (8005118 <HAL_RCC_GetSysClockFreq+0x98>)
 80050b2:	613b      	str	r3, [r7, #16]
      break;
 80050b4:	e027      	b.n	8005106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	0c9b      	lsrs	r3, r3, #18
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	4a17      	ldr	r2, [pc, #92]	; (800511c <HAL_RCC_GetSysClockFreq+0x9c>)
 80050c0:	5cd3      	ldrb	r3, [r2, r3]
 80050c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d010      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050ce:	4b11      	ldr	r3, [pc, #68]	; (8005114 <HAL_RCC_GetSysClockFreq+0x94>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	0c5b      	lsrs	r3, r3, #17
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	4a11      	ldr	r2, [pc, #68]	; (8005120 <HAL_RCC_GetSysClockFreq+0xa0>)
 80050da:	5cd3      	ldrb	r3, [r2, r3]
 80050dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a0d      	ldr	r2, [pc, #52]	; (8005118 <HAL_RCC_GetSysClockFreq+0x98>)
 80050e2:	fb03 f202 	mul.w	r2, r3, r2
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e004      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a0c      	ldr	r2, [pc, #48]	; (8005124 <HAL_RCC_GetSysClockFreq+0xa4>)
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	613b      	str	r3, [r7, #16]
      break;
 80050fe:	e002      	b.n	8005106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <HAL_RCC_GetSysClockFreq+0x98>)
 8005102:	613b      	str	r3, [r7, #16]
      break;
 8005104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005106:	693b      	ldr	r3, [r7, #16]
}
 8005108:	4618      	mov	r0, r3
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40021000 	.word	0x40021000
 8005118:	007a1200 	.word	0x007a1200
 800511c:	0800b680 	.word	0x0800b680
 8005120:	0800b690 	.word	0x0800b690
 8005124:	003d0900 	.word	0x003d0900

08005128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800512c:	4b02      	ldr	r3, [pc, #8]	; (8005138 <HAL_RCC_GetHCLKFreq+0x10>)
 800512e:	681b      	ldr	r3, [r3, #0]
}
 8005130:	4618      	mov	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr
 8005138:	20000030 	.word	0x20000030

0800513c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005140:	f7ff fff2 	bl	8005128 <HAL_RCC_GetHCLKFreq>
 8005144:	4602      	mov	r2, r0
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	0a1b      	lsrs	r3, r3, #8
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	4903      	ldr	r1, [pc, #12]	; (8005160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005152:	5ccb      	ldrb	r3, [r1, r3]
 8005154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005158:	4618      	mov	r0, r3
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40021000 	.word	0x40021000
 8005160:	0800b678 	.word	0x0800b678

08005164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005168:	f7ff ffde 	bl	8005128 <HAL_RCC_GetHCLKFreq>
 800516c:	4602      	mov	r2, r0
 800516e:	4b05      	ldr	r3, [pc, #20]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	0adb      	lsrs	r3, r3, #11
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	4903      	ldr	r1, [pc, #12]	; (8005188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800517a:	5ccb      	ldrb	r3, [r1, r3]
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005180:	4618      	mov	r0, r3
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40021000 	.word	0x40021000
 8005188:	0800b678 	.word	0x0800b678

0800518c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	220f      	movs	r2, #15
 800519a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800519c:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <HAL_RCC_GetClockConfig+0x58>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f003 0203 	and.w	r2, r3, #3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051a8:	4b0e      	ldr	r3, [pc, #56]	; (80051e4 <HAL_RCC_GetClockConfig+0x58>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <HAL_RCC_GetClockConfig+0x58>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80051c0:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <HAL_RCC_GetClockConfig+0x58>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	08db      	lsrs	r3, r3, #3
 80051c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_RCC_GetClockConfig+0x5c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0207 	and.w	r2, r3, #7
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40022000 	.word	0x40022000

080051ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <RCC_Delay+0x34>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a0a      	ldr	r2, [pc, #40]	; (8005224 <RCC_Delay+0x38>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	0a5b      	lsrs	r3, r3, #9
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	fb02 f303 	mul.w	r3, r2, r3
 8005206:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005208:	bf00      	nop
  }
  while (Delay --);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1e5a      	subs	r2, r3, #1
 800520e:	60fa      	str	r2, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1f9      	bne.n	8005208 <RCC_Delay+0x1c>
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	bc80      	pop	{r7}
 800521e:	4770      	bx	lr
 8005220:	20000030 	.word	0x20000030
 8005224:	10624dd3 	.word	0x10624dd3

08005228 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d07d      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005244:	2300      	movs	r3, #0
 8005246:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005248:	4b4f      	ldr	r3, [pc, #316]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10d      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005254:	4b4c      	ldr	r3, [pc, #304]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	4a4b      	ldr	r2, [pc, #300]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800525a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525e:	61d3      	str	r3, [r2, #28]
 8005260:	4b49      	ldr	r3, [pc, #292]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005268:	60bb      	str	r3, [r7, #8]
 800526a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800526c:	2301      	movs	r3, #1
 800526e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005270:	4b46      	ldr	r3, [pc, #280]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005278:	2b00      	cmp	r3, #0
 800527a:	d118      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800527c:	4b43      	ldr	r3, [pc, #268]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a42      	ldr	r2, [pc, #264]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005286:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005288:	f7fe fa56 	bl	8003738 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528e:	e008      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005290:	f7fe fa52 	bl	8003738 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e06d      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a2:	4b3a      	ldr	r3, [pc, #232]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052ae:	4b36      	ldr	r3, [pc, #216]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d02e      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d027      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052cc:	4b2e      	ldr	r3, [pc, #184]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052d6:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052d8:	2201      	movs	r2, #1
 80052da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052dc:	4b2c      	ldr	r3, [pc, #176]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052e2:	4a29      	ldr	r2, [pc, #164]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d014      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f2:	f7fe fa21 	bl	8003738 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f8:	e00a      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fa:	f7fe fa1d 	bl	8003738 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3288 	movw	r2, #5000	; 0x1388
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e036      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005310:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0ee      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800531c:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4917      	ldr	r1, [pc, #92]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532a:	4313      	orrs	r3, r2
 800532c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d105      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005334:	4b14      	ldr	r3, [pc, #80]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	4a13      	ldr	r2, [pc, #76]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800533a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800533e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800534c:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	490b      	ldr	r1, [pc, #44]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535a:	4313      	orrs	r3, r2
 800535c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800536a:	4b07      	ldr	r3, [pc, #28]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	4904      	ldr	r1, [pc, #16]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005378:	4313      	orrs	r3, r2
 800537a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000
 800538c:	40007000 	.word	0x40007000
 8005390:	42420440 	.word	0x42420440

08005394 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b10      	cmp	r3, #16
 80053ba:	f200 808a 	bhi.w	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d045      	beq.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d075      	beq.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80053ca:	e082      	b.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80053cc:	4b46      	ldr	r3, [pc, #280]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80053d2:	4b45      	ldr	r3, [pc, #276]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d07b      	beq.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	0c9b      	lsrs	r3, r3, #18
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	4a41      	ldr	r2, [pc, #260]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80053e8:	5cd3      	ldrb	r3, [r2, r3]
 80053ea:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d015      	beq.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053f6:	4b3c      	ldr	r3, [pc, #240]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	0c5b      	lsrs	r3, r3, #17
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	4a3b      	ldr	r2, [pc, #236]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005402:	5cd3      	ldrb	r3, [r2, r3]
 8005404:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00d      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005410:	4a38      	ldr	r2, [pc, #224]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	fbb2 f2f3 	udiv	r2, r2, r3
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	e004      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4a34      	ldr	r2, [pc, #208]	; (80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800542c:	4b2e      	ldr	r3, [pc, #184]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005438:	d102      	bne.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	61bb      	str	r3, [r7, #24]
      break;
 800543e:	e04a      	b.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	4a2d      	ldr	r2, [pc, #180]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	61bb      	str	r3, [r7, #24]
      break;
 800544e:	e042      	b.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005450:	4b25      	ldr	r3, [pc, #148]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005460:	d108      	bne.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800546c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	e01f      	b.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800547e:	d109      	bne.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005480:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800548c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	e00f      	b.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800549e:	d11c      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80054a0:	4b11      	ldr	r3, [pc, #68]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d016      	beq.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80054ac:	f24f 4324 	movw	r3, #62500	; 0xf424
 80054b0:	61bb      	str	r3, [r7, #24]
      break;
 80054b2:	e012      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80054b4:	e011      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80054b6:	f7ff fe55 	bl	8005164 <HAL_RCC_GetPCLK2Freq>
 80054ba:	4602      	mov	r2, r0
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	0b9b      	lsrs	r3, r3, #14
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	3301      	adds	r3, #1
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ce:	61bb      	str	r3, [r7, #24]
      break;
 80054d0:	e004      	b.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054d2:	bf00      	nop
 80054d4:	e002      	b.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054da:	bf00      	nop
    }
  }
  return (frequency);
 80054dc:	69bb      	ldr	r3, [r7, #24]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40021000 	.word	0x40021000
 80054ec:	0800b694 	.word	0x0800b694
 80054f0:	0800b6a4 	.word	0x0800b6a4
 80054f4:	007a1200 	.word	0x007a1200
 80054f8:	003d0900 	.word	0x003d0900
 80054fc:	aaaaaaab 	.word	0xaaaaaaab

08005500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e041      	b.n	8005596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fd fd78 	bl	800301c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3304      	adds	r3, #4
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f000 fcc6 	bl	8005ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e041      	b.n	8005634 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f839 	bl	800563c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3304      	adds	r3, #4
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f000 fc77 	bl	8005ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr
	...

08005650 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <HAL_TIM_PWM_Start_IT+0x28>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	bf14      	ite	ne
 8005670:	2301      	movne	r3, #1
 8005672:	2300      	moveq	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	e022      	b.n	80056be <HAL_TIM_PWM_Start_IT+0x6e>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b04      	cmp	r3, #4
 800567c:	d109      	bne.n	8005692 <HAL_TIM_PWM_Start_IT+0x42>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b01      	cmp	r3, #1
 8005688:	bf14      	ite	ne
 800568a:	2301      	movne	r3, #1
 800568c:	2300      	moveq	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	e015      	b.n	80056be <HAL_TIM_PWM_Start_IT+0x6e>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d109      	bne.n	80056ac <HAL_TIM_PWM_Start_IT+0x5c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	bf14      	ite	ne
 80056a4:	2301      	movne	r3, #1
 80056a6:	2300      	moveq	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	e008      	b.n	80056be <HAL_TIM_PWM_Start_IT+0x6e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	bf14      	ite	ne
 80056b8:	2301      	movne	r3, #1
 80056ba:	2300      	moveq	r3, #0
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e0a9      	b.n	800581a <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <HAL_TIM_PWM_Start_IT+0x86>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d4:	e013      	b.n	80056fe <HAL_TIM_PWM_Start_IT+0xae>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d104      	bne.n	80056e6 <HAL_TIM_PWM_Start_IT+0x96>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e4:	e00b      	b.n	80056fe <HAL_TIM_PWM_Start_IT+0xae>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_PWM_Start_IT+0xa6>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f4:	e003      	b.n	80056fe <HAL_TIM_PWM_Start_IT+0xae>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b0c      	cmp	r3, #12
 8005702:	d841      	bhi.n	8005788 <HAL_TIM_PWM_Start_IT+0x138>
 8005704:	a201      	add	r2, pc, #4	; (adr r2, 800570c <HAL_TIM_PWM_Start_IT+0xbc>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	08005741 	.word	0x08005741
 8005710:	08005789 	.word	0x08005789
 8005714:	08005789 	.word	0x08005789
 8005718:	08005789 	.word	0x08005789
 800571c:	08005753 	.word	0x08005753
 8005720:	08005789 	.word	0x08005789
 8005724:	08005789 	.word	0x08005789
 8005728:	08005789 	.word	0x08005789
 800572c:	08005765 	.word	0x08005765
 8005730:	08005789 	.word	0x08005789
 8005734:	08005789 	.word	0x08005789
 8005738:	08005789 	.word	0x08005789
 800573c:	08005777 	.word	0x08005777
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0202 	orr.w	r2, r2, #2
 800574e:	60da      	str	r2, [r3, #12]
      break;
 8005750:	e01d      	b.n	800578e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0204 	orr.w	r2, r2, #4
 8005760:	60da      	str	r2, [r3, #12]
      break;
 8005762:	e014      	b.n	800578e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0208 	orr.w	r2, r2, #8
 8005772:	60da      	str	r2, [r3, #12]
      break;
 8005774:	e00b      	b.n	800578e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0210 	orr.w	r2, r2, #16
 8005784:	60da      	str	r2, [r3, #12]
      break;
 8005786:	e002      	b.n	800578e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
      break;
 800578c:	bf00      	nop
  }

  if (status == HAL_OK)
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d141      	bne.n	8005818 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2201      	movs	r2, #1
 800579a:	6839      	ldr	r1, [r7, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fe23 	bl	80063e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1f      	ldr	r2, [pc, #124]	; (8005824 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d107      	bne.n	80057bc <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057ba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a18      	ldr	r2, [pc, #96]	; (8005824 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00e      	beq.n	80057e4 <HAL_TIM_PWM_Start_IT+0x194>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ce:	d009      	beq.n	80057e4 <HAL_TIM_PWM_Start_IT+0x194>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a14      	ldr	r2, [pc, #80]	; (8005828 <HAL_TIM_PWM_Start_IT+0x1d8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d004      	beq.n	80057e4 <HAL_TIM_PWM_Start_IT+0x194>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a13      	ldr	r2, [pc, #76]	; (800582c <HAL_TIM_PWM_Start_IT+0x1dc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d111      	bne.n	8005808 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b06      	cmp	r3, #6
 80057f4:	d010      	beq.n	8005818 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0201 	orr.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005806:	e007      	b.n	8005818 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800

08005830 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b0c      	cmp	r3, #12
 8005842:	d841      	bhi.n	80058c8 <HAL_TIM_PWM_Stop_IT+0x98>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	08005881 	.word	0x08005881
 8005850:	080058c9 	.word	0x080058c9
 8005854:	080058c9 	.word	0x080058c9
 8005858:	080058c9 	.word	0x080058c9
 800585c:	08005893 	.word	0x08005893
 8005860:	080058c9 	.word	0x080058c9
 8005864:	080058c9 	.word	0x080058c9
 8005868:	080058c9 	.word	0x080058c9
 800586c:	080058a5 	.word	0x080058a5
 8005870:	080058c9 	.word	0x080058c9
 8005874:	080058c9 	.word	0x080058c9
 8005878:	080058c9 	.word	0x080058c9
 800587c:	080058b7 	.word	0x080058b7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0202 	bic.w	r2, r2, #2
 800588e:	60da      	str	r2, [r3, #12]
      break;
 8005890:	e01d      	b.n	80058ce <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0204 	bic.w	r2, r2, #4
 80058a0:	60da      	str	r2, [r3, #12]
      break;
 80058a2:	e014      	b.n	80058ce <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0208 	bic.w	r2, r2, #8
 80058b2:	60da      	str	r2, [r3, #12]
      break;
 80058b4:	e00b      	b.n	80058ce <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0210 	bic.w	r2, r2, #16
 80058c4:	60da      	str	r2, [r3, #12]
      break;
 80058c6:	e002      	b.n	80058ce <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	73fb      	strb	r3, [r7, #15]
      break;
 80058cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d157      	bne.n	8005984 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2200      	movs	r2, #0
 80058da:	6839      	ldr	r1, [r7, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fd83 	bl	80063e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <HAL_TIM_PWM_Stop_IT+0x160>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d117      	bne.n	800591c <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6a1a      	ldr	r2, [r3, #32]
 80058f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10f      	bne.n	800591c <HAL_TIM_PWM_Stop_IT+0xec>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a1a      	ldr	r2, [r3, #32]
 8005902:	f240 4344 	movw	r3, #1092	; 0x444
 8005906:	4013      	ands	r3, r2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d107      	bne.n	800591c <HAL_TIM_PWM_Stop_IT+0xec>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800591a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6a1a      	ldr	r2, [r3, #32]
 8005922:	f241 1311 	movw	r3, #4369	; 0x1111
 8005926:	4013      	ands	r3, r2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10f      	bne.n	800594c <HAL_TIM_PWM_Stop_IT+0x11c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	f240 4344 	movw	r3, #1092	; 0x444
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d107      	bne.n	800594c <HAL_TIM_PWM_Stop_IT+0x11c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <HAL_TIM_PWM_Stop_IT+0x12c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800595a:	e013      	b.n	8005984 <HAL_TIM_PWM_Stop_IT+0x154>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b04      	cmp	r3, #4
 8005960:	d104      	bne.n	800596c <HAL_TIM_PWM_Stop_IT+0x13c>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800596a:	e00b      	b.n	8005984 <HAL_TIM_PWM_Stop_IT+0x154>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b08      	cmp	r3, #8
 8005970:	d104      	bne.n	800597c <HAL_TIM_PWM_Stop_IT+0x14c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800597a:	e003      	b.n	8005984 <HAL_TIM_PWM_Stop_IT+0x154>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005984:	7bfb      	ldrb	r3, [r7, #15]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40012c00 	.word	0x40012c00

08005994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d020      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01b      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0202 	mvn.w	r2, #2
 80059c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fa63 	bl	8005eaa <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fa56 	bl	8005e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7fc fe5f 	bl	80026b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d020      	beq.n	8005a44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01b      	beq.n	8005a44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0204 	mvn.w	r2, #4
 8005a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa3d 	bl	8005eaa <HAL_TIM_IC_CaptureCallback>
 8005a30:	e005      	b.n	8005a3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa30 	bl	8005e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fc fe39 	bl	80026b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d020      	beq.n	8005a90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01b      	beq.n	8005a90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0208 	mvn.w	r2, #8
 8005a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2204      	movs	r2, #4
 8005a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa17 	bl	8005eaa <HAL_TIM_IC_CaptureCallback>
 8005a7c:	e005      	b.n	8005a8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa0a 	bl	8005e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7fc fe13 	bl	80026b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d020      	beq.n	8005adc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d01b      	beq.n	8005adc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0210 	mvn.w	r2, #16
 8005aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9f1 	bl	8005eaa <HAL_TIM_IC_CaptureCallback>
 8005ac8:	e005      	b.n	8005ad6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f9e4 	bl	8005e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7fc fded 	bl	80026b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00c      	beq.n	8005b00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d007      	beq.n	8005b00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0201 	mvn.w	r2, #1
 8005af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f9c3 	bl	8005e86 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00c      	beq.n	8005b24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d007      	beq.n	8005b24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fced 	bl	80064fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00c      	beq.n	8005b48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9ba 	bl	8005ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00c      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0220 	mvn.w	r2, #32
 8005b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fcc0 	bl	80064ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	e0ae      	b.n	8005cf0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b0c      	cmp	r3, #12
 8005b9e:	f200 809f 	bhi.w	8005ce0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bdd 	.word	0x08005bdd
 8005bac:	08005ce1 	.word	0x08005ce1
 8005bb0:	08005ce1 	.word	0x08005ce1
 8005bb4:	08005ce1 	.word	0x08005ce1
 8005bb8:	08005c1d 	.word	0x08005c1d
 8005bbc:	08005ce1 	.word	0x08005ce1
 8005bc0:	08005ce1 	.word	0x08005ce1
 8005bc4:	08005ce1 	.word	0x08005ce1
 8005bc8:	08005c5f 	.word	0x08005c5f
 8005bcc:	08005ce1 	.word	0x08005ce1
 8005bd0:	08005ce1 	.word	0x08005ce1
 8005bd4:	08005ce1 	.word	0x08005ce1
 8005bd8:	08005c9f 	.word	0x08005c9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 f9e2 	bl	8005fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0208 	orr.w	r2, r2, #8
 8005bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0204 	bic.w	r2, r2, #4
 8005c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6999      	ldr	r1, [r3, #24]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	619a      	str	r2, [r3, #24]
      break;
 8005c1a:	e064      	b.n	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fa28 	bl	8006078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6999      	ldr	r1, [r3, #24]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	021a      	lsls	r2, r3, #8
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	619a      	str	r2, [r3, #24]
      break;
 8005c5c:	e043      	b.n	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fa71 	bl	800614c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0208 	orr.w	r2, r2, #8
 8005c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0204 	bic.w	r2, r2, #4
 8005c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69d9      	ldr	r1, [r3, #28]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	61da      	str	r2, [r3, #28]
      break;
 8005c9c:	e023      	b.n	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fabb 	bl	8006220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69d9      	ldr	r1, [r3, #28]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	021a      	lsls	r2, r3, #8
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	61da      	str	r2, [r3, #28]
      break;
 8005cde:	e002      	b.n	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_TIM_ConfigClockSource+0x1c>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e0b4      	b.n	8005e7e <HAL_TIM_ConfigClockSource+0x186>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d4c:	d03e      	beq.n	8005dcc <HAL_TIM_ConfigClockSource+0xd4>
 8005d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d52:	f200 8087 	bhi.w	8005e64 <HAL_TIM_ConfigClockSource+0x16c>
 8005d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5a:	f000 8086 	beq.w	8005e6a <HAL_TIM_ConfigClockSource+0x172>
 8005d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d62:	d87f      	bhi.n	8005e64 <HAL_TIM_ConfigClockSource+0x16c>
 8005d64:	2b70      	cmp	r3, #112	; 0x70
 8005d66:	d01a      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0xa6>
 8005d68:	2b70      	cmp	r3, #112	; 0x70
 8005d6a:	d87b      	bhi.n	8005e64 <HAL_TIM_ConfigClockSource+0x16c>
 8005d6c:	2b60      	cmp	r3, #96	; 0x60
 8005d6e:	d050      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0x11a>
 8005d70:	2b60      	cmp	r3, #96	; 0x60
 8005d72:	d877      	bhi.n	8005e64 <HAL_TIM_ConfigClockSource+0x16c>
 8005d74:	2b50      	cmp	r3, #80	; 0x50
 8005d76:	d03c      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0xfa>
 8005d78:	2b50      	cmp	r3, #80	; 0x50
 8005d7a:	d873      	bhi.n	8005e64 <HAL_TIM_ConfigClockSource+0x16c>
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d058      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0x13a>
 8005d80:	2b40      	cmp	r3, #64	; 0x40
 8005d82:	d86f      	bhi.n	8005e64 <HAL_TIM_ConfigClockSource+0x16c>
 8005d84:	2b30      	cmp	r3, #48	; 0x30
 8005d86:	d064      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x15a>
 8005d88:	2b30      	cmp	r3, #48	; 0x30
 8005d8a:	d86b      	bhi.n	8005e64 <HAL_TIM_ConfigClockSource+0x16c>
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d060      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x15a>
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	d867      	bhi.n	8005e64 <HAL_TIM_ConfigClockSource+0x16c>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d05c      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x15a>
 8005d98:	2b10      	cmp	r3, #16
 8005d9a:	d05a      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x15a>
 8005d9c:	e062      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	6899      	ldr	r1, [r3, #8]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f000 fafc 	bl	80063aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	609a      	str	r2, [r3, #8]
      break;
 8005dca:	e04f      	b.n	8005e6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	6899      	ldr	r1, [r3, #8]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f000 fae5 	bl	80063aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dee:	609a      	str	r2, [r3, #8]
      break;
 8005df0:	e03c      	b.n	8005e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6859      	ldr	r1, [r3, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f000 fa5c 	bl	80062bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2150      	movs	r1, #80	; 0x50
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fab3 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005e10:	e02c      	b.n	8005e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6859      	ldr	r1, [r3, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f000 fa7a 	bl	8006318 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2160      	movs	r1, #96	; 0x60
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 faa3 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005e30:	e01c      	b.n	8005e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6859      	ldr	r1, [r3, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f000 fa3c 	bl	80062bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2140      	movs	r1, #64	; 0x40
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fa93 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005e50:	e00c      	b.n	8005e6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	f000 fa8a 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005e62:	e003      	b.n	8005e6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	73fb      	strb	r3, [r7, #15]
      break;
 8005e68:	e000      	b.n	8005e6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr

08005eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bc80      	pop	{r7}
 8005ecc:	4770      	bx	lr
	...

08005ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a2f      	ldr	r2, [pc, #188]	; (8005fa0 <TIM_Base_SetConfig+0xd0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <TIM_Base_SetConfig+0x30>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eee:	d007      	beq.n	8005f00 <TIM_Base_SetConfig+0x30>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a2c      	ldr	r2, [pc, #176]	; (8005fa4 <TIM_Base_SetConfig+0xd4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_Base_SetConfig+0x30>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a2b      	ldr	r2, [pc, #172]	; (8005fa8 <TIM_Base_SetConfig+0xd8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d108      	bne.n	8005f12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a22      	ldr	r2, [pc, #136]	; (8005fa0 <TIM_Base_SetConfig+0xd0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00b      	beq.n	8005f32 <TIM_Base_SetConfig+0x62>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f20:	d007      	beq.n	8005f32 <TIM_Base_SetConfig+0x62>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1f      	ldr	r2, [pc, #124]	; (8005fa4 <TIM_Base_SetConfig+0xd4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_Base_SetConfig+0x62>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <TIM_Base_SetConfig+0xd8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d108      	bne.n	8005f44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a0d      	ldr	r2, [pc, #52]	; (8005fa0 <TIM_Base_SetConfig+0xd0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d103      	bne.n	8005f78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	691a      	ldr	r2, [r3, #16]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f023 0201 	bic.w	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	611a      	str	r2, [r3, #16]
  }
}
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800

08005fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f023 0201 	bic.w	r2, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0303 	bic.w	r3, r3, #3
 8005fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f023 0302 	bic.w	r3, r3, #2
 8005ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a1c      	ldr	r2, [pc, #112]	; (8006074 <TIM_OC1_SetConfig+0xc8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d10c      	bne.n	8006022 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 0308 	bic.w	r3, r3, #8
 800600e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f023 0304 	bic.w	r3, r3, #4
 8006020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a13      	ldr	r2, [pc, #76]	; (8006074 <TIM_OC1_SetConfig+0xc8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d111      	bne.n	800604e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	621a      	str	r2, [r3, #32]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40012c00 	.word	0x40012c00

08006078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f023 0210 	bic.w	r2, r3, #16
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	021b      	lsls	r3, r3, #8
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f023 0320 	bic.w	r3, r3, #32
 80060c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <TIM_OC2_SetConfig+0xd0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d10d      	bne.n	80060f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a14      	ldr	r2, [pc, #80]	; (8006148 <TIM_OC2_SetConfig+0xd0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d113      	bne.n	8006124 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800610a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr
 8006148:	40012c00 	.word	0x40012c00

0800614c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a1d      	ldr	r2, [pc, #116]	; (800621c <TIM_OC3_SetConfig+0xd0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d10d      	bne.n	80061c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a14      	ldr	r2, [pc, #80]	; (800621c <TIM_OC3_SetConfig+0xd0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d113      	bne.n	80061f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	621a      	str	r2, [r3, #32]
}
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	bc80      	pop	{r7}
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40012c00 	.word	0x40012c00

08006220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	021b      	lsls	r3, r3, #8
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800626a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	031b      	lsls	r3, r3, #12
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a0f      	ldr	r2, [pc, #60]	; (80062b8 <TIM_OC4_SetConfig+0x98>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d109      	bne.n	8006294 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	019b      	lsls	r3, r3, #6
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr
 80062b8:	40012c00 	.word	0x40012c00

080062bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f023 0201 	bic.w	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f023 030a 	bic.w	r3, r3, #10
 80062f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	621a      	str	r2, [r3, #32]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f023 0210 	bic.w	r2, r3, #16
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	031b      	lsls	r3, r3, #12
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006354:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	621a      	str	r2, [r3, #32]
}
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr

08006376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006376:	b480      	push	{r7}
 8006378:	b085      	sub	sp, #20
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	f043 0307 	orr.w	r3, r3, #7
 8006398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	609a      	str	r2, [r3, #8]
}
 80063a0:	bf00      	nop
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr

080063aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b087      	sub	sp, #28
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	021a      	lsls	r2, r3, #8
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	431a      	orrs	r2, r3
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	609a      	str	r2, [r3, #8]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr

080063e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	2201      	movs	r2, #1
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a1a      	ldr	r2, [r3, #32]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	43db      	mvns	r3, r3
 800640a:	401a      	ands	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a1a      	ldr	r2, [r3, #32]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	fa01 f303 	lsl.w	r3, r1, r3
 8006420:	431a      	orrs	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr

08006430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006440:	2b01      	cmp	r3, #1
 8006442:	d101      	bne.n	8006448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006444:	2302      	movs	r3, #2
 8006446:	e046      	b.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a16      	ldr	r2, [pc, #88]	; (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006494:	d009      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a12      	ldr	r2, [pc, #72]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a10      	ldr	r2, [pc, #64]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d10c      	bne.n	80064c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr
 80064e0:	40012c00 	.word	0x40012c00
 80064e4:	40000400 	.word	0x40000400
 80064e8:	40000800 	.word	0x40000800

080064ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bc80      	pop	{r7}
 80064fc:	4770      	bx	lr

080064fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr

08006510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e042      	b.n	80065a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fc fe56 	bl	80031e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2224      	movs	r2, #36	; 0x24
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fdb7 	bl	80070c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695a      	ldr	r2, [r3, #20]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2220      	movs	r2, #32
 8006594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2220      	movs	r2, #32
 800659c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	4613      	mov	r3, r2
 80065be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d175      	bne.n	80066bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <HAL_UART_Transmit+0x2c>
 80065d6:	88fb      	ldrh	r3, [r7, #6]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e06e      	b.n	80066be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2221      	movs	r2, #33	; 0x21
 80065ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ee:	f7fd f8a3 	bl	8003738 <HAL_GetTick>
 80065f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	88fa      	ldrh	r2, [r7, #6]
 80065f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	88fa      	ldrh	r2, [r7, #6]
 80065fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006608:	d108      	bne.n	800661c <HAL_UART_Transmit+0x6c>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006612:	2300      	movs	r3, #0
 8006614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	e003      	b.n	8006624 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006620:	2300      	movs	r3, #0
 8006622:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006624:	e02e      	b.n	8006684 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2200      	movs	r2, #0
 800662e:	2180      	movs	r1, #128	; 0x80
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 fb1c 	bl	8006c6e <UART_WaitOnFlagUntilTimeout>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e03a      	b.n	80066be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10b      	bne.n	8006666 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800665c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	3302      	adds	r3, #2
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	e007      	b.n	8006676 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	3301      	adds	r3, #1
 8006674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1cb      	bne.n	8006626 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2200      	movs	r2, #0
 8006696:	2140      	movs	r1, #64	; 0x40
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 fae8 	bl	8006c6e <UART_WaitOnFlagUntilTimeout>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e006      	b.n	80066be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	e000      	b.n	80066be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80066bc:	2302      	movs	r3, #2
  }
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3720      	adds	r7, #32
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	4613      	mov	r3, r2
 80066d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d112      	bne.n	8006706 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <HAL_UART_Receive_IT+0x26>
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e00b      	b.n	8006708 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	461a      	mov	r2, r3
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 fb0f 	bl	8006d20 <UART_Start_Receive_IT>
 8006702:	4603      	mov	r3, r0
 8006704:	e000      	b.n	8006708 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006706:	2302      	movs	r3, #2
  }
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b0ba      	sub	sp, #232	; 0xe8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006736:	2300      	movs	r3, #0
 8006738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800673c:	2300      	movs	r3, #0
 800673e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800674e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10f      	bne.n	8006776 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	d009      	beq.n	8006776 <HAL_UART_IRQHandler+0x66>
 8006762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fbec 	bl	8006f4c <UART_Receive_IT>
      return;
 8006774:	e25b      	b.n	8006c2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 80de 	beq.w	800693c <HAL_UART_IRQHandler+0x22c>
 8006780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800678c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006790:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80d1 	beq.w	800693c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800679a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00b      	beq.n	80067be <HAL_UART_IRQHandler+0xae>
 80067a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	f043 0201 	orr.w	r2, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00b      	beq.n	80067e2 <HAL_UART_IRQHandler+0xd2>
 80067ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067da:	f043 0202 	orr.w	r2, r3, #2
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00b      	beq.n	8006806 <HAL_UART_IRQHandler+0xf6>
 80067ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	f043 0204 	orr.w	r2, r3, #4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d011      	beq.n	8006836 <HAL_UART_IRQHandler+0x126>
 8006812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d105      	bne.n	800682a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800681e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682e:	f043 0208 	orr.w	r2, r3, #8
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 81f2 	beq.w	8006c24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006844:	f003 0320 	and.w	r3, r3, #32
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_UART_IRQHandler+0x14e>
 800684c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fb77 	bl	8006f4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	bf14      	ite	ne
 800686c:	2301      	movne	r3, #1
 800686e:	2300      	moveq	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d103      	bne.n	800688a <HAL_UART_IRQHandler+0x17a>
 8006882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006886:	2b00      	cmp	r3, #0
 8006888:	d04f      	beq.n	800692a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa81 	bl	8006d92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d041      	beq.n	8006922 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3314      	adds	r3, #20
 80068a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3314      	adds	r3, #20
 80068c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1d9      	bne.n	800689e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d013      	beq.n	800691a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f6:	4a7e      	ldr	r2, [pc, #504]	; (8006af0 <HAL_UART_IRQHandler+0x3e0>)
 80068f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fd fd20 	bl	8004344 <HAL_DMA_Abort_IT>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d016      	beq.n	8006938 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006914:	4610      	mov	r0, r2
 8006916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006918:	e00e      	b.n	8006938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f993 	bl	8006c46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006920:	e00a      	b.n	8006938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f98f 	bl	8006c46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006928:	e006      	b.n	8006938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f98b 	bl	8006c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006936:	e175      	b.n	8006c24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006938:	bf00      	nop
    return;
 800693a:	e173      	b.n	8006c24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006940:	2b01      	cmp	r3, #1
 8006942:	f040 814f 	bne.w	8006be4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800694a:	f003 0310 	and.w	r3, r3, #16
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 8148 	beq.w	8006be4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 8141 	beq.w	8006be4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006962:	2300      	movs	r3, #0
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 80b6 	beq.w	8006af4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006994:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8145 	beq.w	8006c28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069a6:	429a      	cmp	r2, r3
 80069a8:	f080 813e 	bcs.w	8006c28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	2b20      	cmp	r3, #32
 80069bc:	f000 8088 	beq.w	8006ad0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	330c      	adds	r3, #12
 80069c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	330c      	adds	r3, #12
 80069e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1d9      	bne.n	80069c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3314      	adds	r3, #20
 8006a12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a1e:	f023 0301 	bic.w	r3, r3, #1
 8006a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e1      	bne.n	8006a0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3314      	adds	r3, #20
 8006a4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3314      	adds	r3, #20
 8006a68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e3      	bne.n	8006a48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	330c      	adds	r3, #12
 8006a94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa0:	f023 0310 	bic.w	r3, r3, #16
 8006aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	330c      	adds	r3, #12
 8006aae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ab2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ab4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ab8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e3      	bne.n	8006a8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fd fbfe 	bl	80042cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f8b6 	bl	8006c58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006aec:	e09c      	b.n	8006c28 <HAL_UART_IRQHandler+0x518>
 8006aee:	bf00      	nop
 8006af0:	08006e57 	.word	0x08006e57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 808e 	beq.w	8006c2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8089 	beq.w	8006c2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b3e:	647a      	str	r2, [r7, #68]	; 0x44
 8006b40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e3      	bne.n	8006b1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3314      	adds	r3, #20
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	623b      	str	r3, [r7, #32]
   return(result);
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3314      	adds	r3, #20
 8006b72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b76:	633a      	str	r2, [r7, #48]	; 0x30
 8006b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e3      	bne.n	8006b52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0310 	bic.w	r3, r3, #16
 8006bae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	330c      	adds	r3, #12
 8006bb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bbc:	61fa      	str	r2, [r7, #28]
 8006bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	69b9      	ldr	r1, [r7, #24]
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e3      	bne.n	8006b98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f83b 	bl	8006c58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006be2:	e023      	b.n	8006c2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d009      	beq.n	8006c04 <HAL_UART_IRQHandler+0x4f4>
 8006bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f93e 	bl	8006e7e <UART_Transmit_IT>
    return;
 8006c02:	e014      	b.n	8006c2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00e      	beq.n	8006c2e <HAL_UART_IRQHandler+0x51e>
 8006c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d008      	beq.n	8006c2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f97d 	bl	8006f1c <UART_EndTransmit_IT>
    return;
 8006c22:	e004      	b.n	8006c2e <HAL_UART_IRQHandler+0x51e>
    return;
 8006c24:	bf00      	nop
 8006c26:	e002      	b.n	8006c2e <HAL_UART_IRQHandler+0x51e>
      return;
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <HAL_UART_IRQHandler+0x51e>
      return;
 8006c2c:	bf00      	nop
  }
}
 8006c2e:	37e8      	adds	r7, #232	; 0xe8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr

08006c46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr

08006c58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr

08006c6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b086      	sub	sp, #24
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	603b      	str	r3, [r7, #0]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7e:	e03b      	b.n	8006cf8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d037      	beq.n	8006cf8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c88:	f7fc fd56 	bl	8003738 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	6a3a      	ldr	r2, [r7, #32]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d302      	bcc.n	8006c9e <UART_WaitOnFlagUntilTimeout+0x30>
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e03a      	b.n	8006d18 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d023      	beq.n	8006cf8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b80      	cmp	r3, #128	; 0x80
 8006cb4:	d020      	beq.n	8006cf8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b40      	cmp	r3, #64	; 0x40
 8006cba:	d01d      	beq.n	8006cf8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	d116      	bne.n	8006cf8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f856 	bl	8006d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2208      	movs	r2, #8
 8006cea:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e00f      	b.n	8006d18 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4013      	ands	r3, r2
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	bf0c      	ite	eq
 8006d08:	2301      	moveq	r3, #1
 8006d0a:	2300      	movne	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	461a      	mov	r2, r3
 8006d10:	79fb      	ldrb	r3, [r7, #7]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d0b4      	beq.n	8006c80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	88fa      	ldrh	r2, [r7, #6]
 8006d38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	88fa      	ldrh	r2, [r7, #6]
 8006d3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2222      	movs	r2, #34	; 0x22
 8006d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d64:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	695a      	ldr	r2, [r3, #20]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f042 0201 	orr.w	r2, r2, #1
 8006d74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0220 	orr.w	r2, r2, #32
 8006d84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr

08006d92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b095      	sub	sp, #84	; 0x54
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	330c      	adds	r3, #12
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006db0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	330c      	adds	r3, #12
 8006db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dba:	643a      	str	r2, [r7, #64]	; 0x40
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e5      	bne.n	8006d9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3314      	adds	r3, #20
 8006dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	f023 0301 	bic.w	r3, r3, #1
 8006de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3314      	adds	r3, #20
 8006dec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006df0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e5      	bne.n	8006dce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d119      	bne.n	8006e3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f023 0310 	bic.w	r3, r3, #16
 8006e20:	647b      	str	r3, [r7, #68]	; 0x44
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	330c      	adds	r3, #12
 8006e28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e2a:	61ba      	str	r2, [r7, #24]
 8006e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6979      	ldr	r1, [r7, #20]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	613b      	str	r3, [r7, #16]
   return(result);
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e5      	bne.n	8006e0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e4c:	bf00      	nop
 8006e4e:	3754      	adds	r7, #84	; 0x54
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f7ff fee8 	bl	8006c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e76:	bf00      	nop
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b085      	sub	sp, #20
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b21      	cmp	r3, #33	; 0x21
 8006e90:	d13e      	bne.n	8006f10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e9a:	d114      	bne.n	8006ec6 <UART_Transmit_IT+0x48>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d110      	bne.n	8006ec6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	1c9a      	adds	r2, r3, #2
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	621a      	str	r2, [r3, #32]
 8006ec4:	e008      	b.n	8006ed8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	1c59      	adds	r1, r3, #1
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6211      	str	r1, [r2, #32]
 8006ed0:	781a      	ldrb	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10f      	bne.n	8006f0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006efa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e000      	b.n	8006f12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
  }
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr

08006f1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7ff fe79 	bl	8006c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08c      	sub	sp, #48	; 0x30
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b22      	cmp	r3, #34	; 0x22
 8006f5e:	f040 80ae 	bne.w	80070be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6a:	d117      	bne.n	8006f9c <UART_Receive_IT+0x50>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d113      	bne.n	8006f9c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	1c9a      	adds	r2, r3, #2
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	629a      	str	r2, [r3, #40]	; 0x28
 8006f9a:	e026      	b.n	8006fea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fae:	d007      	beq.n	8006fc0 <UART_Receive_IT+0x74>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <UART_Receive_IT+0x82>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d106      	bne.n	8006fce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	e008      	b.n	8006fe0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fde:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d15d      	bne.n	80070ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0220 	bic.w	r2, r2, #32
 800700c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800701c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	695a      	ldr	r2, [r3, #20]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0201 	bic.w	r2, r2, #1
 800702c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007040:	2b01      	cmp	r3, #1
 8007042:	d135      	bne.n	80070b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	330c      	adds	r3, #12
 8007050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	613b      	str	r3, [r7, #16]
   return(result);
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f023 0310 	bic.w	r3, r3, #16
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330c      	adds	r3, #12
 8007068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800706a:	623a      	str	r2, [r7, #32]
 800706c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	69f9      	ldr	r1, [r7, #28]
 8007070:	6a3a      	ldr	r2, [r7, #32]
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	61bb      	str	r3, [r7, #24]
   return(result);
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e5      	bne.n	800704a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0310 	and.w	r3, r3, #16
 8007088:	2b10      	cmp	r3, #16
 800708a:	d10a      	bne.n	80070a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff fdd5 	bl	8006c58 <HAL_UARTEx_RxEventCallback>
 80070ae:	e002      	b.n	80070b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7fb fb09 	bl	80026c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	e002      	b.n	80070c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	e000      	b.n	80070c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80070be:	2302      	movs	r3, #2
  }
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3730      	adds	r7, #48	; 0x30
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007102:	f023 030c 	bic.w	r3, r3, #12
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	6812      	ldr	r2, [r2, #0]
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	430b      	orrs	r3, r1
 800710e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699a      	ldr	r2, [r3, #24]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a2c      	ldr	r2, [pc, #176]	; (80071dc <UART_SetConfig+0x114>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d103      	bne.n	8007138 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007130:	f7fe f818 	bl	8005164 <HAL_RCC_GetPCLK2Freq>
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	e002      	b.n	800713e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007138:	f7fe f800 	bl	800513c <HAL_RCC_GetPCLK1Freq>
 800713c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009a      	lsls	r2, r3, #2
 8007148:	441a      	add	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	fbb2 f3f3 	udiv	r3, r2, r3
 8007154:	4a22      	ldr	r2, [pc, #136]	; (80071e0 <UART_SetConfig+0x118>)
 8007156:	fba2 2303 	umull	r2, r3, r2, r3
 800715a:	095b      	lsrs	r3, r3, #5
 800715c:	0119      	lsls	r1, r3, #4
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4613      	mov	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	009a      	lsls	r2, r3, #2
 8007168:	441a      	add	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	fbb2 f2f3 	udiv	r2, r2, r3
 8007174:	4b1a      	ldr	r3, [pc, #104]	; (80071e0 <UART_SetConfig+0x118>)
 8007176:	fba3 0302 	umull	r0, r3, r3, r2
 800717a:	095b      	lsrs	r3, r3, #5
 800717c:	2064      	movs	r0, #100	; 0x64
 800717e:	fb00 f303 	mul.w	r3, r0, r3
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	3332      	adds	r3, #50	; 0x32
 8007188:	4a15      	ldr	r2, [pc, #84]	; (80071e0 <UART_SetConfig+0x118>)
 800718a:	fba2 2303 	umull	r2, r3, r2, r3
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007194:	4419      	add	r1, r3
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	009a      	lsls	r2, r3, #2
 80071a0:	441a      	add	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80071ac:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <UART_SetConfig+0x118>)
 80071ae:	fba3 0302 	umull	r0, r3, r3, r2
 80071b2:	095b      	lsrs	r3, r3, #5
 80071b4:	2064      	movs	r0, #100	; 0x64
 80071b6:	fb00 f303 	mul.w	r3, r0, r3
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	011b      	lsls	r3, r3, #4
 80071be:	3332      	adds	r3, #50	; 0x32
 80071c0:	4a07      	ldr	r2, [pc, #28]	; (80071e0 <UART_SetConfig+0x118>)
 80071c2:	fba2 2303 	umull	r2, r3, r2, r3
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	f003 020f 	and.w	r2, r3, #15
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	440a      	add	r2, r1
 80071d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80071d4:	bf00      	nop
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40013800 	.word	0x40013800
 80071e0:	51eb851f 	.word	0x51eb851f

080071e4 <atof>:
 80071e4:	2100      	movs	r1, #0
 80071e6:	f001 baeb 	b.w	80087c0 <strtod>
	...

080071ec <__errno>:
 80071ec:	4b01      	ldr	r3, [pc, #4]	; (80071f4 <__errno+0x8>)
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	2000003c 	.word	0x2000003c

080071f8 <__libc_init_array>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	2600      	movs	r6, #0
 80071fc:	4d0c      	ldr	r5, [pc, #48]	; (8007230 <__libc_init_array+0x38>)
 80071fe:	4c0d      	ldr	r4, [pc, #52]	; (8007234 <__libc_init_array+0x3c>)
 8007200:	1b64      	subs	r4, r4, r5
 8007202:	10a4      	asrs	r4, r4, #2
 8007204:	42a6      	cmp	r6, r4
 8007206:	d109      	bne.n	800721c <__libc_init_array+0x24>
 8007208:	f004 f9d2 	bl	800b5b0 <_init>
 800720c:	2600      	movs	r6, #0
 800720e:	4d0a      	ldr	r5, [pc, #40]	; (8007238 <__libc_init_array+0x40>)
 8007210:	4c0a      	ldr	r4, [pc, #40]	; (800723c <__libc_init_array+0x44>)
 8007212:	1b64      	subs	r4, r4, r5
 8007214:	10a4      	asrs	r4, r4, #2
 8007216:	42a6      	cmp	r6, r4
 8007218:	d105      	bne.n	8007226 <__libc_init_array+0x2e>
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007220:	4798      	blx	r3
 8007222:	3601      	adds	r6, #1
 8007224:	e7ee      	b.n	8007204 <__libc_init_array+0xc>
 8007226:	f855 3b04 	ldr.w	r3, [r5], #4
 800722a:	4798      	blx	r3
 800722c:	3601      	adds	r6, #1
 800722e:	e7f2      	b.n	8007216 <__libc_init_array+0x1e>
 8007230:	0800bb4c 	.word	0x0800bb4c
 8007234:	0800bb4c 	.word	0x0800bb4c
 8007238:	0800bb4c 	.word	0x0800bb4c
 800723c:	0800bb50 	.word	0x0800bb50

08007240 <memcpy>:
 8007240:	440a      	add	r2, r1
 8007242:	4291      	cmp	r1, r2
 8007244:	f100 33ff 	add.w	r3, r0, #4294967295
 8007248:	d100      	bne.n	800724c <memcpy+0xc>
 800724a:	4770      	bx	lr
 800724c:	b510      	push	{r4, lr}
 800724e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007252:	4291      	cmp	r1, r2
 8007254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007258:	d1f9      	bne.n	800724e <memcpy+0xe>
 800725a:	bd10      	pop	{r4, pc}

0800725c <memset>:
 800725c:	4603      	mov	r3, r0
 800725e:	4402      	add	r2, r0
 8007260:	4293      	cmp	r3, r2
 8007262:	d100      	bne.n	8007266 <memset+0xa>
 8007264:	4770      	bx	lr
 8007266:	f803 1b01 	strb.w	r1, [r3], #1
 800726a:	e7f9      	b.n	8007260 <memset+0x4>

0800726c <__cvt>:
 800726c:	2b00      	cmp	r3, #0
 800726e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007272:	461f      	mov	r7, r3
 8007274:	bfbb      	ittet	lt
 8007276:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800727a:	461f      	movlt	r7, r3
 800727c:	2300      	movge	r3, #0
 800727e:	232d      	movlt	r3, #45	; 0x2d
 8007280:	b088      	sub	sp, #32
 8007282:	4614      	mov	r4, r2
 8007284:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007286:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007288:	7013      	strb	r3, [r2, #0]
 800728a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800728c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007290:	f023 0820 	bic.w	r8, r3, #32
 8007294:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007298:	d005      	beq.n	80072a6 <__cvt+0x3a>
 800729a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800729e:	d100      	bne.n	80072a2 <__cvt+0x36>
 80072a0:	3501      	adds	r5, #1
 80072a2:	2302      	movs	r3, #2
 80072a4:	e000      	b.n	80072a8 <__cvt+0x3c>
 80072a6:	2303      	movs	r3, #3
 80072a8:	aa07      	add	r2, sp, #28
 80072aa:	9204      	str	r2, [sp, #16]
 80072ac:	aa06      	add	r2, sp, #24
 80072ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80072b2:	e9cd 3500 	strd	r3, r5, [sp]
 80072b6:	4622      	mov	r2, r4
 80072b8:	463b      	mov	r3, r7
 80072ba:	f001 fb19 	bl	80088f0 <_dtoa_r>
 80072be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072c2:	4606      	mov	r6, r0
 80072c4:	d102      	bne.n	80072cc <__cvt+0x60>
 80072c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072c8:	07db      	lsls	r3, r3, #31
 80072ca:	d522      	bpl.n	8007312 <__cvt+0xa6>
 80072cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072d0:	eb06 0905 	add.w	r9, r6, r5
 80072d4:	d110      	bne.n	80072f8 <__cvt+0x8c>
 80072d6:	7833      	ldrb	r3, [r6, #0]
 80072d8:	2b30      	cmp	r3, #48	; 0x30
 80072da:	d10a      	bne.n	80072f2 <__cvt+0x86>
 80072dc:	2200      	movs	r2, #0
 80072de:	2300      	movs	r3, #0
 80072e0:	4620      	mov	r0, r4
 80072e2:	4639      	mov	r1, r7
 80072e4:	f7f9 fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80072e8:	b918      	cbnz	r0, 80072f2 <__cvt+0x86>
 80072ea:	f1c5 0501 	rsb	r5, r5, #1
 80072ee:	f8ca 5000 	str.w	r5, [sl]
 80072f2:	f8da 3000 	ldr.w	r3, [sl]
 80072f6:	4499      	add	r9, r3
 80072f8:	2200      	movs	r2, #0
 80072fa:	2300      	movs	r3, #0
 80072fc:	4620      	mov	r0, r4
 80072fe:	4639      	mov	r1, r7
 8007300:	f7f9 fb52 	bl	80009a8 <__aeabi_dcmpeq>
 8007304:	b108      	cbz	r0, 800730a <__cvt+0x9e>
 8007306:	f8cd 901c 	str.w	r9, [sp, #28]
 800730a:	2230      	movs	r2, #48	; 0x30
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	454b      	cmp	r3, r9
 8007310:	d307      	bcc.n	8007322 <__cvt+0xb6>
 8007312:	4630      	mov	r0, r6
 8007314:	9b07      	ldr	r3, [sp, #28]
 8007316:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007318:	1b9b      	subs	r3, r3, r6
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	b008      	add	sp, #32
 800731e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007322:	1c59      	adds	r1, r3, #1
 8007324:	9107      	str	r1, [sp, #28]
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	e7f0      	b.n	800730c <__cvt+0xa0>

0800732a <__exponent>:
 800732a:	4603      	mov	r3, r0
 800732c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800732e:	2900      	cmp	r1, #0
 8007330:	f803 2b02 	strb.w	r2, [r3], #2
 8007334:	bfb6      	itet	lt
 8007336:	222d      	movlt	r2, #45	; 0x2d
 8007338:	222b      	movge	r2, #43	; 0x2b
 800733a:	4249      	neglt	r1, r1
 800733c:	2909      	cmp	r1, #9
 800733e:	7042      	strb	r2, [r0, #1]
 8007340:	dd2b      	ble.n	800739a <__exponent+0x70>
 8007342:	f10d 0407 	add.w	r4, sp, #7
 8007346:	46a4      	mov	ip, r4
 8007348:	270a      	movs	r7, #10
 800734a:	fb91 f6f7 	sdiv	r6, r1, r7
 800734e:	460a      	mov	r2, r1
 8007350:	46a6      	mov	lr, r4
 8007352:	fb07 1516 	mls	r5, r7, r6, r1
 8007356:	2a63      	cmp	r2, #99	; 0x63
 8007358:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800735c:	4631      	mov	r1, r6
 800735e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007362:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007366:	dcf0      	bgt.n	800734a <__exponent+0x20>
 8007368:	3130      	adds	r1, #48	; 0x30
 800736a:	f1ae 0502 	sub.w	r5, lr, #2
 800736e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007372:	4629      	mov	r1, r5
 8007374:	1c44      	adds	r4, r0, #1
 8007376:	4561      	cmp	r1, ip
 8007378:	d30a      	bcc.n	8007390 <__exponent+0x66>
 800737a:	f10d 0209 	add.w	r2, sp, #9
 800737e:	eba2 020e 	sub.w	r2, r2, lr
 8007382:	4565      	cmp	r5, ip
 8007384:	bf88      	it	hi
 8007386:	2200      	movhi	r2, #0
 8007388:	4413      	add	r3, r2
 800738a:	1a18      	subs	r0, r3, r0
 800738c:	b003      	add	sp, #12
 800738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007390:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007394:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007398:	e7ed      	b.n	8007376 <__exponent+0x4c>
 800739a:	2330      	movs	r3, #48	; 0x30
 800739c:	3130      	adds	r1, #48	; 0x30
 800739e:	7083      	strb	r3, [r0, #2]
 80073a0:	70c1      	strb	r1, [r0, #3]
 80073a2:	1d03      	adds	r3, r0, #4
 80073a4:	e7f1      	b.n	800738a <__exponent+0x60>
	...

080073a8 <_printf_float>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	b091      	sub	sp, #68	; 0x44
 80073ae:	460c      	mov	r4, r1
 80073b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80073b4:	4616      	mov	r6, r2
 80073b6:	461f      	mov	r7, r3
 80073b8:	4605      	mov	r5, r0
 80073ba:	f002 fbed 	bl	8009b98 <_localeconv_r>
 80073be:	6803      	ldr	r3, [r0, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	9309      	str	r3, [sp, #36]	; 0x24
 80073c4:	f7f8 fec4 	bl	8000150 <strlen>
 80073c8:	2300      	movs	r3, #0
 80073ca:	930e      	str	r3, [sp, #56]	; 0x38
 80073cc:	f8d8 3000 	ldr.w	r3, [r8]
 80073d0:	900a      	str	r0, [sp, #40]	; 0x28
 80073d2:	3307      	adds	r3, #7
 80073d4:	f023 0307 	bic.w	r3, r3, #7
 80073d8:	f103 0208 	add.w	r2, r3, #8
 80073dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80073e0:	f8d4 b000 	ldr.w	fp, [r4]
 80073e4:	f8c8 2000 	str.w	r2, [r8]
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80073f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80073f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80073f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80073fa:	f04f 32ff 	mov.w	r2, #4294967295
 80073fe:	4640      	mov	r0, r8
 8007400:	4b9c      	ldr	r3, [pc, #624]	; (8007674 <_printf_float+0x2cc>)
 8007402:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007404:	f7f9 fb02 	bl	8000a0c <__aeabi_dcmpun>
 8007408:	bb70      	cbnz	r0, 8007468 <_printf_float+0xc0>
 800740a:	f04f 32ff 	mov.w	r2, #4294967295
 800740e:	4640      	mov	r0, r8
 8007410:	4b98      	ldr	r3, [pc, #608]	; (8007674 <_printf_float+0x2cc>)
 8007412:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007414:	f7f9 fadc 	bl	80009d0 <__aeabi_dcmple>
 8007418:	bb30      	cbnz	r0, 8007468 <_printf_float+0xc0>
 800741a:	2200      	movs	r2, #0
 800741c:	2300      	movs	r3, #0
 800741e:	4640      	mov	r0, r8
 8007420:	4651      	mov	r1, sl
 8007422:	f7f9 facb 	bl	80009bc <__aeabi_dcmplt>
 8007426:	b110      	cbz	r0, 800742e <_printf_float+0x86>
 8007428:	232d      	movs	r3, #45	; 0x2d
 800742a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800742e:	4b92      	ldr	r3, [pc, #584]	; (8007678 <_printf_float+0x2d0>)
 8007430:	4892      	ldr	r0, [pc, #584]	; (800767c <_printf_float+0x2d4>)
 8007432:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007436:	bf94      	ite	ls
 8007438:	4698      	movls	r8, r3
 800743a:	4680      	movhi	r8, r0
 800743c:	2303      	movs	r3, #3
 800743e:	f04f 0a00 	mov.w	sl, #0
 8007442:	6123      	str	r3, [r4, #16]
 8007444:	f02b 0304 	bic.w	r3, fp, #4
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	4633      	mov	r3, r6
 800744c:	4621      	mov	r1, r4
 800744e:	4628      	mov	r0, r5
 8007450:	9700      	str	r7, [sp, #0]
 8007452:	aa0f      	add	r2, sp, #60	; 0x3c
 8007454:	f000 f9d4 	bl	8007800 <_printf_common>
 8007458:	3001      	adds	r0, #1
 800745a:	f040 8090 	bne.w	800757e <_printf_float+0x1d6>
 800745e:	f04f 30ff 	mov.w	r0, #4294967295
 8007462:	b011      	add	sp, #68	; 0x44
 8007464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007468:	4642      	mov	r2, r8
 800746a:	4653      	mov	r3, sl
 800746c:	4640      	mov	r0, r8
 800746e:	4651      	mov	r1, sl
 8007470:	f7f9 facc 	bl	8000a0c <__aeabi_dcmpun>
 8007474:	b148      	cbz	r0, 800748a <_printf_float+0xe2>
 8007476:	f1ba 0f00 	cmp.w	sl, #0
 800747a:	bfb8      	it	lt
 800747c:	232d      	movlt	r3, #45	; 0x2d
 800747e:	4880      	ldr	r0, [pc, #512]	; (8007680 <_printf_float+0x2d8>)
 8007480:	bfb8      	it	lt
 8007482:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007486:	4b7f      	ldr	r3, [pc, #508]	; (8007684 <_printf_float+0x2dc>)
 8007488:	e7d3      	b.n	8007432 <_printf_float+0x8a>
 800748a:	6863      	ldr	r3, [r4, #4]
 800748c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	d142      	bne.n	800751a <_printf_float+0x172>
 8007494:	2306      	movs	r3, #6
 8007496:	6063      	str	r3, [r4, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	9206      	str	r2, [sp, #24]
 800749c:	aa0e      	add	r2, sp, #56	; 0x38
 800749e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80074a2:	aa0d      	add	r2, sp, #52	; 0x34
 80074a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80074a8:	9203      	str	r2, [sp, #12]
 80074aa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80074ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80074b2:	6023      	str	r3, [r4, #0]
 80074b4:	6863      	ldr	r3, [r4, #4]
 80074b6:	4642      	mov	r2, r8
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	4628      	mov	r0, r5
 80074bc:	4653      	mov	r3, sl
 80074be:	910b      	str	r1, [sp, #44]	; 0x2c
 80074c0:	f7ff fed4 	bl	800726c <__cvt>
 80074c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074c6:	4680      	mov	r8, r0
 80074c8:	2947      	cmp	r1, #71	; 0x47
 80074ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80074cc:	d108      	bne.n	80074e0 <_printf_float+0x138>
 80074ce:	1cc8      	adds	r0, r1, #3
 80074d0:	db02      	blt.n	80074d8 <_printf_float+0x130>
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	4299      	cmp	r1, r3
 80074d6:	dd40      	ble.n	800755a <_printf_float+0x1b2>
 80074d8:	f1a9 0902 	sub.w	r9, r9, #2
 80074dc:	fa5f f989 	uxtb.w	r9, r9
 80074e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80074e4:	d81f      	bhi.n	8007526 <_printf_float+0x17e>
 80074e6:	464a      	mov	r2, r9
 80074e8:	3901      	subs	r1, #1
 80074ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074ee:	910d      	str	r1, [sp, #52]	; 0x34
 80074f0:	f7ff ff1b 	bl	800732a <__exponent>
 80074f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074f6:	4682      	mov	sl, r0
 80074f8:	1813      	adds	r3, r2, r0
 80074fa:	2a01      	cmp	r2, #1
 80074fc:	6123      	str	r3, [r4, #16]
 80074fe:	dc02      	bgt.n	8007506 <_printf_float+0x15e>
 8007500:	6822      	ldr	r2, [r4, #0]
 8007502:	07d2      	lsls	r2, r2, #31
 8007504:	d501      	bpl.n	800750a <_printf_float+0x162>
 8007506:	3301      	adds	r3, #1
 8007508:	6123      	str	r3, [r4, #16]
 800750a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800750e:	2b00      	cmp	r3, #0
 8007510:	d09b      	beq.n	800744a <_printf_float+0xa2>
 8007512:	232d      	movs	r3, #45	; 0x2d
 8007514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007518:	e797      	b.n	800744a <_printf_float+0xa2>
 800751a:	2947      	cmp	r1, #71	; 0x47
 800751c:	d1bc      	bne.n	8007498 <_printf_float+0xf0>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1ba      	bne.n	8007498 <_printf_float+0xf0>
 8007522:	2301      	movs	r3, #1
 8007524:	e7b7      	b.n	8007496 <_printf_float+0xee>
 8007526:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800752a:	d118      	bne.n	800755e <_printf_float+0x1b6>
 800752c:	2900      	cmp	r1, #0
 800752e:	6863      	ldr	r3, [r4, #4]
 8007530:	dd0b      	ble.n	800754a <_printf_float+0x1a2>
 8007532:	6121      	str	r1, [r4, #16]
 8007534:	b913      	cbnz	r3, 800753c <_printf_float+0x194>
 8007536:	6822      	ldr	r2, [r4, #0]
 8007538:	07d0      	lsls	r0, r2, #31
 800753a:	d502      	bpl.n	8007542 <_printf_float+0x19a>
 800753c:	3301      	adds	r3, #1
 800753e:	440b      	add	r3, r1
 8007540:	6123      	str	r3, [r4, #16]
 8007542:	f04f 0a00 	mov.w	sl, #0
 8007546:	65a1      	str	r1, [r4, #88]	; 0x58
 8007548:	e7df      	b.n	800750a <_printf_float+0x162>
 800754a:	b913      	cbnz	r3, 8007552 <_printf_float+0x1aa>
 800754c:	6822      	ldr	r2, [r4, #0]
 800754e:	07d2      	lsls	r2, r2, #31
 8007550:	d501      	bpl.n	8007556 <_printf_float+0x1ae>
 8007552:	3302      	adds	r3, #2
 8007554:	e7f4      	b.n	8007540 <_printf_float+0x198>
 8007556:	2301      	movs	r3, #1
 8007558:	e7f2      	b.n	8007540 <_printf_float+0x198>
 800755a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800755e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007560:	4299      	cmp	r1, r3
 8007562:	db05      	blt.n	8007570 <_printf_float+0x1c8>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	6121      	str	r1, [r4, #16]
 8007568:	07d8      	lsls	r0, r3, #31
 800756a:	d5ea      	bpl.n	8007542 <_printf_float+0x19a>
 800756c:	1c4b      	adds	r3, r1, #1
 800756e:	e7e7      	b.n	8007540 <_printf_float+0x198>
 8007570:	2900      	cmp	r1, #0
 8007572:	bfcc      	ite	gt
 8007574:	2201      	movgt	r2, #1
 8007576:	f1c1 0202 	rsble	r2, r1, #2
 800757a:	4413      	add	r3, r2
 800757c:	e7e0      	b.n	8007540 <_printf_float+0x198>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	055a      	lsls	r2, r3, #21
 8007582:	d407      	bmi.n	8007594 <_printf_float+0x1ec>
 8007584:	6923      	ldr	r3, [r4, #16]
 8007586:	4642      	mov	r2, r8
 8007588:	4631      	mov	r1, r6
 800758a:	4628      	mov	r0, r5
 800758c:	47b8      	blx	r7
 800758e:	3001      	adds	r0, #1
 8007590:	d12b      	bne.n	80075ea <_printf_float+0x242>
 8007592:	e764      	b.n	800745e <_printf_float+0xb6>
 8007594:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007598:	f240 80dd 	bls.w	8007756 <_printf_float+0x3ae>
 800759c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075a0:	2200      	movs	r2, #0
 80075a2:	2300      	movs	r3, #0
 80075a4:	f7f9 fa00 	bl	80009a8 <__aeabi_dcmpeq>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d033      	beq.n	8007614 <_printf_float+0x26c>
 80075ac:	2301      	movs	r3, #1
 80075ae:	4631      	mov	r1, r6
 80075b0:	4628      	mov	r0, r5
 80075b2:	4a35      	ldr	r2, [pc, #212]	; (8007688 <_printf_float+0x2e0>)
 80075b4:	47b8      	blx	r7
 80075b6:	3001      	adds	r0, #1
 80075b8:	f43f af51 	beq.w	800745e <_printf_float+0xb6>
 80075bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80075c0:	429a      	cmp	r2, r3
 80075c2:	db02      	blt.n	80075ca <_printf_float+0x222>
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	07d8      	lsls	r0, r3, #31
 80075c8:	d50f      	bpl.n	80075ea <_printf_float+0x242>
 80075ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	f43f af42 	beq.w	800745e <_printf_float+0xb6>
 80075da:	f04f 0800 	mov.w	r8, #0
 80075de:	f104 091a 	add.w	r9, r4, #26
 80075e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075e4:	3b01      	subs	r3, #1
 80075e6:	4543      	cmp	r3, r8
 80075e8:	dc09      	bgt.n	80075fe <_printf_float+0x256>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	079b      	lsls	r3, r3, #30
 80075ee:	f100 8102 	bmi.w	80077f6 <_printf_float+0x44e>
 80075f2:	68e0      	ldr	r0, [r4, #12]
 80075f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075f6:	4298      	cmp	r0, r3
 80075f8:	bfb8      	it	lt
 80075fa:	4618      	movlt	r0, r3
 80075fc:	e731      	b.n	8007462 <_printf_float+0xba>
 80075fe:	2301      	movs	r3, #1
 8007600:	464a      	mov	r2, r9
 8007602:	4631      	mov	r1, r6
 8007604:	4628      	mov	r0, r5
 8007606:	47b8      	blx	r7
 8007608:	3001      	adds	r0, #1
 800760a:	f43f af28 	beq.w	800745e <_printf_float+0xb6>
 800760e:	f108 0801 	add.w	r8, r8, #1
 8007612:	e7e6      	b.n	80075e2 <_printf_float+0x23a>
 8007614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007616:	2b00      	cmp	r3, #0
 8007618:	dc38      	bgt.n	800768c <_printf_float+0x2e4>
 800761a:	2301      	movs	r3, #1
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	4a19      	ldr	r2, [pc, #100]	; (8007688 <_printf_float+0x2e0>)
 8007622:	47b8      	blx	r7
 8007624:	3001      	adds	r0, #1
 8007626:	f43f af1a 	beq.w	800745e <_printf_float+0xb6>
 800762a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800762e:	4313      	orrs	r3, r2
 8007630:	d102      	bne.n	8007638 <_printf_float+0x290>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	07d9      	lsls	r1, r3, #31
 8007636:	d5d8      	bpl.n	80075ea <_printf_float+0x242>
 8007638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	f43f af0b 	beq.w	800745e <_printf_float+0xb6>
 8007648:	f04f 0900 	mov.w	r9, #0
 800764c:	f104 0a1a 	add.w	sl, r4, #26
 8007650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007652:	425b      	negs	r3, r3
 8007654:	454b      	cmp	r3, r9
 8007656:	dc01      	bgt.n	800765c <_printf_float+0x2b4>
 8007658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800765a:	e794      	b.n	8007586 <_printf_float+0x1de>
 800765c:	2301      	movs	r3, #1
 800765e:	4652      	mov	r2, sl
 8007660:	4631      	mov	r1, r6
 8007662:	4628      	mov	r0, r5
 8007664:	47b8      	blx	r7
 8007666:	3001      	adds	r0, #1
 8007668:	f43f aef9 	beq.w	800745e <_printf_float+0xb6>
 800766c:	f109 0901 	add.w	r9, r9, #1
 8007670:	e7ee      	b.n	8007650 <_printf_float+0x2a8>
 8007672:	bf00      	nop
 8007674:	7fefffff 	.word	0x7fefffff
 8007678:	0800b7ac 	.word	0x0800b7ac
 800767c:	0800b7b0 	.word	0x0800b7b0
 8007680:	0800b7b8 	.word	0x0800b7b8
 8007684:	0800b7b4 	.word	0x0800b7b4
 8007688:	0800b7bc 	.word	0x0800b7bc
 800768c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800768e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007690:	429a      	cmp	r2, r3
 8007692:	bfa8      	it	ge
 8007694:	461a      	movge	r2, r3
 8007696:	2a00      	cmp	r2, #0
 8007698:	4691      	mov	r9, r2
 800769a:	dc37      	bgt.n	800770c <_printf_float+0x364>
 800769c:	f04f 0b00 	mov.w	fp, #0
 80076a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076a4:	f104 021a 	add.w	r2, r4, #26
 80076a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80076ac:	ebaa 0309 	sub.w	r3, sl, r9
 80076b0:	455b      	cmp	r3, fp
 80076b2:	dc33      	bgt.n	800771c <_printf_float+0x374>
 80076b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076b8:	429a      	cmp	r2, r3
 80076ba:	db3b      	blt.n	8007734 <_printf_float+0x38c>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	07da      	lsls	r2, r3, #31
 80076c0:	d438      	bmi.n	8007734 <_printf_float+0x38c>
 80076c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80076c6:	eba3 020a 	sub.w	r2, r3, sl
 80076ca:	eba3 0901 	sub.w	r9, r3, r1
 80076ce:	4591      	cmp	r9, r2
 80076d0:	bfa8      	it	ge
 80076d2:	4691      	movge	r9, r2
 80076d4:	f1b9 0f00 	cmp.w	r9, #0
 80076d8:	dc34      	bgt.n	8007744 <_printf_float+0x39c>
 80076da:	f04f 0800 	mov.w	r8, #0
 80076de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076e2:	f104 0a1a 	add.w	sl, r4, #26
 80076e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	eba3 0309 	sub.w	r3, r3, r9
 80076f0:	4543      	cmp	r3, r8
 80076f2:	f77f af7a 	ble.w	80075ea <_printf_float+0x242>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4652      	mov	r2, sl
 80076fa:	4631      	mov	r1, r6
 80076fc:	4628      	mov	r0, r5
 80076fe:	47b8      	blx	r7
 8007700:	3001      	adds	r0, #1
 8007702:	f43f aeac 	beq.w	800745e <_printf_float+0xb6>
 8007706:	f108 0801 	add.w	r8, r8, #1
 800770a:	e7ec      	b.n	80076e6 <_printf_float+0x33e>
 800770c:	4613      	mov	r3, r2
 800770e:	4631      	mov	r1, r6
 8007710:	4642      	mov	r2, r8
 8007712:	4628      	mov	r0, r5
 8007714:	47b8      	blx	r7
 8007716:	3001      	adds	r0, #1
 8007718:	d1c0      	bne.n	800769c <_printf_float+0x2f4>
 800771a:	e6a0      	b.n	800745e <_printf_float+0xb6>
 800771c:	2301      	movs	r3, #1
 800771e:	4631      	mov	r1, r6
 8007720:	4628      	mov	r0, r5
 8007722:	920b      	str	r2, [sp, #44]	; 0x2c
 8007724:	47b8      	blx	r7
 8007726:	3001      	adds	r0, #1
 8007728:	f43f ae99 	beq.w	800745e <_printf_float+0xb6>
 800772c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800772e:	f10b 0b01 	add.w	fp, fp, #1
 8007732:	e7b9      	b.n	80076a8 <_printf_float+0x300>
 8007734:	4631      	mov	r1, r6
 8007736:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800773a:	4628      	mov	r0, r5
 800773c:	47b8      	blx	r7
 800773e:	3001      	adds	r0, #1
 8007740:	d1bf      	bne.n	80076c2 <_printf_float+0x31a>
 8007742:	e68c      	b.n	800745e <_printf_float+0xb6>
 8007744:	464b      	mov	r3, r9
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	eb08 020a 	add.w	r2, r8, sl
 800774e:	47b8      	blx	r7
 8007750:	3001      	adds	r0, #1
 8007752:	d1c2      	bne.n	80076da <_printf_float+0x332>
 8007754:	e683      	b.n	800745e <_printf_float+0xb6>
 8007756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007758:	2a01      	cmp	r2, #1
 800775a:	dc01      	bgt.n	8007760 <_printf_float+0x3b8>
 800775c:	07db      	lsls	r3, r3, #31
 800775e:	d537      	bpl.n	80077d0 <_printf_float+0x428>
 8007760:	2301      	movs	r3, #1
 8007762:	4642      	mov	r2, r8
 8007764:	4631      	mov	r1, r6
 8007766:	4628      	mov	r0, r5
 8007768:	47b8      	blx	r7
 800776a:	3001      	adds	r0, #1
 800776c:	f43f ae77 	beq.w	800745e <_printf_float+0xb6>
 8007770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007774:	4631      	mov	r1, r6
 8007776:	4628      	mov	r0, r5
 8007778:	47b8      	blx	r7
 800777a:	3001      	adds	r0, #1
 800777c:	f43f ae6f 	beq.w	800745e <_printf_float+0xb6>
 8007780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007784:	2200      	movs	r2, #0
 8007786:	2300      	movs	r3, #0
 8007788:	f7f9 f90e 	bl	80009a8 <__aeabi_dcmpeq>
 800778c:	b9d8      	cbnz	r0, 80077c6 <_printf_float+0x41e>
 800778e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007790:	f108 0201 	add.w	r2, r8, #1
 8007794:	3b01      	subs	r3, #1
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	d10e      	bne.n	80077be <_printf_float+0x416>
 80077a0:	e65d      	b.n	800745e <_printf_float+0xb6>
 80077a2:	2301      	movs	r3, #1
 80077a4:	464a      	mov	r2, r9
 80077a6:	4631      	mov	r1, r6
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	f43f ae56 	beq.w	800745e <_printf_float+0xb6>
 80077b2:	f108 0801 	add.w	r8, r8, #1
 80077b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077b8:	3b01      	subs	r3, #1
 80077ba:	4543      	cmp	r3, r8
 80077bc:	dcf1      	bgt.n	80077a2 <_printf_float+0x3fa>
 80077be:	4653      	mov	r3, sl
 80077c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077c4:	e6e0      	b.n	8007588 <_printf_float+0x1e0>
 80077c6:	f04f 0800 	mov.w	r8, #0
 80077ca:	f104 091a 	add.w	r9, r4, #26
 80077ce:	e7f2      	b.n	80077b6 <_printf_float+0x40e>
 80077d0:	2301      	movs	r3, #1
 80077d2:	4642      	mov	r2, r8
 80077d4:	e7df      	b.n	8007796 <_printf_float+0x3ee>
 80077d6:	2301      	movs	r3, #1
 80077d8:	464a      	mov	r2, r9
 80077da:	4631      	mov	r1, r6
 80077dc:	4628      	mov	r0, r5
 80077de:	47b8      	blx	r7
 80077e0:	3001      	adds	r0, #1
 80077e2:	f43f ae3c 	beq.w	800745e <_printf_float+0xb6>
 80077e6:	f108 0801 	add.w	r8, r8, #1
 80077ea:	68e3      	ldr	r3, [r4, #12]
 80077ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80077ee:	1a5b      	subs	r3, r3, r1
 80077f0:	4543      	cmp	r3, r8
 80077f2:	dcf0      	bgt.n	80077d6 <_printf_float+0x42e>
 80077f4:	e6fd      	b.n	80075f2 <_printf_float+0x24a>
 80077f6:	f04f 0800 	mov.w	r8, #0
 80077fa:	f104 0919 	add.w	r9, r4, #25
 80077fe:	e7f4      	b.n	80077ea <_printf_float+0x442>

08007800 <_printf_common>:
 8007800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	4616      	mov	r6, r2
 8007806:	4699      	mov	r9, r3
 8007808:	688a      	ldr	r2, [r1, #8]
 800780a:	690b      	ldr	r3, [r1, #16]
 800780c:	4607      	mov	r7, r0
 800780e:	4293      	cmp	r3, r2
 8007810:	bfb8      	it	lt
 8007812:	4613      	movlt	r3, r2
 8007814:	6033      	str	r3, [r6, #0]
 8007816:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800781a:	460c      	mov	r4, r1
 800781c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007820:	b10a      	cbz	r2, 8007826 <_printf_common+0x26>
 8007822:	3301      	adds	r3, #1
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	0699      	lsls	r1, r3, #26
 800782a:	bf42      	ittt	mi
 800782c:	6833      	ldrmi	r3, [r6, #0]
 800782e:	3302      	addmi	r3, #2
 8007830:	6033      	strmi	r3, [r6, #0]
 8007832:	6825      	ldr	r5, [r4, #0]
 8007834:	f015 0506 	ands.w	r5, r5, #6
 8007838:	d106      	bne.n	8007848 <_printf_common+0x48>
 800783a:	f104 0a19 	add.w	sl, r4, #25
 800783e:	68e3      	ldr	r3, [r4, #12]
 8007840:	6832      	ldr	r2, [r6, #0]
 8007842:	1a9b      	subs	r3, r3, r2
 8007844:	42ab      	cmp	r3, r5
 8007846:	dc28      	bgt.n	800789a <_printf_common+0x9a>
 8007848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800784c:	1e13      	subs	r3, r2, #0
 800784e:	6822      	ldr	r2, [r4, #0]
 8007850:	bf18      	it	ne
 8007852:	2301      	movne	r3, #1
 8007854:	0692      	lsls	r2, r2, #26
 8007856:	d42d      	bmi.n	80078b4 <_printf_common+0xb4>
 8007858:	4649      	mov	r1, r9
 800785a:	4638      	mov	r0, r7
 800785c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007860:	47c0      	blx	r8
 8007862:	3001      	adds	r0, #1
 8007864:	d020      	beq.n	80078a8 <_printf_common+0xa8>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	68e5      	ldr	r5, [r4, #12]
 800786a:	f003 0306 	and.w	r3, r3, #6
 800786e:	2b04      	cmp	r3, #4
 8007870:	bf18      	it	ne
 8007872:	2500      	movne	r5, #0
 8007874:	6832      	ldr	r2, [r6, #0]
 8007876:	f04f 0600 	mov.w	r6, #0
 800787a:	68a3      	ldr	r3, [r4, #8]
 800787c:	bf08      	it	eq
 800787e:	1aad      	subeq	r5, r5, r2
 8007880:	6922      	ldr	r2, [r4, #16]
 8007882:	bf08      	it	eq
 8007884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007888:	4293      	cmp	r3, r2
 800788a:	bfc4      	itt	gt
 800788c:	1a9b      	subgt	r3, r3, r2
 800788e:	18ed      	addgt	r5, r5, r3
 8007890:	341a      	adds	r4, #26
 8007892:	42b5      	cmp	r5, r6
 8007894:	d11a      	bne.n	80078cc <_printf_common+0xcc>
 8007896:	2000      	movs	r0, #0
 8007898:	e008      	b.n	80078ac <_printf_common+0xac>
 800789a:	2301      	movs	r3, #1
 800789c:	4652      	mov	r2, sl
 800789e:	4649      	mov	r1, r9
 80078a0:	4638      	mov	r0, r7
 80078a2:	47c0      	blx	r8
 80078a4:	3001      	adds	r0, #1
 80078a6:	d103      	bne.n	80078b0 <_printf_common+0xb0>
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b0:	3501      	adds	r5, #1
 80078b2:	e7c4      	b.n	800783e <_printf_common+0x3e>
 80078b4:	2030      	movs	r0, #48	; 0x30
 80078b6:	18e1      	adds	r1, r4, r3
 80078b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078bc:	1c5a      	adds	r2, r3, #1
 80078be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078c2:	4422      	add	r2, r4
 80078c4:	3302      	adds	r3, #2
 80078c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078ca:	e7c5      	b.n	8007858 <_printf_common+0x58>
 80078cc:	2301      	movs	r3, #1
 80078ce:	4622      	mov	r2, r4
 80078d0:	4649      	mov	r1, r9
 80078d2:	4638      	mov	r0, r7
 80078d4:	47c0      	blx	r8
 80078d6:	3001      	adds	r0, #1
 80078d8:	d0e6      	beq.n	80078a8 <_printf_common+0xa8>
 80078da:	3601      	adds	r6, #1
 80078dc:	e7d9      	b.n	8007892 <_printf_common+0x92>
	...

080078e0 <_printf_i>:
 80078e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078e4:	7e0f      	ldrb	r7, [r1, #24]
 80078e6:	4691      	mov	r9, r2
 80078e8:	2f78      	cmp	r7, #120	; 0x78
 80078ea:	4680      	mov	r8, r0
 80078ec:	460c      	mov	r4, r1
 80078ee:	469a      	mov	sl, r3
 80078f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078f6:	d807      	bhi.n	8007908 <_printf_i+0x28>
 80078f8:	2f62      	cmp	r7, #98	; 0x62
 80078fa:	d80a      	bhi.n	8007912 <_printf_i+0x32>
 80078fc:	2f00      	cmp	r7, #0
 80078fe:	f000 80d9 	beq.w	8007ab4 <_printf_i+0x1d4>
 8007902:	2f58      	cmp	r7, #88	; 0x58
 8007904:	f000 80a4 	beq.w	8007a50 <_printf_i+0x170>
 8007908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800790c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007910:	e03a      	b.n	8007988 <_printf_i+0xa8>
 8007912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007916:	2b15      	cmp	r3, #21
 8007918:	d8f6      	bhi.n	8007908 <_printf_i+0x28>
 800791a:	a101      	add	r1, pc, #4	; (adr r1, 8007920 <_printf_i+0x40>)
 800791c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007920:	08007979 	.word	0x08007979
 8007924:	0800798d 	.word	0x0800798d
 8007928:	08007909 	.word	0x08007909
 800792c:	08007909 	.word	0x08007909
 8007930:	08007909 	.word	0x08007909
 8007934:	08007909 	.word	0x08007909
 8007938:	0800798d 	.word	0x0800798d
 800793c:	08007909 	.word	0x08007909
 8007940:	08007909 	.word	0x08007909
 8007944:	08007909 	.word	0x08007909
 8007948:	08007909 	.word	0x08007909
 800794c:	08007a9b 	.word	0x08007a9b
 8007950:	080079bd 	.word	0x080079bd
 8007954:	08007a7d 	.word	0x08007a7d
 8007958:	08007909 	.word	0x08007909
 800795c:	08007909 	.word	0x08007909
 8007960:	08007abd 	.word	0x08007abd
 8007964:	08007909 	.word	0x08007909
 8007968:	080079bd 	.word	0x080079bd
 800796c:	08007909 	.word	0x08007909
 8007970:	08007909 	.word	0x08007909
 8007974:	08007a85 	.word	0x08007a85
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	1d1a      	adds	r2, r3, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	602a      	str	r2, [r5, #0]
 8007980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007988:	2301      	movs	r3, #1
 800798a:	e0a4      	b.n	8007ad6 <_printf_i+0x1f6>
 800798c:	6820      	ldr	r0, [r4, #0]
 800798e:	6829      	ldr	r1, [r5, #0]
 8007990:	0606      	lsls	r6, r0, #24
 8007992:	f101 0304 	add.w	r3, r1, #4
 8007996:	d50a      	bpl.n	80079ae <_printf_i+0xce>
 8007998:	680e      	ldr	r6, [r1, #0]
 800799a:	602b      	str	r3, [r5, #0]
 800799c:	2e00      	cmp	r6, #0
 800799e:	da03      	bge.n	80079a8 <_printf_i+0xc8>
 80079a0:	232d      	movs	r3, #45	; 0x2d
 80079a2:	4276      	negs	r6, r6
 80079a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a8:	230a      	movs	r3, #10
 80079aa:	485e      	ldr	r0, [pc, #376]	; (8007b24 <_printf_i+0x244>)
 80079ac:	e019      	b.n	80079e2 <_printf_i+0x102>
 80079ae:	680e      	ldr	r6, [r1, #0]
 80079b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079b4:	602b      	str	r3, [r5, #0]
 80079b6:	bf18      	it	ne
 80079b8:	b236      	sxthne	r6, r6
 80079ba:	e7ef      	b.n	800799c <_printf_i+0xbc>
 80079bc:	682b      	ldr	r3, [r5, #0]
 80079be:	6820      	ldr	r0, [r4, #0]
 80079c0:	1d19      	adds	r1, r3, #4
 80079c2:	6029      	str	r1, [r5, #0]
 80079c4:	0601      	lsls	r1, r0, #24
 80079c6:	d501      	bpl.n	80079cc <_printf_i+0xec>
 80079c8:	681e      	ldr	r6, [r3, #0]
 80079ca:	e002      	b.n	80079d2 <_printf_i+0xf2>
 80079cc:	0646      	lsls	r6, r0, #25
 80079ce:	d5fb      	bpl.n	80079c8 <_printf_i+0xe8>
 80079d0:	881e      	ldrh	r6, [r3, #0]
 80079d2:	2f6f      	cmp	r7, #111	; 0x6f
 80079d4:	bf0c      	ite	eq
 80079d6:	2308      	moveq	r3, #8
 80079d8:	230a      	movne	r3, #10
 80079da:	4852      	ldr	r0, [pc, #328]	; (8007b24 <_printf_i+0x244>)
 80079dc:	2100      	movs	r1, #0
 80079de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079e2:	6865      	ldr	r5, [r4, #4]
 80079e4:	2d00      	cmp	r5, #0
 80079e6:	bfa8      	it	ge
 80079e8:	6821      	ldrge	r1, [r4, #0]
 80079ea:	60a5      	str	r5, [r4, #8]
 80079ec:	bfa4      	itt	ge
 80079ee:	f021 0104 	bicge.w	r1, r1, #4
 80079f2:	6021      	strge	r1, [r4, #0]
 80079f4:	b90e      	cbnz	r6, 80079fa <_printf_i+0x11a>
 80079f6:	2d00      	cmp	r5, #0
 80079f8:	d04d      	beq.n	8007a96 <_printf_i+0x1b6>
 80079fa:	4615      	mov	r5, r2
 80079fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a00:	fb03 6711 	mls	r7, r3, r1, r6
 8007a04:	5dc7      	ldrb	r7, [r0, r7]
 8007a06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a0a:	4637      	mov	r7, r6
 8007a0c:	42bb      	cmp	r3, r7
 8007a0e:	460e      	mov	r6, r1
 8007a10:	d9f4      	bls.n	80079fc <_printf_i+0x11c>
 8007a12:	2b08      	cmp	r3, #8
 8007a14:	d10b      	bne.n	8007a2e <_printf_i+0x14e>
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	07de      	lsls	r6, r3, #31
 8007a1a:	d508      	bpl.n	8007a2e <_printf_i+0x14e>
 8007a1c:	6923      	ldr	r3, [r4, #16]
 8007a1e:	6861      	ldr	r1, [r4, #4]
 8007a20:	4299      	cmp	r1, r3
 8007a22:	bfde      	ittt	le
 8007a24:	2330      	movle	r3, #48	; 0x30
 8007a26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a2e:	1b52      	subs	r2, r2, r5
 8007a30:	6122      	str	r2, [r4, #16]
 8007a32:	464b      	mov	r3, r9
 8007a34:	4621      	mov	r1, r4
 8007a36:	4640      	mov	r0, r8
 8007a38:	f8cd a000 	str.w	sl, [sp]
 8007a3c:	aa03      	add	r2, sp, #12
 8007a3e:	f7ff fedf 	bl	8007800 <_printf_common>
 8007a42:	3001      	adds	r0, #1
 8007a44:	d14c      	bne.n	8007ae0 <_printf_i+0x200>
 8007a46:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4a:	b004      	add	sp, #16
 8007a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a50:	4834      	ldr	r0, [pc, #208]	; (8007b24 <_printf_i+0x244>)
 8007a52:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a56:	6829      	ldr	r1, [r5, #0]
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a5e:	6029      	str	r1, [r5, #0]
 8007a60:	061d      	lsls	r5, r3, #24
 8007a62:	d514      	bpl.n	8007a8e <_printf_i+0x1ae>
 8007a64:	07df      	lsls	r7, r3, #31
 8007a66:	bf44      	itt	mi
 8007a68:	f043 0320 	orrmi.w	r3, r3, #32
 8007a6c:	6023      	strmi	r3, [r4, #0]
 8007a6e:	b91e      	cbnz	r6, 8007a78 <_printf_i+0x198>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	f023 0320 	bic.w	r3, r3, #32
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	2310      	movs	r3, #16
 8007a7a:	e7af      	b.n	80079dc <_printf_i+0xfc>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	f043 0320 	orr.w	r3, r3, #32
 8007a82:	6023      	str	r3, [r4, #0]
 8007a84:	2378      	movs	r3, #120	; 0x78
 8007a86:	4828      	ldr	r0, [pc, #160]	; (8007b28 <_printf_i+0x248>)
 8007a88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a8c:	e7e3      	b.n	8007a56 <_printf_i+0x176>
 8007a8e:	0659      	lsls	r1, r3, #25
 8007a90:	bf48      	it	mi
 8007a92:	b2b6      	uxthmi	r6, r6
 8007a94:	e7e6      	b.n	8007a64 <_printf_i+0x184>
 8007a96:	4615      	mov	r5, r2
 8007a98:	e7bb      	b.n	8007a12 <_printf_i+0x132>
 8007a9a:	682b      	ldr	r3, [r5, #0]
 8007a9c:	6826      	ldr	r6, [r4, #0]
 8007a9e:	1d18      	adds	r0, r3, #4
 8007aa0:	6961      	ldr	r1, [r4, #20]
 8007aa2:	6028      	str	r0, [r5, #0]
 8007aa4:	0635      	lsls	r5, r6, #24
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	d501      	bpl.n	8007aae <_printf_i+0x1ce>
 8007aaa:	6019      	str	r1, [r3, #0]
 8007aac:	e002      	b.n	8007ab4 <_printf_i+0x1d4>
 8007aae:	0670      	lsls	r0, r6, #25
 8007ab0:	d5fb      	bpl.n	8007aaa <_printf_i+0x1ca>
 8007ab2:	8019      	strh	r1, [r3, #0]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4615      	mov	r5, r2
 8007ab8:	6123      	str	r3, [r4, #16]
 8007aba:	e7ba      	b.n	8007a32 <_printf_i+0x152>
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	2100      	movs	r1, #0
 8007ac0:	1d1a      	adds	r2, r3, #4
 8007ac2:	602a      	str	r2, [r5, #0]
 8007ac4:	681d      	ldr	r5, [r3, #0]
 8007ac6:	6862      	ldr	r2, [r4, #4]
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f002 f883 	bl	8009bd4 <memchr>
 8007ace:	b108      	cbz	r0, 8007ad4 <_printf_i+0x1f4>
 8007ad0:	1b40      	subs	r0, r0, r5
 8007ad2:	6060      	str	r0, [r4, #4]
 8007ad4:	6863      	ldr	r3, [r4, #4]
 8007ad6:	6123      	str	r3, [r4, #16]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ade:	e7a8      	b.n	8007a32 <_printf_i+0x152>
 8007ae0:	462a      	mov	r2, r5
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	6923      	ldr	r3, [r4, #16]
 8007ae8:	47d0      	blx	sl
 8007aea:	3001      	adds	r0, #1
 8007aec:	d0ab      	beq.n	8007a46 <_printf_i+0x166>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	079b      	lsls	r3, r3, #30
 8007af2:	d413      	bmi.n	8007b1c <_printf_i+0x23c>
 8007af4:	68e0      	ldr	r0, [r4, #12]
 8007af6:	9b03      	ldr	r3, [sp, #12]
 8007af8:	4298      	cmp	r0, r3
 8007afa:	bfb8      	it	lt
 8007afc:	4618      	movlt	r0, r3
 8007afe:	e7a4      	b.n	8007a4a <_printf_i+0x16a>
 8007b00:	2301      	movs	r3, #1
 8007b02:	4632      	mov	r2, r6
 8007b04:	4649      	mov	r1, r9
 8007b06:	4640      	mov	r0, r8
 8007b08:	47d0      	blx	sl
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	d09b      	beq.n	8007a46 <_printf_i+0x166>
 8007b0e:	3501      	adds	r5, #1
 8007b10:	68e3      	ldr	r3, [r4, #12]
 8007b12:	9903      	ldr	r1, [sp, #12]
 8007b14:	1a5b      	subs	r3, r3, r1
 8007b16:	42ab      	cmp	r3, r5
 8007b18:	dcf2      	bgt.n	8007b00 <_printf_i+0x220>
 8007b1a:	e7eb      	b.n	8007af4 <_printf_i+0x214>
 8007b1c:	2500      	movs	r5, #0
 8007b1e:	f104 0619 	add.w	r6, r4, #25
 8007b22:	e7f5      	b.n	8007b10 <_printf_i+0x230>
 8007b24:	0800b7be 	.word	0x0800b7be
 8007b28:	0800b7cf 	.word	0x0800b7cf

08007b2c <siprintf>:
 8007b2c:	b40e      	push	{r1, r2, r3}
 8007b2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b32:	b500      	push	{lr}
 8007b34:	b09c      	sub	sp, #112	; 0x70
 8007b36:	ab1d      	add	r3, sp, #116	; 0x74
 8007b38:	9002      	str	r0, [sp, #8]
 8007b3a:	9006      	str	r0, [sp, #24]
 8007b3c:	9107      	str	r1, [sp, #28]
 8007b3e:	9104      	str	r1, [sp, #16]
 8007b40:	4808      	ldr	r0, [pc, #32]	; (8007b64 <siprintf+0x38>)
 8007b42:	4909      	ldr	r1, [pc, #36]	; (8007b68 <siprintf+0x3c>)
 8007b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b48:	9105      	str	r1, [sp, #20]
 8007b4a:	6800      	ldr	r0, [r0, #0]
 8007b4c:	a902      	add	r1, sp, #8
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	f002 fe52 	bl	800a7f8 <_svfiprintf_r>
 8007b54:	2200      	movs	r2, #0
 8007b56:	9b02      	ldr	r3, [sp, #8]
 8007b58:	701a      	strb	r2, [r3, #0]
 8007b5a:	b01c      	add	sp, #112	; 0x70
 8007b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b60:	b003      	add	sp, #12
 8007b62:	4770      	bx	lr
 8007b64:	2000003c 	.word	0x2000003c
 8007b68:	ffff0208 	.word	0xffff0208

08007b6c <strchr>:
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	b2c9      	uxtb	r1, r1
 8007b70:	4618      	mov	r0, r3
 8007b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b76:	b112      	cbz	r2, 8007b7e <strchr+0x12>
 8007b78:	428a      	cmp	r2, r1
 8007b7a:	d1f9      	bne.n	8007b70 <strchr+0x4>
 8007b7c:	4770      	bx	lr
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	bf18      	it	ne
 8007b82:	2000      	movne	r0, #0
 8007b84:	4770      	bx	lr

08007b86 <strncmp>:
 8007b86:	4603      	mov	r3, r0
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	b172      	cbz	r2, 8007baa <strncmp+0x24>
 8007b8c:	3901      	subs	r1, #1
 8007b8e:	1884      	adds	r4, r0, r2
 8007b90:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007b94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007b98:	4290      	cmp	r0, r2
 8007b9a:	d101      	bne.n	8007ba0 <strncmp+0x1a>
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	d101      	bne.n	8007ba4 <strncmp+0x1e>
 8007ba0:	1a80      	subs	r0, r0, r2
 8007ba2:	bd10      	pop	{r4, pc}
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d1f3      	bne.n	8007b90 <strncmp+0xa>
 8007ba8:	e7fa      	b.n	8007ba0 <strncmp+0x1a>
 8007baa:	4610      	mov	r0, r2
 8007bac:	e7f9      	b.n	8007ba2 <strncmp+0x1c>

08007bae <sulp>:
 8007bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb2:	460f      	mov	r7, r1
 8007bb4:	4690      	mov	r8, r2
 8007bb6:	f002 fb8b 	bl	800a2d0 <__ulp>
 8007bba:	4604      	mov	r4, r0
 8007bbc:	460d      	mov	r5, r1
 8007bbe:	f1b8 0f00 	cmp.w	r8, #0
 8007bc2:	d011      	beq.n	8007be8 <sulp+0x3a>
 8007bc4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007bc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dd0b      	ble.n	8007be8 <sulp+0x3a>
 8007bd0:	2400      	movs	r4, #0
 8007bd2:	051b      	lsls	r3, r3, #20
 8007bd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007bd8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007bdc:	4622      	mov	r2, r4
 8007bde:	462b      	mov	r3, r5
 8007be0:	f7f8 fc7a 	bl	80004d8 <__aeabi_dmul>
 8007be4:	4604      	mov	r4, r0
 8007be6:	460d      	mov	r5, r1
 8007be8:	4620      	mov	r0, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007bf0 <_strtod_l>:
 8007bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	469b      	mov	fp, r3
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	b09f      	sub	sp, #124	; 0x7c
 8007bfa:	931a      	str	r3, [sp, #104]	; 0x68
 8007bfc:	4b9e      	ldr	r3, [pc, #632]	; (8007e78 <_strtod_l+0x288>)
 8007bfe:	4682      	mov	sl, r0
 8007c00:	681f      	ldr	r7, [r3, #0]
 8007c02:	460e      	mov	r6, r1
 8007c04:	4638      	mov	r0, r7
 8007c06:	9215      	str	r2, [sp, #84]	; 0x54
 8007c08:	f7f8 faa2 	bl	8000150 <strlen>
 8007c0c:	f04f 0800 	mov.w	r8, #0
 8007c10:	4604      	mov	r4, r0
 8007c12:	f04f 0900 	mov.w	r9, #0
 8007c16:	9619      	str	r6, [sp, #100]	; 0x64
 8007c18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c1a:	781a      	ldrb	r2, [r3, #0]
 8007c1c:	2a2b      	cmp	r2, #43	; 0x2b
 8007c1e:	d04c      	beq.n	8007cba <_strtod_l+0xca>
 8007c20:	d83a      	bhi.n	8007c98 <_strtod_l+0xa8>
 8007c22:	2a0d      	cmp	r2, #13
 8007c24:	d833      	bhi.n	8007c8e <_strtod_l+0x9e>
 8007c26:	2a08      	cmp	r2, #8
 8007c28:	d833      	bhi.n	8007c92 <_strtod_l+0xa2>
 8007c2a:	2a00      	cmp	r2, #0
 8007c2c:	d03d      	beq.n	8007caa <_strtod_l+0xba>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	930a      	str	r3, [sp, #40]	; 0x28
 8007c32:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007c34:	782b      	ldrb	r3, [r5, #0]
 8007c36:	2b30      	cmp	r3, #48	; 0x30
 8007c38:	f040 80aa 	bne.w	8007d90 <_strtod_l+0x1a0>
 8007c3c:	786b      	ldrb	r3, [r5, #1]
 8007c3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c42:	2b58      	cmp	r3, #88	; 0x58
 8007c44:	d166      	bne.n	8007d14 <_strtod_l+0x124>
 8007c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c48:	4650      	mov	r0, sl
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	ab1a      	add	r3, sp, #104	; 0x68
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	4a8a      	ldr	r2, [pc, #552]	; (8007e7c <_strtod_l+0x28c>)
 8007c52:	f8cd b008 	str.w	fp, [sp, #8]
 8007c56:	ab1b      	add	r3, sp, #108	; 0x6c
 8007c58:	a919      	add	r1, sp, #100	; 0x64
 8007c5a:	f001 fc9f 	bl	800959c <__gethex>
 8007c5e:	f010 0607 	ands.w	r6, r0, #7
 8007c62:	4604      	mov	r4, r0
 8007c64:	d005      	beq.n	8007c72 <_strtod_l+0x82>
 8007c66:	2e06      	cmp	r6, #6
 8007c68:	d129      	bne.n	8007cbe <_strtod_l+0xce>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	3501      	adds	r5, #1
 8007c6e:	9519      	str	r5, [sp, #100]	; 0x64
 8007c70:	930a      	str	r3, [sp, #40]	; 0x28
 8007c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f040 858a 	bne.w	800878e <_strtod_l+0xb9e>
 8007c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c7c:	b1d3      	cbz	r3, 8007cb4 <_strtod_l+0xc4>
 8007c7e:	4642      	mov	r2, r8
 8007c80:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007c84:	4610      	mov	r0, r2
 8007c86:	4619      	mov	r1, r3
 8007c88:	b01f      	add	sp, #124	; 0x7c
 8007c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8e:	2a20      	cmp	r2, #32
 8007c90:	d1cd      	bne.n	8007c2e <_strtod_l+0x3e>
 8007c92:	3301      	adds	r3, #1
 8007c94:	9319      	str	r3, [sp, #100]	; 0x64
 8007c96:	e7bf      	b.n	8007c18 <_strtod_l+0x28>
 8007c98:	2a2d      	cmp	r2, #45	; 0x2d
 8007c9a:	d1c8      	bne.n	8007c2e <_strtod_l+0x3e>
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	920a      	str	r2, [sp, #40]	; 0x28
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ca4:	785b      	ldrb	r3, [r3, #1]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1c3      	bne.n	8007c32 <_strtod_l+0x42>
 8007caa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cac:	9619      	str	r6, [sp, #100]	; 0x64
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f040 856b 	bne.w	800878a <_strtod_l+0xb9a>
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	e7e4      	b.n	8007c84 <_strtod_l+0x94>
 8007cba:	2200      	movs	r2, #0
 8007cbc:	e7ef      	b.n	8007c9e <_strtod_l+0xae>
 8007cbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007cc0:	b13a      	cbz	r2, 8007cd2 <_strtod_l+0xe2>
 8007cc2:	2135      	movs	r1, #53	; 0x35
 8007cc4:	a81c      	add	r0, sp, #112	; 0x70
 8007cc6:	f002 fc07 	bl	800a4d8 <__copybits>
 8007cca:	4650      	mov	r0, sl
 8007ccc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007cce:	f001 ffcf 	bl	8009c70 <_Bfree>
 8007cd2:	3e01      	subs	r6, #1
 8007cd4:	2e04      	cmp	r6, #4
 8007cd6:	d806      	bhi.n	8007ce6 <_strtod_l+0xf6>
 8007cd8:	e8df f006 	tbb	[pc, r6]
 8007cdc:	1714030a 	.word	0x1714030a
 8007ce0:	0a          	.byte	0x0a
 8007ce1:	00          	.byte	0x00
 8007ce2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007ce6:	0721      	lsls	r1, r4, #28
 8007ce8:	d5c3      	bpl.n	8007c72 <_strtod_l+0x82>
 8007cea:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007cee:	e7c0      	b.n	8007c72 <_strtod_l+0x82>
 8007cf0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007cf2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007cf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007cfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007cfe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007d02:	e7f0      	b.n	8007ce6 <_strtod_l+0xf6>
 8007d04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007e80 <_strtod_l+0x290>
 8007d08:	e7ed      	b.n	8007ce6 <_strtod_l+0xf6>
 8007d0a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007d0e:	f04f 38ff 	mov.w	r8, #4294967295
 8007d12:	e7e8      	b.n	8007ce6 <_strtod_l+0xf6>
 8007d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	9219      	str	r2, [sp, #100]	; 0x64
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b30      	cmp	r3, #48	; 0x30
 8007d1e:	d0f9      	beq.n	8007d14 <_strtod_l+0x124>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0a6      	beq.n	8007c72 <_strtod_l+0x82>
 8007d24:	2301      	movs	r3, #1
 8007d26:	9307      	str	r3, [sp, #28]
 8007d28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d2a:	220a      	movs	r2, #10
 8007d2c:	9308      	str	r3, [sp, #32]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	469b      	mov	fp, r3
 8007d32:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007d36:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007d38:	7805      	ldrb	r5, [r0, #0]
 8007d3a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007d3e:	b2d9      	uxtb	r1, r3
 8007d40:	2909      	cmp	r1, #9
 8007d42:	d927      	bls.n	8007d94 <_strtod_l+0x1a4>
 8007d44:	4622      	mov	r2, r4
 8007d46:	4639      	mov	r1, r7
 8007d48:	f7ff ff1d 	bl	8007b86 <strncmp>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d033      	beq.n	8007db8 <_strtod_l+0x1c8>
 8007d50:	2000      	movs	r0, #0
 8007d52:	462a      	mov	r2, r5
 8007d54:	465c      	mov	r4, fp
 8007d56:	4603      	mov	r3, r0
 8007d58:	9004      	str	r0, [sp, #16]
 8007d5a:	2a65      	cmp	r2, #101	; 0x65
 8007d5c:	d001      	beq.n	8007d62 <_strtod_l+0x172>
 8007d5e:	2a45      	cmp	r2, #69	; 0x45
 8007d60:	d114      	bne.n	8007d8c <_strtod_l+0x19c>
 8007d62:	b91c      	cbnz	r4, 8007d6c <_strtod_l+0x17c>
 8007d64:	9a07      	ldr	r2, [sp, #28]
 8007d66:	4302      	orrs	r2, r0
 8007d68:	d09f      	beq.n	8007caa <_strtod_l+0xba>
 8007d6a:	2400      	movs	r4, #0
 8007d6c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007d6e:	1c72      	adds	r2, r6, #1
 8007d70:	9219      	str	r2, [sp, #100]	; 0x64
 8007d72:	7872      	ldrb	r2, [r6, #1]
 8007d74:	2a2b      	cmp	r2, #43	; 0x2b
 8007d76:	d079      	beq.n	8007e6c <_strtod_l+0x27c>
 8007d78:	2a2d      	cmp	r2, #45	; 0x2d
 8007d7a:	f000 8083 	beq.w	8007e84 <_strtod_l+0x294>
 8007d7e:	2700      	movs	r7, #0
 8007d80:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007d84:	2909      	cmp	r1, #9
 8007d86:	f240 8083 	bls.w	8007e90 <_strtod_l+0x2a0>
 8007d8a:	9619      	str	r6, [sp, #100]	; 0x64
 8007d8c:	2500      	movs	r5, #0
 8007d8e:	e09f      	b.n	8007ed0 <_strtod_l+0x2e0>
 8007d90:	2300      	movs	r3, #0
 8007d92:	e7c8      	b.n	8007d26 <_strtod_l+0x136>
 8007d94:	f1bb 0f08 	cmp.w	fp, #8
 8007d98:	bfd5      	itete	le
 8007d9a:	9906      	ldrle	r1, [sp, #24]
 8007d9c:	9905      	ldrgt	r1, [sp, #20]
 8007d9e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007da2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007da6:	f100 0001 	add.w	r0, r0, #1
 8007daa:	bfd4      	ite	le
 8007dac:	9306      	strle	r3, [sp, #24]
 8007dae:	9305      	strgt	r3, [sp, #20]
 8007db0:	f10b 0b01 	add.w	fp, fp, #1
 8007db4:	9019      	str	r0, [sp, #100]	; 0x64
 8007db6:	e7be      	b.n	8007d36 <_strtod_l+0x146>
 8007db8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dba:	191a      	adds	r2, r3, r4
 8007dbc:	9219      	str	r2, [sp, #100]	; 0x64
 8007dbe:	5d1a      	ldrb	r2, [r3, r4]
 8007dc0:	f1bb 0f00 	cmp.w	fp, #0
 8007dc4:	d036      	beq.n	8007e34 <_strtod_l+0x244>
 8007dc6:	465c      	mov	r4, fp
 8007dc8:	9004      	str	r0, [sp, #16]
 8007dca:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007dce:	2b09      	cmp	r3, #9
 8007dd0:	d912      	bls.n	8007df8 <_strtod_l+0x208>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e7c1      	b.n	8007d5a <_strtod_l+0x16a>
 8007dd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dd8:	3001      	adds	r0, #1
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	9219      	str	r2, [sp, #100]	; 0x64
 8007dde:	785a      	ldrb	r2, [r3, #1]
 8007de0:	2a30      	cmp	r2, #48	; 0x30
 8007de2:	d0f8      	beq.n	8007dd6 <_strtod_l+0x1e6>
 8007de4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	f200 84d5 	bhi.w	8008798 <_strtod_l+0xba8>
 8007dee:	9004      	str	r0, [sp, #16]
 8007df0:	2000      	movs	r0, #0
 8007df2:	4604      	mov	r4, r0
 8007df4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007df6:	9308      	str	r3, [sp, #32]
 8007df8:	3a30      	subs	r2, #48	; 0x30
 8007dfa:	f100 0301 	add.w	r3, r0, #1
 8007dfe:	d013      	beq.n	8007e28 <_strtod_l+0x238>
 8007e00:	9904      	ldr	r1, [sp, #16]
 8007e02:	1905      	adds	r5, r0, r4
 8007e04:	4419      	add	r1, r3
 8007e06:	9104      	str	r1, [sp, #16]
 8007e08:	4623      	mov	r3, r4
 8007e0a:	210a      	movs	r1, #10
 8007e0c:	42ab      	cmp	r3, r5
 8007e0e:	d113      	bne.n	8007e38 <_strtod_l+0x248>
 8007e10:	1823      	adds	r3, r4, r0
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	f104 0401 	add.w	r4, r4, #1
 8007e18:	4404      	add	r4, r0
 8007e1a:	dc1b      	bgt.n	8007e54 <_strtod_l+0x264>
 8007e1c:	230a      	movs	r3, #10
 8007e1e:	9906      	ldr	r1, [sp, #24]
 8007e20:	fb03 2301 	mla	r3, r3, r1, r2
 8007e24:	9306      	str	r3, [sp, #24]
 8007e26:	2300      	movs	r3, #0
 8007e28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	1c51      	adds	r1, r2, #1
 8007e2e:	9119      	str	r1, [sp, #100]	; 0x64
 8007e30:	7852      	ldrb	r2, [r2, #1]
 8007e32:	e7ca      	b.n	8007dca <_strtod_l+0x1da>
 8007e34:	4658      	mov	r0, fp
 8007e36:	e7d3      	b.n	8007de0 <_strtod_l+0x1f0>
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	dc04      	bgt.n	8007e46 <_strtod_l+0x256>
 8007e3c:	9f06      	ldr	r7, [sp, #24]
 8007e3e:	434f      	muls	r7, r1
 8007e40:	9706      	str	r7, [sp, #24]
 8007e42:	3301      	adds	r3, #1
 8007e44:	e7e2      	b.n	8007e0c <_strtod_l+0x21c>
 8007e46:	1c5f      	adds	r7, r3, #1
 8007e48:	2f10      	cmp	r7, #16
 8007e4a:	bfde      	ittt	le
 8007e4c:	9f05      	ldrle	r7, [sp, #20]
 8007e4e:	434f      	mulle	r7, r1
 8007e50:	9705      	strle	r7, [sp, #20]
 8007e52:	e7f6      	b.n	8007e42 <_strtod_l+0x252>
 8007e54:	2c10      	cmp	r4, #16
 8007e56:	bfdf      	itttt	le
 8007e58:	230a      	movle	r3, #10
 8007e5a:	9905      	ldrle	r1, [sp, #20]
 8007e5c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007e60:	9305      	strle	r3, [sp, #20]
 8007e62:	e7e0      	b.n	8007e26 <_strtod_l+0x236>
 8007e64:	2300      	movs	r3, #0
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e77b      	b.n	8007d64 <_strtod_l+0x174>
 8007e6c:	2700      	movs	r7, #0
 8007e6e:	1cb2      	adds	r2, r6, #2
 8007e70:	9219      	str	r2, [sp, #100]	; 0x64
 8007e72:	78b2      	ldrb	r2, [r6, #2]
 8007e74:	e784      	b.n	8007d80 <_strtod_l+0x190>
 8007e76:	bf00      	nop
 8007e78:	0800b928 	.word	0x0800b928
 8007e7c:	0800b7e0 	.word	0x0800b7e0
 8007e80:	7ff00000 	.word	0x7ff00000
 8007e84:	2701      	movs	r7, #1
 8007e86:	e7f2      	b.n	8007e6e <_strtod_l+0x27e>
 8007e88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e8a:	1c51      	adds	r1, r2, #1
 8007e8c:	9119      	str	r1, [sp, #100]	; 0x64
 8007e8e:	7852      	ldrb	r2, [r2, #1]
 8007e90:	2a30      	cmp	r2, #48	; 0x30
 8007e92:	d0f9      	beq.n	8007e88 <_strtod_l+0x298>
 8007e94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007e98:	2908      	cmp	r1, #8
 8007e9a:	f63f af77 	bhi.w	8007d8c <_strtod_l+0x19c>
 8007e9e:	f04f 0e0a 	mov.w	lr, #10
 8007ea2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007ea6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8007eaa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007eac:	1c51      	adds	r1, r2, #1
 8007eae:	9119      	str	r1, [sp, #100]	; 0x64
 8007eb0:	7852      	ldrb	r2, [r2, #1]
 8007eb2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007eb6:	2d09      	cmp	r5, #9
 8007eb8:	d935      	bls.n	8007f26 <_strtod_l+0x336>
 8007eba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007ebc:	1b49      	subs	r1, r1, r5
 8007ebe:	2908      	cmp	r1, #8
 8007ec0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007ec4:	dc02      	bgt.n	8007ecc <_strtod_l+0x2dc>
 8007ec6:	4565      	cmp	r5, ip
 8007ec8:	bfa8      	it	ge
 8007eca:	4665      	movge	r5, ip
 8007ecc:	b107      	cbz	r7, 8007ed0 <_strtod_l+0x2e0>
 8007ece:	426d      	negs	r5, r5
 8007ed0:	2c00      	cmp	r4, #0
 8007ed2:	d14c      	bne.n	8007f6e <_strtod_l+0x37e>
 8007ed4:	9907      	ldr	r1, [sp, #28]
 8007ed6:	4301      	orrs	r1, r0
 8007ed8:	f47f aecb 	bne.w	8007c72 <_strtod_l+0x82>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f47f aee4 	bne.w	8007caa <_strtod_l+0xba>
 8007ee2:	2a69      	cmp	r2, #105	; 0x69
 8007ee4:	d026      	beq.n	8007f34 <_strtod_l+0x344>
 8007ee6:	dc23      	bgt.n	8007f30 <_strtod_l+0x340>
 8007ee8:	2a49      	cmp	r2, #73	; 0x49
 8007eea:	d023      	beq.n	8007f34 <_strtod_l+0x344>
 8007eec:	2a4e      	cmp	r2, #78	; 0x4e
 8007eee:	f47f aedc 	bne.w	8007caa <_strtod_l+0xba>
 8007ef2:	499d      	ldr	r1, [pc, #628]	; (8008168 <_strtod_l+0x578>)
 8007ef4:	a819      	add	r0, sp, #100	; 0x64
 8007ef6:	f001 fd9f 	bl	8009a38 <__match>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	f43f aed5 	beq.w	8007caa <_strtod_l+0xba>
 8007f00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b28      	cmp	r3, #40	; 0x28
 8007f06:	d12c      	bne.n	8007f62 <_strtod_l+0x372>
 8007f08:	4998      	ldr	r1, [pc, #608]	; (800816c <_strtod_l+0x57c>)
 8007f0a:	aa1c      	add	r2, sp, #112	; 0x70
 8007f0c:	a819      	add	r0, sp, #100	; 0x64
 8007f0e:	f001 fda7 	bl	8009a60 <__hexnan>
 8007f12:	2805      	cmp	r0, #5
 8007f14:	d125      	bne.n	8007f62 <_strtod_l+0x372>
 8007f16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f18:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007f1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007f20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007f24:	e6a5      	b.n	8007c72 <_strtod_l+0x82>
 8007f26:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007f2a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007f2e:	e7bc      	b.n	8007eaa <_strtod_l+0x2ba>
 8007f30:	2a6e      	cmp	r2, #110	; 0x6e
 8007f32:	e7dc      	b.n	8007eee <_strtod_l+0x2fe>
 8007f34:	498e      	ldr	r1, [pc, #568]	; (8008170 <_strtod_l+0x580>)
 8007f36:	a819      	add	r0, sp, #100	; 0x64
 8007f38:	f001 fd7e 	bl	8009a38 <__match>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	f43f aeb4 	beq.w	8007caa <_strtod_l+0xba>
 8007f42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f44:	498b      	ldr	r1, [pc, #556]	; (8008174 <_strtod_l+0x584>)
 8007f46:	3b01      	subs	r3, #1
 8007f48:	a819      	add	r0, sp, #100	; 0x64
 8007f4a:	9319      	str	r3, [sp, #100]	; 0x64
 8007f4c:	f001 fd74 	bl	8009a38 <__match>
 8007f50:	b910      	cbnz	r0, 8007f58 <_strtod_l+0x368>
 8007f52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f54:	3301      	adds	r3, #1
 8007f56:	9319      	str	r3, [sp, #100]	; 0x64
 8007f58:	f04f 0800 	mov.w	r8, #0
 8007f5c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008178 <_strtod_l+0x588>
 8007f60:	e687      	b.n	8007c72 <_strtod_l+0x82>
 8007f62:	4886      	ldr	r0, [pc, #536]	; (800817c <_strtod_l+0x58c>)
 8007f64:	f002 fd48 	bl	800a9f8 <nan>
 8007f68:	4680      	mov	r8, r0
 8007f6a:	4689      	mov	r9, r1
 8007f6c:	e681      	b.n	8007c72 <_strtod_l+0x82>
 8007f6e:	9b04      	ldr	r3, [sp, #16]
 8007f70:	f1bb 0f00 	cmp.w	fp, #0
 8007f74:	bf08      	it	eq
 8007f76:	46a3      	moveq	fp, r4
 8007f78:	1aeb      	subs	r3, r5, r3
 8007f7a:	2c10      	cmp	r4, #16
 8007f7c:	9806      	ldr	r0, [sp, #24]
 8007f7e:	4626      	mov	r6, r4
 8007f80:	9307      	str	r3, [sp, #28]
 8007f82:	bfa8      	it	ge
 8007f84:	2610      	movge	r6, #16
 8007f86:	f7f8 fa2d 	bl	80003e4 <__aeabi_ui2d>
 8007f8a:	2c09      	cmp	r4, #9
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	4689      	mov	r9, r1
 8007f90:	dd13      	ble.n	8007fba <_strtod_l+0x3ca>
 8007f92:	4b7b      	ldr	r3, [pc, #492]	; (8008180 <_strtod_l+0x590>)
 8007f94:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f98:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007f9c:	f7f8 fa9c 	bl	80004d8 <__aeabi_dmul>
 8007fa0:	4680      	mov	r8, r0
 8007fa2:	9805      	ldr	r0, [sp, #20]
 8007fa4:	4689      	mov	r9, r1
 8007fa6:	f7f8 fa1d 	bl	80003e4 <__aeabi_ui2d>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4640      	mov	r0, r8
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	f7f8 f8db 	bl	800016c <__adddf3>
 8007fb6:	4680      	mov	r8, r0
 8007fb8:	4689      	mov	r9, r1
 8007fba:	2c0f      	cmp	r4, #15
 8007fbc:	dc36      	bgt.n	800802c <_strtod_l+0x43c>
 8007fbe:	9b07      	ldr	r3, [sp, #28]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f43f ae56 	beq.w	8007c72 <_strtod_l+0x82>
 8007fc6:	dd22      	ble.n	800800e <_strtod_l+0x41e>
 8007fc8:	2b16      	cmp	r3, #22
 8007fca:	dc09      	bgt.n	8007fe0 <_strtod_l+0x3f0>
 8007fcc:	496c      	ldr	r1, [pc, #432]	; (8008180 <_strtod_l+0x590>)
 8007fce:	4642      	mov	r2, r8
 8007fd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fd4:	464b      	mov	r3, r9
 8007fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fda:	f7f8 fa7d 	bl	80004d8 <__aeabi_dmul>
 8007fde:	e7c3      	b.n	8007f68 <_strtod_l+0x378>
 8007fe0:	9a07      	ldr	r2, [sp, #28]
 8007fe2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	db20      	blt.n	800802c <_strtod_l+0x43c>
 8007fea:	4d65      	ldr	r5, [pc, #404]	; (8008180 <_strtod_l+0x590>)
 8007fec:	f1c4 040f 	rsb	r4, r4, #15
 8007ff0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	f7f8 fa6c 	bl	80004d8 <__aeabi_dmul>
 8008000:	9b07      	ldr	r3, [sp, #28]
 8008002:	1b1c      	subs	r4, r3, r4
 8008004:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008008:	e9d5 2300 	ldrd	r2, r3, [r5]
 800800c:	e7e5      	b.n	8007fda <_strtod_l+0x3ea>
 800800e:	9b07      	ldr	r3, [sp, #28]
 8008010:	3316      	adds	r3, #22
 8008012:	db0b      	blt.n	800802c <_strtod_l+0x43c>
 8008014:	9b04      	ldr	r3, [sp, #16]
 8008016:	4640      	mov	r0, r8
 8008018:	1b5d      	subs	r5, r3, r5
 800801a:	4b59      	ldr	r3, [pc, #356]	; (8008180 <_strtod_l+0x590>)
 800801c:	4649      	mov	r1, r9
 800801e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008022:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008026:	f7f8 fb81 	bl	800072c <__aeabi_ddiv>
 800802a:	e79d      	b.n	8007f68 <_strtod_l+0x378>
 800802c:	9b07      	ldr	r3, [sp, #28]
 800802e:	1ba6      	subs	r6, r4, r6
 8008030:	441e      	add	r6, r3
 8008032:	2e00      	cmp	r6, #0
 8008034:	dd74      	ble.n	8008120 <_strtod_l+0x530>
 8008036:	f016 030f 	ands.w	r3, r6, #15
 800803a:	d00a      	beq.n	8008052 <_strtod_l+0x462>
 800803c:	4950      	ldr	r1, [pc, #320]	; (8008180 <_strtod_l+0x590>)
 800803e:	4642      	mov	r2, r8
 8008040:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008048:	464b      	mov	r3, r9
 800804a:	f7f8 fa45 	bl	80004d8 <__aeabi_dmul>
 800804e:	4680      	mov	r8, r0
 8008050:	4689      	mov	r9, r1
 8008052:	f036 060f 	bics.w	r6, r6, #15
 8008056:	d052      	beq.n	80080fe <_strtod_l+0x50e>
 8008058:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800805c:	dd27      	ble.n	80080ae <_strtod_l+0x4be>
 800805e:	f04f 0b00 	mov.w	fp, #0
 8008062:	f8cd b010 	str.w	fp, [sp, #16]
 8008066:	f8cd b020 	str.w	fp, [sp, #32]
 800806a:	f8cd b018 	str.w	fp, [sp, #24]
 800806e:	2322      	movs	r3, #34	; 0x22
 8008070:	f04f 0800 	mov.w	r8, #0
 8008074:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008178 <_strtod_l+0x588>
 8008078:	f8ca 3000 	str.w	r3, [sl]
 800807c:	9b08      	ldr	r3, [sp, #32]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f43f adf7 	beq.w	8007c72 <_strtod_l+0x82>
 8008084:	4650      	mov	r0, sl
 8008086:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008088:	f001 fdf2 	bl	8009c70 <_Bfree>
 800808c:	4650      	mov	r0, sl
 800808e:	9906      	ldr	r1, [sp, #24]
 8008090:	f001 fdee 	bl	8009c70 <_Bfree>
 8008094:	4650      	mov	r0, sl
 8008096:	9904      	ldr	r1, [sp, #16]
 8008098:	f001 fdea 	bl	8009c70 <_Bfree>
 800809c:	4650      	mov	r0, sl
 800809e:	9908      	ldr	r1, [sp, #32]
 80080a0:	f001 fde6 	bl	8009c70 <_Bfree>
 80080a4:	4659      	mov	r1, fp
 80080a6:	4650      	mov	r0, sl
 80080a8:	f001 fde2 	bl	8009c70 <_Bfree>
 80080ac:	e5e1      	b.n	8007c72 <_strtod_l+0x82>
 80080ae:	4b35      	ldr	r3, [pc, #212]	; (8008184 <_strtod_l+0x594>)
 80080b0:	4640      	mov	r0, r8
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	2300      	movs	r3, #0
 80080b6:	4649      	mov	r1, r9
 80080b8:	461f      	mov	r7, r3
 80080ba:	1136      	asrs	r6, r6, #4
 80080bc:	2e01      	cmp	r6, #1
 80080be:	dc21      	bgt.n	8008104 <_strtod_l+0x514>
 80080c0:	b10b      	cbz	r3, 80080c6 <_strtod_l+0x4d6>
 80080c2:	4680      	mov	r8, r0
 80080c4:	4689      	mov	r9, r1
 80080c6:	4b2f      	ldr	r3, [pc, #188]	; (8008184 <_strtod_l+0x594>)
 80080c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80080cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80080d0:	4642      	mov	r2, r8
 80080d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080d6:	464b      	mov	r3, r9
 80080d8:	f7f8 f9fe 	bl	80004d8 <__aeabi_dmul>
 80080dc:	4b26      	ldr	r3, [pc, #152]	; (8008178 <_strtod_l+0x588>)
 80080de:	460a      	mov	r2, r1
 80080e0:	400b      	ands	r3, r1
 80080e2:	4929      	ldr	r1, [pc, #164]	; (8008188 <_strtod_l+0x598>)
 80080e4:	4680      	mov	r8, r0
 80080e6:	428b      	cmp	r3, r1
 80080e8:	d8b9      	bhi.n	800805e <_strtod_l+0x46e>
 80080ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80080ee:	428b      	cmp	r3, r1
 80080f0:	bf86      	itte	hi
 80080f2:	f04f 38ff 	movhi.w	r8, #4294967295
 80080f6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800818c <_strtod_l+0x59c>
 80080fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80080fe:	2300      	movs	r3, #0
 8008100:	9305      	str	r3, [sp, #20]
 8008102:	e07f      	b.n	8008204 <_strtod_l+0x614>
 8008104:	07f2      	lsls	r2, r6, #31
 8008106:	d505      	bpl.n	8008114 <_strtod_l+0x524>
 8008108:	9b05      	ldr	r3, [sp, #20]
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	f7f8 f9e3 	bl	80004d8 <__aeabi_dmul>
 8008112:	2301      	movs	r3, #1
 8008114:	9a05      	ldr	r2, [sp, #20]
 8008116:	3701      	adds	r7, #1
 8008118:	3208      	adds	r2, #8
 800811a:	1076      	asrs	r6, r6, #1
 800811c:	9205      	str	r2, [sp, #20]
 800811e:	e7cd      	b.n	80080bc <_strtod_l+0x4cc>
 8008120:	d0ed      	beq.n	80080fe <_strtod_l+0x50e>
 8008122:	4276      	negs	r6, r6
 8008124:	f016 020f 	ands.w	r2, r6, #15
 8008128:	d00a      	beq.n	8008140 <_strtod_l+0x550>
 800812a:	4b15      	ldr	r3, [pc, #84]	; (8008180 <_strtod_l+0x590>)
 800812c:	4640      	mov	r0, r8
 800812e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008132:	4649      	mov	r1, r9
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	f7f8 faf8 	bl	800072c <__aeabi_ddiv>
 800813c:	4680      	mov	r8, r0
 800813e:	4689      	mov	r9, r1
 8008140:	1136      	asrs	r6, r6, #4
 8008142:	d0dc      	beq.n	80080fe <_strtod_l+0x50e>
 8008144:	2e1f      	cmp	r6, #31
 8008146:	dd23      	ble.n	8008190 <_strtod_l+0x5a0>
 8008148:	f04f 0b00 	mov.w	fp, #0
 800814c:	f8cd b010 	str.w	fp, [sp, #16]
 8008150:	f8cd b020 	str.w	fp, [sp, #32]
 8008154:	f8cd b018 	str.w	fp, [sp, #24]
 8008158:	2322      	movs	r3, #34	; 0x22
 800815a:	f04f 0800 	mov.w	r8, #0
 800815e:	f04f 0900 	mov.w	r9, #0
 8008162:	f8ca 3000 	str.w	r3, [sl]
 8008166:	e789      	b.n	800807c <_strtod_l+0x48c>
 8008168:	0800b7b9 	.word	0x0800b7b9
 800816c:	0800b7f4 	.word	0x0800b7f4
 8008170:	0800b7b1 	.word	0x0800b7b1
 8008174:	0800b833 	.word	0x0800b833
 8008178:	7ff00000 	.word	0x7ff00000
 800817c:	0800bae0 	.word	0x0800bae0
 8008180:	0800b9c0 	.word	0x0800b9c0
 8008184:	0800b998 	.word	0x0800b998
 8008188:	7ca00000 	.word	0x7ca00000
 800818c:	7fefffff 	.word	0x7fefffff
 8008190:	f016 0310 	ands.w	r3, r6, #16
 8008194:	bf18      	it	ne
 8008196:	236a      	movne	r3, #106	; 0x6a
 8008198:	4640      	mov	r0, r8
 800819a:	9305      	str	r3, [sp, #20]
 800819c:	4649      	mov	r1, r9
 800819e:	2300      	movs	r3, #0
 80081a0:	4fb0      	ldr	r7, [pc, #704]	; (8008464 <_strtod_l+0x874>)
 80081a2:	07f2      	lsls	r2, r6, #31
 80081a4:	d504      	bpl.n	80081b0 <_strtod_l+0x5c0>
 80081a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081aa:	f7f8 f995 	bl	80004d8 <__aeabi_dmul>
 80081ae:	2301      	movs	r3, #1
 80081b0:	1076      	asrs	r6, r6, #1
 80081b2:	f107 0708 	add.w	r7, r7, #8
 80081b6:	d1f4      	bne.n	80081a2 <_strtod_l+0x5b2>
 80081b8:	b10b      	cbz	r3, 80081be <_strtod_l+0x5ce>
 80081ba:	4680      	mov	r8, r0
 80081bc:	4689      	mov	r9, r1
 80081be:	9b05      	ldr	r3, [sp, #20]
 80081c0:	b1c3      	cbz	r3, 80081f4 <_strtod_l+0x604>
 80081c2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80081c6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	4649      	mov	r1, r9
 80081ce:	dd11      	ble.n	80081f4 <_strtod_l+0x604>
 80081d0:	2b1f      	cmp	r3, #31
 80081d2:	f340 8127 	ble.w	8008424 <_strtod_l+0x834>
 80081d6:	2b34      	cmp	r3, #52	; 0x34
 80081d8:	bfd8      	it	le
 80081da:	f04f 33ff 	movle.w	r3, #4294967295
 80081de:	f04f 0800 	mov.w	r8, #0
 80081e2:	bfcf      	iteee	gt
 80081e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80081e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80081ec:	fa03 f202 	lslle.w	r2, r3, r2
 80081f0:	ea02 0901 	andle.w	r9, r2, r1
 80081f4:	2200      	movs	r2, #0
 80081f6:	2300      	movs	r3, #0
 80081f8:	4640      	mov	r0, r8
 80081fa:	4649      	mov	r1, r9
 80081fc:	f7f8 fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8008200:	2800      	cmp	r0, #0
 8008202:	d1a1      	bne.n	8008148 <_strtod_l+0x558>
 8008204:	9b06      	ldr	r3, [sp, #24]
 8008206:	465a      	mov	r2, fp
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	4650      	mov	r0, sl
 800820c:	4623      	mov	r3, r4
 800820e:	9908      	ldr	r1, [sp, #32]
 8008210:	f001 fd96 	bl	8009d40 <__s2b>
 8008214:	9008      	str	r0, [sp, #32]
 8008216:	2800      	cmp	r0, #0
 8008218:	f43f af21 	beq.w	800805e <_strtod_l+0x46e>
 800821c:	9b04      	ldr	r3, [sp, #16]
 800821e:	f04f 0b00 	mov.w	fp, #0
 8008222:	1b5d      	subs	r5, r3, r5
 8008224:	9b07      	ldr	r3, [sp, #28]
 8008226:	f8cd b010 	str.w	fp, [sp, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	bfb4      	ite	lt
 800822e:	462b      	movlt	r3, r5
 8008230:	2300      	movge	r3, #0
 8008232:	930e      	str	r3, [sp, #56]	; 0x38
 8008234:	9b07      	ldr	r3, [sp, #28]
 8008236:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800823a:	9314      	str	r3, [sp, #80]	; 0x50
 800823c:	9b08      	ldr	r3, [sp, #32]
 800823e:	4650      	mov	r0, sl
 8008240:	6859      	ldr	r1, [r3, #4]
 8008242:	f001 fcd5 	bl	8009bf0 <_Balloc>
 8008246:	9006      	str	r0, [sp, #24]
 8008248:	2800      	cmp	r0, #0
 800824a:	f43f af10 	beq.w	800806e <_strtod_l+0x47e>
 800824e:	9b08      	ldr	r3, [sp, #32]
 8008250:	300c      	adds	r0, #12
 8008252:	691a      	ldr	r2, [r3, #16]
 8008254:	f103 010c 	add.w	r1, r3, #12
 8008258:	3202      	adds	r2, #2
 800825a:	0092      	lsls	r2, r2, #2
 800825c:	f7fe fff0 	bl	8007240 <memcpy>
 8008260:	ab1c      	add	r3, sp, #112	; 0x70
 8008262:	9301      	str	r3, [sp, #4]
 8008264:	ab1b      	add	r3, sp, #108	; 0x6c
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	4642      	mov	r2, r8
 800826a:	464b      	mov	r3, r9
 800826c:	4650      	mov	r0, sl
 800826e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008272:	f002 f8a7 	bl	800a3c4 <__d2b>
 8008276:	901a      	str	r0, [sp, #104]	; 0x68
 8008278:	2800      	cmp	r0, #0
 800827a:	f43f aef8 	beq.w	800806e <_strtod_l+0x47e>
 800827e:	2101      	movs	r1, #1
 8008280:	4650      	mov	r0, sl
 8008282:	f001 fdf5 	bl	8009e70 <__i2b>
 8008286:	4603      	mov	r3, r0
 8008288:	9004      	str	r0, [sp, #16]
 800828a:	2800      	cmp	r0, #0
 800828c:	f43f aeef 	beq.w	800806e <_strtod_l+0x47e>
 8008290:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008292:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008294:	2d00      	cmp	r5, #0
 8008296:	bfab      	itete	ge
 8008298:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800829a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800829c:	18ee      	addge	r6, r5, r3
 800829e:	1b5c      	sublt	r4, r3, r5
 80082a0:	9b05      	ldr	r3, [sp, #20]
 80082a2:	bfa8      	it	ge
 80082a4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80082a6:	eba5 0503 	sub.w	r5, r5, r3
 80082aa:	4415      	add	r5, r2
 80082ac:	4b6e      	ldr	r3, [pc, #440]	; (8008468 <_strtod_l+0x878>)
 80082ae:	f105 35ff 	add.w	r5, r5, #4294967295
 80082b2:	bfb8      	it	lt
 80082b4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80082b6:	429d      	cmp	r5, r3
 80082b8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80082bc:	f280 80c4 	bge.w	8008448 <_strtod_l+0x858>
 80082c0:	1b5b      	subs	r3, r3, r5
 80082c2:	2b1f      	cmp	r3, #31
 80082c4:	f04f 0701 	mov.w	r7, #1
 80082c8:	eba2 0203 	sub.w	r2, r2, r3
 80082cc:	f300 80b1 	bgt.w	8008432 <_strtod_l+0x842>
 80082d0:	2500      	movs	r5, #0
 80082d2:	fa07 f303 	lsl.w	r3, r7, r3
 80082d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082d8:	18b7      	adds	r7, r6, r2
 80082da:	9b05      	ldr	r3, [sp, #20]
 80082dc:	42be      	cmp	r6, r7
 80082de:	4414      	add	r4, r2
 80082e0:	441c      	add	r4, r3
 80082e2:	4633      	mov	r3, r6
 80082e4:	bfa8      	it	ge
 80082e6:	463b      	movge	r3, r7
 80082e8:	42a3      	cmp	r3, r4
 80082ea:	bfa8      	it	ge
 80082ec:	4623      	movge	r3, r4
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bfc2      	ittt	gt
 80082f2:	1aff      	subgt	r7, r7, r3
 80082f4:	1ae4      	subgt	r4, r4, r3
 80082f6:	1af6      	subgt	r6, r6, r3
 80082f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dd17      	ble.n	800832e <_strtod_l+0x73e>
 80082fe:	461a      	mov	r2, r3
 8008300:	4650      	mov	r0, sl
 8008302:	9904      	ldr	r1, [sp, #16]
 8008304:	f001 fe72 	bl	8009fec <__pow5mult>
 8008308:	9004      	str	r0, [sp, #16]
 800830a:	2800      	cmp	r0, #0
 800830c:	f43f aeaf 	beq.w	800806e <_strtod_l+0x47e>
 8008310:	4601      	mov	r1, r0
 8008312:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008314:	4650      	mov	r0, sl
 8008316:	f001 fdc1 	bl	8009e9c <__multiply>
 800831a:	9009      	str	r0, [sp, #36]	; 0x24
 800831c:	2800      	cmp	r0, #0
 800831e:	f43f aea6 	beq.w	800806e <_strtod_l+0x47e>
 8008322:	4650      	mov	r0, sl
 8008324:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008326:	f001 fca3 	bl	8009c70 <_Bfree>
 800832a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800832c:	931a      	str	r3, [sp, #104]	; 0x68
 800832e:	2f00      	cmp	r7, #0
 8008330:	f300 808e 	bgt.w	8008450 <_strtod_l+0x860>
 8008334:	9b07      	ldr	r3, [sp, #28]
 8008336:	2b00      	cmp	r3, #0
 8008338:	dd08      	ble.n	800834c <_strtod_l+0x75c>
 800833a:	4650      	mov	r0, sl
 800833c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800833e:	9906      	ldr	r1, [sp, #24]
 8008340:	f001 fe54 	bl	8009fec <__pow5mult>
 8008344:	9006      	str	r0, [sp, #24]
 8008346:	2800      	cmp	r0, #0
 8008348:	f43f ae91 	beq.w	800806e <_strtod_l+0x47e>
 800834c:	2c00      	cmp	r4, #0
 800834e:	dd08      	ble.n	8008362 <_strtod_l+0x772>
 8008350:	4622      	mov	r2, r4
 8008352:	4650      	mov	r0, sl
 8008354:	9906      	ldr	r1, [sp, #24]
 8008356:	f001 fea3 	bl	800a0a0 <__lshift>
 800835a:	9006      	str	r0, [sp, #24]
 800835c:	2800      	cmp	r0, #0
 800835e:	f43f ae86 	beq.w	800806e <_strtod_l+0x47e>
 8008362:	2e00      	cmp	r6, #0
 8008364:	dd08      	ble.n	8008378 <_strtod_l+0x788>
 8008366:	4632      	mov	r2, r6
 8008368:	4650      	mov	r0, sl
 800836a:	9904      	ldr	r1, [sp, #16]
 800836c:	f001 fe98 	bl	800a0a0 <__lshift>
 8008370:	9004      	str	r0, [sp, #16]
 8008372:	2800      	cmp	r0, #0
 8008374:	f43f ae7b 	beq.w	800806e <_strtod_l+0x47e>
 8008378:	4650      	mov	r0, sl
 800837a:	9a06      	ldr	r2, [sp, #24]
 800837c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800837e:	f001 ff1b 	bl	800a1b8 <__mdiff>
 8008382:	4683      	mov	fp, r0
 8008384:	2800      	cmp	r0, #0
 8008386:	f43f ae72 	beq.w	800806e <_strtod_l+0x47e>
 800838a:	2400      	movs	r4, #0
 800838c:	68c3      	ldr	r3, [r0, #12]
 800838e:	9904      	ldr	r1, [sp, #16]
 8008390:	60c4      	str	r4, [r0, #12]
 8008392:	930b      	str	r3, [sp, #44]	; 0x2c
 8008394:	f001 fef4 	bl	800a180 <__mcmp>
 8008398:	42a0      	cmp	r0, r4
 800839a:	da6b      	bge.n	8008474 <_strtod_l+0x884>
 800839c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800839e:	ea53 0308 	orrs.w	r3, r3, r8
 80083a2:	f040 8091 	bne.w	80084c8 <_strtod_l+0x8d8>
 80083a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f040 808c 	bne.w	80084c8 <_strtod_l+0x8d8>
 80083b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083b4:	0d1b      	lsrs	r3, r3, #20
 80083b6:	051b      	lsls	r3, r3, #20
 80083b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80083bc:	f240 8084 	bls.w	80084c8 <_strtod_l+0x8d8>
 80083c0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80083c4:	b91b      	cbnz	r3, 80083ce <_strtod_l+0x7de>
 80083c6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	dd7c      	ble.n	80084c8 <_strtod_l+0x8d8>
 80083ce:	4659      	mov	r1, fp
 80083d0:	2201      	movs	r2, #1
 80083d2:	4650      	mov	r0, sl
 80083d4:	f001 fe64 	bl	800a0a0 <__lshift>
 80083d8:	9904      	ldr	r1, [sp, #16]
 80083da:	4683      	mov	fp, r0
 80083dc:	f001 fed0 	bl	800a180 <__mcmp>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	dd71      	ble.n	80084c8 <_strtod_l+0x8d8>
 80083e4:	9905      	ldr	r1, [sp, #20]
 80083e6:	464b      	mov	r3, r9
 80083e8:	4a20      	ldr	r2, [pc, #128]	; (800846c <_strtod_l+0x87c>)
 80083ea:	2900      	cmp	r1, #0
 80083ec:	f000 808c 	beq.w	8008508 <_strtod_l+0x918>
 80083f0:	ea02 0109 	and.w	r1, r2, r9
 80083f4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80083f8:	f300 8086 	bgt.w	8008508 <_strtod_l+0x918>
 80083fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008400:	f77f aeaa 	ble.w	8008158 <_strtod_l+0x568>
 8008404:	4640      	mov	r0, r8
 8008406:	4649      	mov	r1, r9
 8008408:	4b19      	ldr	r3, [pc, #100]	; (8008470 <_strtod_l+0x880>)
 800840a:	2200      	movs	r2, #0
 800840c:	f7f8 f864 	bl	80004d8 <__aeabi_dmul>
 8008410:	460b      	mov	r3, r1
 8008412:	4303      	orrs	r3, r0
 8008414:	bf08      	it	eq
 8008416:	2322      	moveq	r3, #34	; 0x22
 8008418:	4680      	mov	r8, r0
 800841a:	4689      	mov	r9, r1
 800841c:	bf08      	it	eq
 800841e:	f8ca 3000 	streq.w	r3, [sl]
 8008422:	e62f      	b.n	8008084 <_strtod_l+0x494>
 8008424:	f04f 32ff 	mov.w	r2, #4294967295
 8008428:	fa02 f303 	lsl.w	r3, r2, r3
 800842c:	ea03 0808 	and.w	r8, r3, r8
 8008430:	e6e0      	b.n	80081f4 <_strtod_l+0x604>
 8008432:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008436:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800843a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800843e:	35e2      	adds	r5, #226	; 0xe2
 8008440:	fa07 f505 	lsl.w	r5, r7, r5
 8008444:	970f      	str	r7, [sp, #60]	; 0x3c
 8008446:	e747      	b.n	80082d8 <_strtod_l+0x6e8>
 8008448:	2301      	movs	r3, #1
 800844a:	2500      	movs	r5, #0
 800844c:	930f      	str	r3, [sp, #60]	; 0x3c
 800844e:	e743      	b.n	80082d8 <_strtod_l+0x6e8>
 8008450:	463a      	mov	r2, r7
 8008452:	4650      	mov	r0, sl
 8008454:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008456:	f001 fe23 	bl	800a0a0 <__lshift>
 800845a:	901a      	str	r0, [sp, #104]	; 0x68
 800845c:	2800      	cmp	r0, #0
 800845e:	f47f af69 	bne.w	8008334 <_strtod_l+0x744>
 8008462:	e604      	b.n	800806e <_strtod_l+0x47e>
 8008464:	0800b808 	.word	0x0800b808
 8008468:	fffffc02 	.word	0xfffffc02
 800846c:	7ff00000 	.word	0x7ff00000
 8008470:	39500000 	.word	0x39500000
 8008474:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008478:	d165      	bne.n	8008546 <_strtod_l+0x956>
 800847a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800847c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008480:	b35a      	cbz	r2, 80084da <_strtod_l+0x8ea>
 8008482:	4a99      	ldr	r2, [pc, #612]	; (80086e8 <_strtod_l+0xaf8>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d12b      	bne.n	80084e0 <_strtod_l+0x8f0>
 8008488:	9b05      	ldr	r3, [sp, #20]
 800848a:	4641      	mov	r1, r8
 800848c:	b303      	cbz	r3, 80084d0 <_strtod_l+0x8e0>
 800848e:	464a      	mov	r2, r9
 8008490:	4b96      	ldr	r3, [pc, #600]	; (80086ec <_strtod_l+0xafc>)
 8008492:	4013      	ands	r3, r2
 8008494:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008498:	f04f 32ff 	mov.w	r2, #4294967295
 800849c:	d81b      	bhi.n	80084d6 <_strtod_l+0x8e6>
 800849e:	0d1b      	lsrs	r3, r3, #20
 80084a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80084a4:	fa02 f303 	lsl.w	r3, r2, r3
 80084a8:	4299      	cmp	r1, r3
 80084aa:	d119      	bne.n	80084e0 <_strtod_l+0x8f0>
 80084ac:	4b90      	ldr	r3, [pc, #576]	; (80086f0 <_strtod_l+0xb00>)
 80084ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d102      	bne.n	80084ba <_strtod_l+0x8ca>
 80084b4:	3101      	adds	r1, #1
 80084b6:	f43f adda 	beq.w	800806e <_strtod_l+0x47e>
 80084ba:	f04f 0800 	mov.w	r8, #0
 80084be:	4b8b      	ldr	r3, [pc, #556]	; (80086ec <_strtod_l+0xafc>)
 80084c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c2:	401a      	ands	r2, r3
 80084c4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80084c8:	9b05      	ldr	r3, [sp, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d19a      	bne.n	8008404 <_strtod_l+0x814>
 80084ce:	e5d9      	b.n	8008084 <_strtod_l+0x494>
 80084d0:	f04f 33ff 	mov.w	r3, #4294967295
 80084d4:	e7e8      	b.n	80084a8 <_strtod_l+0x8b8>
 80084d6:	4613      	mov	r3, r2
 80084d8:	e7e6      	b.n	80084a8 <_strtod_l+0x8b8>
 80084da:	ea53 0308 	orrs.w	r3, r3, r8
 80084de:	d081      	beq.n	80083e4 <_strtod_l+0x7f4>
 80084e0:	b1e5      	cbz	r5, 800851c <_strtod_l+0x92c>
 80084e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e4:	421d      	tst	r5, r3
 80084e6:	d0ef      	beq.n	80084c8 <_strtod_l+0x8d8>
 80084e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ea:	4640      	mov	r0, r8
 80084ec:	4649      	mov	r1, r9
 80084ee:	9a05      	ldr	r2, [sp, #20]
 80084f0:	b1c3      	cbz	r3, 8008524 <_strtod_l+0x934>
 80084f2:	f7ff fb5c 	bl	8007bae <sulp>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084fe:	f7f7 fe35 	bl	800016c <__adddf3>
 8008502:	4680      	mov	r8, r0
 8008504:	4689      	mov	r9, r1
 8008506:	e7df      	b.n	80084c8 <_strtod_l+0x8d8>
 8008508:	4013      	ands	r3, r2
 800850a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800850e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008512:	f04f 38ff 	mov.w	r8, #4294967295
 8008516:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800851a:	e7d5      	b.n	80084c8 <_strtod_l+0x8d8>
 800851c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800851e:	ea13 0f08 	tst.w	r3, r8
 8008522:	e7e0      	b.n	80084e6 <_strtod_l+0x8f6>
 8008524:	f7ff fb43 	bl	8007bae <sulp>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008530:	f7f7 fe1a 	bl	8000168 <__aeabi_dsub>
 8008534:	2200      	movs	r2, #0
 8008536:	2300      	movs	r3, #0
 8008538:	4680      	mov	r8, r0
 800853a:	4689      	mov	r9, r1
 800853c:	f7f8 fa34 	bl	80009a8 <__aeabi_dcmpeq>
 8008540:	2800      	cmp	r0, #0
 8008542:	d0c1      	beq.n	80084c8 <_strtod_l+0x8d8>
 8008544:	e608      	b.n	8008158 <_strtod_l+0x568>
 8008546:	4658      	mov	r0, fp
 8008548:	9904      	ldr	r1, [sp, #16]
 800854a:	f001 ff97 	bl	800a47c <__ratio>
 800854e:	2200      	movs	r2, #0
 8008550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008554:	4606      	mov	r6, r0
 8008556:	460f      	mov	r7, r1
 8008558:	f7f8 fa3a 	bl	80009d0 <__aeabi_dcmple>
 800855c:	2800      	cmp	r0, #0
 800855e:	d070      	beq.n	8008642 <_strtod_l+0xa52>
 8008560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008562:	2b00      	cmp	r3, #0
 8008564:	d042      	beq.n	80085ec <_strtod_l+0x9fc>
 8008566:	2600      	movs	r6, #0
 8008568:	4f62      	ldr	r7, [pc, #392]	; (80086f4 <_strtod_l+0xb04>)
 800856a:	4d62      	ldr	r5, [pc, #392]	; (80086f4 <_strtod_l+0xb04>)
 800856c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800856e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008572:	0d1b      	lsrs	r3, r3, #20
 8008574:	051b      	lsls	r3, r3, #20
 8008576:	930f      	str	r3, [sp, #60]	; 0x3c
 8008578:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800857a:	4b5f      	ldr	r3, [pc, #380]	; (80086f8 <_strtod_l+0xb08>)
 800857c:	429a      	cmp	r2, r3
 800857e:	f040 80c3 	bne.w	8008708 <_strtod_l+0xb18>
 8008582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008584:	4640      	mov	r0, r8
 8008586:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800858a:	4649      	mov	r1, r9
 800858c:	f001 fea0 	bl	800a2d0 <__ulp>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4630      	mov	r0, r6
 8008596:	4639      	mov	r1, r7
 8008598:	f7f7 ff9e 	bl	80004d8 <__aeabi_dmul>
 800859c:	4642      	mov	r2, r8
 800859e:	464b      	mov	r3, r9
 80085a0:	f7f7 fde4 	bl	800016c <__adddf3>
 80085a4:	460b      	mov	r3, r1
 80085a6:	4951      	ldr	r1, [pc, #324]	; (80086ec <_strtod_l+0xafc>)
 80085a8:	4a54      	ldr	r2, [pc, #336]	; (80086fc <_strtod_l+0xb0c>)
 80085aa:	4019      	ands	r1, r3
 80085ac:	4291      	cmp	r1, r2
 80085ae:	4680      	mov	r8, r0
 80085b0:	d95d      	bls.n	800866e <_strtod_l+0xa7e>
 80085b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085b4:	4b4e      	ldr	r3, [pc, #312]	; (80086f0 <_strtod_l+0xb00>)
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d103      	bne.n	80085c2 <_strtod_l+0x9d2>
 80085ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085bc:	3301      	adds	r3, #1
 80085be:	f43f ad56 	beq.w	800806e <_strtod_l+0x47e>
 80085c2:	f04f 38ff 	mov.w	r8, #4294967295
 80085c6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80086f0 <_strtod_l+0xb00>
 80085ca:	4650      	mov	r0, sl
 80085cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80085ce:	f001 fb4f 	bl	8009c70 <_Bfree>
 80085d2:	4650      	mov	r0, sl
 80085d4:	9906      	ldr	r1, [sp, #24]
 80085d6:	f001 fb4b 	bl	8009c70 <_Bfree>
 80085da:	4650      	mov	r0, sl
 80085dc:	9904      	ldr	r1, [sp, #16]
 80085de:	f001 fb47 	bl	8009c70 <_Bfree>
 80085e2:	4659      	mov	r1, fp
 80085e4:	4650      	mov	r0, sl
 80085e6:	f001 fb43 	bl	8009c70 <_Bfree>
 80085ea:	e627      	b.n	800823c <_strtod_l+0x64c>
 80085ec:	f1b8 0f00 	cmp.w	r8, #0
 80085f0:	d119      	bne.n	8008626 <_strtod_l+0xa36>
 80085f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085f8:	b9e3      	cbnz	r3, 8008634 <_strtod_l+0xa44>
 80085fa:	2200      	movs	r2, #0
 80085fc:	4630      	mov	r0, r6
 80085fe:	4639      	mov	r1, r7
 8008600:	4b3c      	ldr	r3, [pc, #240]	; (80086f4 <_strtod_l+0xb04>)
 8008602:	f7f8 f9db 	bl	80009bc <__aeabi_dcmplt>
 8008606:	b9c8      	cbnz	r0, 800863c <_strtod_l+0xa4c>
 8008608:	2200      	movs	r2, #0
 800860a:	4630      	mov	r0, r6
 800860c:	4639      	mov	r1, r7
 800860e:	4b3c      	ldr	r3, [pc, #240]	; (8008700 <_strtod_l+0xb10>)
 8008610:	f7f7 ff62 	bl	80004d8 <__aeabi_dmul>
 8008614:	4604      	mov	r4, r0
 8008616:	460d      	mov	r5, r1
 8008618:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800861c:	9416      	str	r4, [sp, #88]	; 0x58
 800861e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008620:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008624:	e7a2      	b.n	800856c <_strtod_l+0x97c>
 8008626:	f1b8 0f01 	cmp.w	r8, #1
 800862a:	d103      	bne.n	8008634 <_strtod_l+0xa44>
 800862c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862e:	2b00      	cmp	r3, #0
 8008630:	f43f ad92 	beq.w	8008158 <_strtod_l+0x568>
 8008634:	2600      	movs	r6, #0
 8008636:	2400      	movs	r4, #0
 8008638:	4f32      	ldr	r7, [pc, #200]	; (8008704 <_strtod_l+0xb14>)
 800863a:	e796      	b.n	800856a <_strtod_l+0x97a>
 800863c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800863e:	4d30      	ldr	r5, [pc, #192]	; (8008700 <_strtod_l+0xb10>)
 8008640:	e7ea      	b.n	8008618 <_strtod_l+0xa28>
 8008642:	4b2f      	ldr	r3, [pc, #188]	; (8008700 <_strtod_l+0xb10>)
 8008644:	2200      	movs	r2, #0
 8008646:	4630      	mov	r0, r6
 8008648:	4639      	mov	r1, r7
 800864a:	f7f7 ff45 	bl	80004d8 <__aeabi_dmul>
 800864e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008650:	4604      	mov	r4, r0
 8008652:	460d      	mov	r5, r1
 8008654:	b933      	cbnz	r3, 8008664 <_strtod_l+0xa74>
 8008656:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800865a:	9010      	str	r0, [sp, #64]	; 0x40
 800865c:	9311      	str	r3, [sp, #68]	; 0x44
 800865e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008662:	e783      	b.n	800856c <_strtod_l+0x97c>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800866c:	e7f7      	b.n	800865e <_strtod_l+0xa6e>
 800866e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1a8      	bne.n	80085ca <_strtod_l+0x9da>
 8008678:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800867c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800867e:	0d1b      	lsrs	r3, r3, #20
 8008680:	051b      	lsls	r3, r3, #20
 8008682:	429a      	cmp	r2, r3
 8008684:	d1a1      	bne.n	80085ca <_strtod_l+0x9da>
 8008686:	4620      	mov	r0, r4
 8008688:	4629      	mov	r1, r5
 800868a:	f7f8 fd09 	bl	80010a0 <__aeabi_d2lz>
 800868e:	f7f7 fef5 	bl	800047c <__aeabi_l2d>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4620      	mov	r0, r4
 8008698:	4629      	mov	r1, r5
 800869a:	f7f7 fd65 	bl	8000168 <__aeabi_dsub>
 800869e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086a4:	ea43 0308 	orr.w	r3, r3, r8
 80086a8:	4313      	orrs	r3, r2
 80086aa:	4604      	mov	r4, r0
 80086ac:	460d      	mov	r5, r1
 80086ae:	d066      	beq.n	800877e <_strtod_l+0xb8e>
 80086b0:	a309      	add	r3, pc, #36	; (adr r3, 80086d8 <_strtod_l+0xae8>)
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f7f8 f981 	bl	80009bc <__aeabi_dcmplt>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	f47f ace2 	bne.w	8008084 <_strtod_l+0x494>
 80086c0:	a307      	add	r3, pc, #28	; (adr r3, 80086e0 <_strtod_l+0xaf0>)
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	4620      	mov	r0, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7f8 f995 	bl	80009f8 <__aeabi_dcmpgt>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	f43f af7b 	beq.w	80085ca <_strtod_l+0x9da>
 80086d4:	e4d6      	b.n	8008084 <_strtod_l+0x494>
 80086d6:	bf00      	nop
 80086d8:	94a03595 	.word	0x94a03595
 80086dc:	3fdfffff 	.word	0x3fdfffff
 80086e0:	35afe535 	.word	0x35afe535
 80086e4:	3fe00000 	.word	0x3fe00000
 80086e8:	000fffff 	.word	0x000fffff
 80086ec:	7ff00000 	.word	0x7ff00000
 80086f0:	7fefffff 	.word	0x7fefffff
 80086f4:	3ff00000 	.word	0x3ff00000
 80086f8:	7fe00000 	.word	0x7fe00000
 80086fc:	7c9fffff 	.word	0x7c9fffff
 8008700:	3fe00000 	.word	0x3fe00000
 8008704:	bff00000 	.word	0xbff00000
 8008708:	9b05      	ldr	r3, [sp, #20]
 800870a:	b313      	cbz	r3, 8008752 <_strtod_l+0xb62>
 800870c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800870e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008712:	d81e      	bhi.n	8008752 <_strtod_l+0xb62>
 8008714:	a326      	add	r3, pc, #152	; (adr r3, 80087b0 <_strtod_l+0xbc0>)
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	4620      	mov	r0, r4
 800871c:	4629      	mov	r1, r5
 800871e:	f7f8 f957 	bl	80009d0 <__aeabi_dcmple>
 8008722:	b190      	cbz	r0, 800874a <_strtod_l+0xb5a>
 8008724:	4629      	mov	r1, r5
 8008726:	4620      	mov	r0, r4
 8008728:	f7f8 f9ae 	bl	8000a88 <__aeabi_d2uiz>
 800872c:	2801      	cmp	r0, #1
 800872e:	bf38      	it	cc
 8008730:	2001      	movcc	r0, #1
 8008732:	f7f7 fe57 	bl	80003e4 <__aeabi_ui2d>
 8008736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008738:	4604      	mov	r4, r0
 800873a:	460d      	mov	r5, r1
 800873c:	b9d3      	cbnz	r3, 8008774 <_strtod_l+0xb84>
 800873e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008742:	9012      	str	r0, [sp, #72]	; 0x48
 8008744:	9313      	str	r3, [sp, #76]	; 0x4c
 8008746:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800874a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800874c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008750:	1a9f      	subs	r7, r3, r2
 8008752:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008756:	f001 fdbb 	bl	800a2d0 <__ulp>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	4630      	mov	r0, r6
 8008760:	4639      	mov	r1, r7
 8008762:	f7f7 feb9 	bl	80004d8 <__aeabi_dmul>
 8008766:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800876a:	f7f7 fcff 	bl	800016c <__adddf3>
 800876e:	4680      	mov	r8, r0
 8008770:	4689      	mov	r9, r1
 8008772:	e77e      	b.n	8008672 <_strtod_l+0xa82>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800877c:	e7e3      	b.n	8008746 <_strtod_l+0xb56>
 800877e:	a30e      	add	r3, pc, #56	; (adr r3, 80087b8 <_strtod_l+0xbc8>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	f7f8 f91a 	bl	80009bc <__aeabi_dcmplt>
 8008788:	e7a1      	b.n	80086ce <_strtod_l+0xade>
 800878a:	2300      	movs	r3, #0
 800878c:	930a      	str	r3, [sp, #40]	; 0x28
 800878e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008790:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008792:	6013      	str	r3, [r2, #0]
 8008794:	f7ff ba71 	b.w	8007c7a <_strtod_l+0x8a>
 8008798:	2a65      	cmp	r2, #101	; 0x65
 800879a:	f43f ab63 	beq.w	8007e64 <_strtod_l+0x274>
 800879e:	2a45      	cmp	r2, #69	; 0x45
 80087a0:	f43f ab60 	beq.w	8007e64 <_strtod_l+0x274>
 80087a4:	2301      	movs	r3, #1
 80087a6:	f7ff bb95 	b.w	8007ed4 <_strtod_l+0x2e4>
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w
 80087b0:	ffc00000 	.word	0xffc00000
 80087b4:	41dfffff 	.word	0x41dfffff
 80087b8:	94a03595 	.word	0x94a03595
 80087bc:	3fcfffff 	.word	0x3fcfffff

080087c0 <strtod>:
 80087c0:	460a      	mov	r2, r1
 80087c2:	4601      	mov	r1, r0
 80087c4:	4802      	ldr	r0, [pc, #8]	; (80087d0 <strtod+0x10>)
 80087c6:	4b03      	ldr	r3, [pc, #12]	; (80087d4 <strtod+0x14>)
 80087c8:	6800      	ldr	r0, [r0, #0]
 80087ca:	f7ff ba11 	b.w	8007bf0 <_strtod_l>
 80087ce:	bf00      	nop
 80087d0:	2000003c 	.word	0x2000003c
 80087d4:	200000a4 	.word	0x200000a4

080087d8 <quorem>:
 80087d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087dc:	6903      	ldr	r3, [r0, #16]
 80087de:	690c      	ldr	r4, [r1, #16]
 80087e0:	4607      	mov	r7, r0
 80087e2:	42a3      	cmp	r3, r4
 80087e4:	f2c0 8082 	blt.w	80088ec <quorem+0x114>
 80087e8:	3c01      	subs	r4, #1
 80087ea:	f100 0514 	add.w	r5, r0, #20
 80087ee:	f101 0814 	add.w	r8, r1, #20
 80087f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087f6:	9301      	str	r3, [sp, #4]
 80087f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008800:	3301      	adds	r3, #1
 8008802:	429a      	cmp	r2, r3
 8008804:	fbb2 f6f3 	udiv	r6, r2, r3
 8008808:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800880c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008810:	d331      	bcc.n	8008876 <quorem+0x9e>
 8008812:	f04f 0e00 	mov.w	lr, #0
 8008816:	4640      	mov	r0, r8
 8008818:	46ac      	mov	ip, r5
 800881a:	46f2      	mov	sl, lr
 800881c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008820:	b293      	uxth	r3, r2
 8008822:	fb06 e303 	mla	r3, r6, r3, lr
 8008826:	0c12      	lsrs	r2, r2, #16
 8008828:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800882c:	b29b      	uxth	r3, r3
 800882e:	fb06 e202 	mla	r2, r6, r2, lr
 8008832:	ebaa 0303 	sub.w	r3, sl, r3
 8008836:	f8dc a000 	ldr.w	sl, [ip]
 800883a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800883e:	fa1f fa8a 	uxth.w	sl, sl
 8008842:	4453      	add	r3, sl
 8008844:	f8dc a000 	ldr.w	sl, [ip]
 8008848:	b292      	uxth	r2, r2
 800884a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800884e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008852:	b29b      	uxth	r3, r3
 8008854:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008858:	4581      	cmp	r9, r0
 800885a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800885e:	f84c 3b04 	str.w	r3, [ip], #4
 8008862:	d2db      	bcs.n	800881c <quorem+0x44>
 8008864:	f855 300b 	ldr.w	r3, [r5, fp]
 8008868:	b92b      	cbnz	r3, 8008876 <quorem+0x9e>
 800886a:	9b01      	ldr	r3, [sp, #4]
 800886c:	3b04      	subs	r3, #4
 800886e:	429d      	cmp	r5, r3
 8008870:	461a      	mov	r2, r3
 8008872:	d32f      	bcc.n	80088d4 <quorem+0xfc>
 8008874:	613c      	str	r4, [r7, #16]
 8008876:	4638      	mov	r0, r7
 8008878:	f001 fc82 	bl	800a180 <__mcmp>
 800887c:	2800      	cmp	r0, #0
 800887e:	db25      	blt.n	80088cc <quorem+0xf4>
 8008880:	4628      	mov	r0, r5
 8008882:	f04f 0c00 	mov.w	ip, #0
 8008886:	3601      	adds	r6, #1
 8008888:	f858 1b04 	ldr.w	r1, [r8], #4
 800888c:	f8d0 e000 	ldr.w	lr, [r0]
 8008890:	b28b      	uxth	r3, r1
 8008892:	ebac 0303 	sub.w	r3, ip, r3
 8008896:	fa1f f28e 	uxth.w	r2, lr
 800889a:	4413      	add	r3, r2
 800889c:	0c0a      	lsrs	r2, r1, #16
 800889e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088ac:	45c1      	cmp	r9, r8
 80088ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80088b2:	f840 3b04 	str.w	r3, [r0], #4
 80088b6:	d2e7      	bcs.n	8008888 <quorem+0xb0>
 80088b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088c0:	b922      	cbnz	r2, 80088cc <quorem+0xf4>
 80088c2:	3b04      	subs	r3, #4
 80088c4:	429d      	cmp	r5, r3
 80088c6:	461a      	mov	r2, r3
 80088c8:	d30a      	bcc.n	80088e0 <quorem+0x108>
 80088ca:	613c      	str	r4, [r7, #16]
 80088cc:	4630      	mov	r0, r6
 80088ce:	b003      	add	sp, #12
 80088d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d4:	6812      	ldr	r2, [r2, #0]
 80088d6:	3b04      	subs	r3, #4
 80088d8:	2a00      	cmp	r2, #0
 80088da:	d1cb      	bne.n	8008874 <quorem+0x9c>
 80088dc:	3c01      	subs	r4, #1
 80088de:	e7c6      	b.n	800886e <quorem+0x96>
 80088e0:	6812      	ldr	r2, [r2, #0]
 80088e2:	3b04      	subs	r3, #4
 80088e4:	2a00      	cmp	r2, #0
 80088e6:	d1f0      	bne.n	80088ca <quorem+0xf2>
 80088e8:	3c01      	subs	r4, #1
 80088ea:	e7eb      	b.n	80088c4 <quorem+0xec>
 80088ec:	2000      	movs	r0, #0
 80088ee:	e7ee      	b.n	80088ce <quorem+0xf6>

080088f0 <_dtoa_r>:
 80088f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	4616      	mov	r6, r2
 80088f6:	461f      	mov	r7, r3
 80088f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80088fa:	b099      	sub	sp, #100	; 0x64
 80088fc:	4605      	mov	r5, r0
 80088fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008902:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008906:	b974      	cbnz	r4, 8008926 <_dtoa_r+0x36>
 8008908:	2010      	movs	r0, #16
 800890a:	f001 f949 	bl	8009ba0 <malloc>
 800890e:	4602      	mov	r2, r0
 8008910:	6268      	str	r0, [r5, #36]	; 0x24
 8008912:	b920      	cbnz	r0, 800891e <_dtoa_r+0x2e>
 8008914:	21ea      	movs	r1, #234	; 0xea
 8008916:	4ba8      	ldr	r3, [pc, #672]	; (8008bb8 <_dtoa_r+0x2c8>)
 8008918:	48a8      	ldr	r0, [pc, #672]	; (8008bbc <_dtoa_r+0x2cc>)
 800891a:	f002 f891 	bl	800aa40 <__assert_func>
 800891e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008922:	6004      	str	r4, [r0, #0]
 8008924:	60c4      	str	r4, [r0, #12]
 8008926:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008928:	6819      	ldr	r1, [r3, #0]
 800892a:	b151      	cbz	r1, 8008942 <_dtoa_r+0x52>
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	2301      	movs	r3, #1
 8008930:	4093      	lsls	r3, r2
 8008932:	604a      	str	r2, [r1, #4]
 8008934:	608b      	str	r3, [r1, #8]
 8008936:	4628      	mov	r0, r5
 8008938:	f001 f99a 	bl	8009c70 <_Bfree>
 800893c:	2200      	movs	r2, #0
 800893e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	1e3b      	subs	r3, r7, #0
 8008944:	bfaf      	iteee	ge
 8008946:	2300      	movge	r3, #0
 8008948:	2201      	movlt	r2, #1
 800894a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800894e:	9305      	strlt	r3, [sp, #20]
 8008950:	bfa8      	it	ge
 8008952:	f8c8 3000 	strge.w	r3, [r8]
 8008956:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800895a:	4b99      	ldr	r3, [pc, #612]	; (8008bc0 <_dtoa_r+0x2d0>)
 800895c:	bfb8      	it	lt
 800895e:	f8c8 2000 	strlt.w	r2, [r8]
 8008962:	ea33 0309 	bics.w	r3, r3, r9
 8008966:	d119      	bne.n	800899c <_dtoa_r+0xac>
 8008968:	f242 730f 	movw	r3, #9999	; 0x270f
 800896c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008974:	4333      	orrs	r3, r6
 8008976:	f000 857f 	beq.w	8009478 <_dtoa_r+0xb88>
 800897a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800897c:	b953      	cbnz	r3, 8008994 <_dtoa_r+0xa4>
 800897e:	4b91      	ldr	r3, [pc, #580]	; (8008bc4 <_dtoa_r+0x2d4>)
 8008980:	e022      	b.n	80089c8 <_dtoa_r+0xd8>
 8008982:	4b91      	ldr	r3, [pc, #580]	; (8008bc8 <_dtoa_r+0x2d8>)
 8008984:	9303      	str	r3, [sp, #12]
 8008986:	3308      	adds	r3, #8
 8008988:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800898a:	6013      	str	r3, [r2, #0]
 800898c:	9803      	ldr	r0, [sp, #12]
 800898e:	b019      	add	sp, #100	; 0x64
 8008990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008994:	4b8b      	ldr	r3, [pc, #556]	; (8008bc4 <_dtoa_r+0x2d4>)
 8008996:	9303      	str	r3, [sp, #12]
 8008998:	3303      	adds	r3, #3
 800899a:	e7f5      	b.n	8008988 <_dtoa_r+0x98>
 800899c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80089a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80089a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089a8:	2200      	movs	r2, #0
 80089aa:	2300      	movs	r3, #0
 80089ac:	f7f7 fffc 	bl	80009a8 <__aeabi_dcmpeq>
 80089b0:	4680      	mov	r8, r0
 80089b2:	b158      	cbz	r0, 80089cc <_dtoa_r+0xdc>
 80089b4:	2301      	movs	r3, #1
 80089b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 8558 	beq.w	8009472 <_dtoa_r+0xb82>
 80089c2:	4882      	ldr	r0, [pc, #520]	; (8008bcc <_dtoa_r+0x2dc>)
 80089c4:	6018      	str	r0, [r3, #0]
 80089c6:	1e43      	subs	r3, r0, #1
 80089c8:	9303      	str	r3, [sp, #12]
 80089ca:	e7df      	b.n	800898c <_dtoa_r+0x9c>
 80089cc:	ab16      	add	r3, sp, #88	; 0x58
 80089ce:	9301      	str	r3, [sp, #4]
 80089d0:	ab17      	add	r3, sp, #92	; 0x5c
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	4628      	mov	r0, r5
 80089d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80089da:	f001 fcf3 	bl	800a3c4 <__d2b>
 80089de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80089e2:	4683      	mov	fp, r0
 80089e4:	2c00      	cmp	r4, #0
 80089e6:	d07f      	beq.n	8008ae8 <_dtoa_r+0x1f8>
 80089e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80089f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80089fa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80089fe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008a02:	2200      	movs	r2, #0
 8008a04:	4b72      	ldr	r3, [pc, #456]	; (8008bd0 <_dtoa_r+0x2e0>)
 8008a06:	f7f7 fbaf 	bl	8000168 <__aeabi_dsub>
 8008a0a:	a365      	add	r3, pc, #404	; (adr r3, 8008ba0 <_dtoa_r+0x2b0>)
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	f7f7 fd62 	bl	80004d8 <__aeabi_dmul>
 8008a14:	a364      	add	r3, pc, #400	; (adr r3, 8008ba8 <_dtoa_r+0x2b8>)
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	f7f7 fba7 	bl	800016c <__adddf3>
 8008a1e:	4606      	mov	r6, r0
 8008a20:	4620      	mov	r0, r4
 8008a22:	460f      	mov	r7, r1
 8008a24:	f7f7 fcee 	bl	8000404 <__aeabi_i2d>
 8008a28:	a361      	add	r3, pc, #388	; (adr r3, 8008bb0 <_dtoa_r+0x2c0>)
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	f7f7 fd53 	bl	80004d8 <__aeabi_dmul>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4630      	mov	r0, r6
 8008a38:	4639      	mov	r1, r7
 8008a3a:	f7f7 fb97 	bl	800016c <__adddf3>
 8008a3e:	4606      	mov	r6, r0
 8008a40:	460f      	mov	r7, r1
 8008a42:	f7f7 fff9 	bl	8000a38 <__aeabi_d2iz>
 8008a46:	2200      	movs	r2, #0
 8008a48:	4682      	mov	sl, r0
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	4639      	mov	r1, r7
 8008a50:	f7f7 ffb4 	bl	80009bc <__aeabi_dcmplt>
 8008a54:	b148      	cbz	r0, 8008a6a <_dtoa_r+0x17a>
 8008a56:	4650      	mov	r0, sl
 8008a58:	f7f7 fcd4 	bl	8000404 <__aeabi_i2d>
 8008a5c:	4632      	mov	r2, r6
 8008a5e:	463b      	mov	r3, r7
 8008a60:	f7f7 ffa2 	bl	80009a8 <__aeabi_dcmpeq>
 8008a64:	b908      	cbnz	r0, 8008a6a <_dtoa_r+0x17a>
 8008a66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a6a:	f1ba 0f16 	cmp.w	sl, #22
 8008a6e:	d858      	bhi.n	8008b22 <_dtoa_r+0x232>
 8008a70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a74:	4b57      	ldr	r3, [pc, #348]	; (8008bd4 <_dtoa_r+0x2e4>)
 8008a76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f7f7 ff9d 	bl	80009bc <__aeabi_dcmplt>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d04f      	beq.n	8008b26 <_dtoa_r+0x236>
 8008a86:	2300      	movs	r3, #0
 8008a88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a90:	1b1c      	subs	r4, r3, r4
 8008a92:	1e63      	subs	r3, r4, #1
 8008a94:	9309      	str	r3, [sp, #36]	; 0x24
 8008a96:	bf49      	itett	mi
 8008a98:	f1c4 0301 	rsbmi	r3, r4, #1
 8008a9c:	2300      	movpl	r3, #0
 8008a9e:	9306      	strmi	r3, [sp, #24]
 8008aa0:	2300      	movmi	r3, #0
 8008aa2:	bf54      	ite	pl
 8008aa4:	9306      	strpl	r3, [sp, #24]
 8008aa6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008aa8:	f1ba 0f00 	cmp.w	sl, #0
 8008aac:	db3d      	blt.n	8008b2a <_dtoa_r+0x23a>
 8008aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008ab4:	4453      	add	r3, sl
 8008ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab8:	2300      	movs	r3, #0
 8008aba:	930a      	str	r3, [sp, #40]	; 0x28
 8008abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008abe:	2b09      	cmp	r3, #9
 8008ac0:	f200 808c 	bhi.w	8008bdc <_dtoa_r+0x2ec>
 8008ac4:	2b05      	cmp	r3, #5
 8008ac6:	bfc4      	itt	gt
 8008ac8:	3b04      	subgt	r3, #4
 8008aca:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008acc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ace:	bfc8      	it	gt
 8008ad0:	2400      	movgt	r4, #0
 8008ad2:	f1a3 0302 	sub.w	r3, r3, #2
 8008ad6:	bfd8      	it	le
 8008ad8:	2401      	movle	r4, #1
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	f200 808a 	bhi.w	8008bf4 <_dtoa_r+0x304>
 8008ae0:	e8df f003 	tbb	[pc, r3]
 8008ae4:	5b4d4f2d 	.word	0x5b4d4f2d
 8008ae8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008aec:	441c      	add	r4, r3
 8008aee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008af2:	2b20      	cmp	r3, #32
 8008af4:	bfc3      	ittte	gt
 8008af6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008afa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008afe:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b02:	f1c3 0320 	rsble	r3, r3, #32
 8008b06:	bfc6      	itte	gt
 8008b08:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b0c:	4318      	orrgt	r0, r3
 8008b0e:	fa06 f003 	lslle.w	r0, r6, r3
 8008b12:	f7f7 fc67 	bl	80003e4 <__aeabi_ui2d>
 8008b16:	2301      	movs	r3, #1
 8008b18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008b1c:	3c01      	subs	r4, #1
 8008b1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b20:	e76f      	b.n	8008a02 <_dtoa_r+0x112>
 8008b22:	2301      	movs	r3, #1
 8008b24:	e7b2      	b.n	8008a8c <_dtoa_r+0x19c>
 8008b26:	900f      	str	r0, [sp, #60]	; 0x3c
 8008b28:	e7b1      	b.n	8008a8e <_dtoa_r+0x19e>
 8008b2a:	9b06      	ldr	r3, [sp, #24]
 8008b2c:	eba3 030a 	sub.w	r3, r3, sl
 8008b30:	9306      	str	r3, [sp, #24]
 8008b32:	f1ca 0300 	rsb	r3, sl, #0
 8008b36:	930a      	str	r3, [sp, #40]	; 0x28
 8008b38:	2300      	movs	r3, #0
 8008b3a:	930e      	str	r3, [sp, #56]	; 0x38
 8008b3c:	e7be      	b.n	8008abc <_dtoa_r+0x1cc>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dc58      	bgt.n	8008bfa <_dtoa_r+0x30a>
 8008b48:	f04f 0901 	mov.w	r9, #1
 8008b4c:	464b      	mov	r3, r9
 8008b4e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008b52:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008b56:	2200      	movs	r2, #0
 8008b58:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008b5a:	6042      	str	r2, [r0, #4]
 8008b5c:	2204      	movs	r2, #4
 8008b5e:	f102 0614 	add.w	r6, r2, #20
 8008b62:	429e      	cmp	r6, r3
 8008b64:	6841      	ldr	r1, [r0, #4]
 8008b66:	d94e      	bls.n	8008c06 <_dtoa_r+0x316>
 8008b68:	4628      	mov	r0, r5
 8008b6a:	f001 f841 	bl	8009bf0 <_Balloc>
 8008b6e:	9003      	str	r0, [sp, #12]
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d14c      	bne.n	8008c0e <_dtoa_r+0x31e>
 8008b74:	4602      	mov	r2, r0
 8008b76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b7a:	4b17      	ldr	r3, [pc, #92]	; (8008bd8 <_dtoa_r+0x2e8>)
 8008b7c:	e6cc      	b.n	8008918 <_dtoa_r+0x28>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e7de      	b.n	8008b40 <_dtoa_r+0x250>
 8008b82:	2300      	movs	r3, #0
 8008b84:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b88:	eb0a 0903 	add.w	r9, sl, r3
 8008b8c:	f109 0301 	add.w	r3, r9, #1
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	9308      	str	r3, [sp, #32]
 8008b94:	bfb8      	it	lt
 8008b96:	2301      	movlt	r3, #1
 8008b98:	e7dd      	b.n	8008b56 <_dtoa_r+0x266>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e7f2      	b.n	8008b84 <_dtoa_r+0x294>
 8008b9e:	bf00      	nop
 8008ba0:	636f4361 	.word	0x636f4361
 8008ba4:	3fd287a7 	.word	0x3fd287a7
 8008ba8:	8b60c8b3 	.word	0x8b60c8b3
 8008bac:	3fc68a28 	.word	0x3fc68a28
 8008bb0:	509f79fb 	.word	0x509f79fb
 8008bb4:	3fd34413 	.word	0x3fd34413
 8008bb8:	0800b83d 	.word	0x0800b83d
 8008bbc:	0800b854 	.word	0x0800b854
 8008bc0:	7ff00000 	.word	0x7ff00000
 8008bc4:	0800b839 	.word	0x0800b839
 8008bc8:	0800b830 	.word	0x0800b830
 8008bcc:	0800b7bd 	.word	0x0800b7bd
 8008bd0:	3ff80000 	.word	0x3ff80000
 8008bd4:	0800b9c0 	.word	0x0800b9c0
 8008bd8:	0800b8af 	.word	0x0800b8af
 8008bdc:	2401      	movs	r4, #1
 8008bde:	2300      	movs	r3, #0
 8008be0:	940b      	str	r4, [sp, #44]	; 0x2c
 8008be2:	9322      	str	r3, [sp, #136]	; 0x88
 8008be4:	f04f 39ff 	mov.w	r9, #4294967295
 8008be8:	2200      	movs	r2, #0
 8008bea:	2312      	movs	r3, #18
 8008bec:	f8cd 9020 	str.w	r9, [sp, #32]
 8008bf0:	9223      	str	r2, [sp, #140]	; 0x8c
 8008bf2:	e7b0      	b.n	8008b56 <_dtoa_r+0x266>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bf8:	e7f4      	b.n	8008be4 <_dtoa_r+0x2f4>
 8008bfa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008bfe:	464b      	mov	r3, r9
 8008c00:	f8cd 9020 	str.w	r9, [sp, #32]
 8008c04:	e7a7      	b.n	8008b56 <_dtoa_r+0x266>
 8008c06:	3101      	adds	r1, #1
 8008c08:	6041      	str	r1, [r0, #4]
 8008c0a:	0052      	lsls	r2, r2, #1
 8008c0c:	e7a7      	b.n	8008b5e <_dtoa_r+0x26e>
 8008c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c10:	9a03      	ldr	r2, [sp, #12]
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	9b08      	ldr	r3, [sp, #32]
 8008c16:	2b0e      	cmp	r3, #14
 8008c18:	f200 80a8 	bhi.w	8008d6c <_dtoa_r+0x47c>
 8008c1c:	2c00      	cmp	r4, #0
 8008c1e:	f000 80a5 	beq.w	8008d6c <_dtoa_r+0x47c>
 8008c22:	f1ba 0f00 	cmp.w	sl, #0
 8008c26:	dd34      	ble.n	8008c92 <_dtoa_r+0x3a2>
 8008c28:	4a9a      	ldr	r2, [pc, #616]	; (8008e94 <_dtoa_r+0x5a4>)
 8008c2a:	f00a 030f 	and.w	r3, sl, #15
 8008c2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c32:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008c36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008c3e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008c42:	d016      	beq.n	8008c72 <_dtoa_r+0x382>
 8008c44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c48:	4b93      	ldr	r3, [pc, #588]	; (8008e98 <_dtoa_r+0x5a8>)
 8008c4a:	2703      	movs	r7, #3
 8008c4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c50:	f7f7 fd6c 	bl	800072c <__aeabi_ddiv>
 8008c54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c58:	f004 040f 	and.w	r4, r4, #15
 8008c5c:	4e8e      	ldr	r6, [pc, #568]	; (8008e98 <_dtoa_r+0x5a8>)
 8008c5e:	b954      	cbnz	r4, 8008c76 <_dtoa_r+0x386>
 8008c60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c68:	f7f7 fd60 	bl	800072c <__aeabi_ddiv>
 8008c6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c70:	e029      	b.n	8008cc6 <_dtoa_r+0x3d6>
 8008c72:	2702      	movs	r7, #2
 8008c74:	e7f2      	b.n	8008c5c <_dtoa_r+0x36c>
 8008c76:	07e1      	lsls	r1, r4, #31
 8008c78:	d508      	bpl.n	8008c8c <_dtoa_r+0x39c>
 8008c7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c82:	f7f7 fc29 	bl	80004d8 <__aeabi_dmul>
 8008c86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c8a:	3701      	adds	r7, #1
 8008c8c:	1064      	asrs	r4, r4, #1
 8008c8e:	3608      	adds	r6, #8
 8008c90:	e7e5      	b.n	8008c5e <_dtoa_r+0x36e>
 8008c92:	f000 80a5 	beq.w	8008de0 <_dtoa_r+0x4f0>
 8008c96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c9a:	f1ca 0400 	rsb	r4, sl, #0
 8008c9e:	4b7d      	ldr	r3, [pc, #500]	; (8008e94 <_dtoa_r+0x5a4>)
 8008ca0:	f004 020f 	and.w	r2, r4, #15
 8008ca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 fc14 	bl	80004d8 <__aeabi_dmul>
 8008cb0:	2702      	movs	r7, #2
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cb8:	4e77      	ldr	r6, [pc, #476]	; (8008e98 <_dtoa_r+0x5a8>)
 8008cba:	1124      	asrs	r4, r4, #4
 8008cbc:	2c00      	cmp	r4, #0
 8008cbe:	f040 8084 	bne.w	8008dca <_dtoa_r+0x4da>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1d2      	bne.n	8008c6c <_dtoa_r+0x37c>
 8008cc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 808b 	beq.w	8008de4 <_dtoa_r+0x4f4>
 8008cce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008cd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008cd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cda:	2200      	movs	r2, #0
 8008cdc:	4b6f      	ldr	r3, [pc, #444]	; (8008e9c <_dtoa_r+0x5ac>)
 8008cde:	f7f7 fe6d 	bl	80009bc <__aeabi_dcmplt>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d07e      	beq.n	8008de4 <_dtoa_r+0x4f4>
 8008ce6:	9b08      	ldr	r3, [sp, #32]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d07b      	beq.n	8008de4 <_dtoa_r+0x4f4>
 8008cec:	f1b9 0f00 	cmp.w	r9, #0
 8008cf0:	dd38      	ble.n	8008d64 <_dtoa_r+0x474>
 8008cf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	4b69      	ldr	r3, [pc, #420]	; (8008ea0 <_dtoa_r+0x5b0>)
 8008cfa:	f7f7 fbed 	bl	80004d8 <__aeabi_dmul>
 8008cfe:	464c      	mov	r4, r9
 8008d00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d04:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008d08:	3701      	adds	r7, #1
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	f7f7 fb7a 	bl	8000404 <__aeabi_i2d>
 8008d10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d14:	f7f7 fbe0 	bl	80004d8 <__aeabi_dmul>
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4b62      	ldr	r3, [pc, #392]	; (8008ea4 <_dtoa_r+0x5b4>)
 8008d1c:	f7f7 fa26 	bl	800016c <__adddf3>
 8008d20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008d24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d28:	9611      	str	r6, [sp, #68]	; 0x44
 8008d2a:	2c00      	cmp	r4, #0
 8008d2c:	d15d      	bne.n	8008dea <_dtoa_r+0x4fa>
 8008d2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d32:	2200      	movs	r2, #0
 8008d34:	4b5c      	ldr	r3, [pc, #368]	; (8008ea8 <_dtoa_r+0x5b8>)
 8008d36:	f7f7 fa17 	bl	8000168 <__aeabi_dsub>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d42:	4633      	mov	r3, r6
 8008d44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d46:	f7f7 fe57 	bl	80009f8 <__aeabi_dcmpgt>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	f040 829c 	bne.w	8009288 <_dtoa_r+0x998>
 8008d50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d56:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008d5a:	f7f7 fe2f 	bl	80009bc <__aeabi_dcmplt>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f040 8290 	bne.w	8009284 <_dtoa_r+0x994>
 8008d64:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008d68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008d6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f2c0 8152 	blt.w	8009018 <_dtoa_r+0x728>
 8008d74:	f1ba 0f0e 	cmp.w	sl, #14
 8008d78:	f300 814e 	bgt.w	8009018 <_dtoa_r+0x728>
 8008d7c:	4b45      	ldr	r3, [pc, #276]	; (8008e94 <_dtoa_r+0x5a4>)
 8008d7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d86:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008d8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f280 80db 	bge.w	8008f48 <_dtoa_r+0x658>
 8008d92:	9b08      	ldr	r3, [sp, #32]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f300 80d7 	bgt.w	8008f48 <_dtoa_r+0x658>
 8008d9a:	f040 8272 	bne.w	8009282 <_dtoa_r+0x992>
 8008d9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008da2:	2200      	movs	r2, #0
 8008da4:	4b40      	ldr	r3, [pc, #256]	; (8008ea8 <_dtoa_r+0x5b8>)
 8008da6:	f7f7 fb97 	bl	80004d8 <__aeabi_dmul>
 8008daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dae:	f7f7 fe19 	bl	80009e4 <__aeabi_dcmpge>
 8008db2:	9c08      	ldr	r4, [sp, #32]
 8008db4:	4626      	mov	r6, r4
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f040 8248 	bne.w	800924c <_dtoa_r+0x95c>
 8008dbc:	2331      	movs	r3, #49	; 0x31
 8008dbe:	9f03      	ldr	r7, [sp, #12]
 8008dc0:	f10a 0a01 	add.w	sl, sl, #1
 8008dc4:	f807 3b01 	strb.w	r3, [r7], #1
 8008dc8:	e244      	b.n	8009254 <_dtoa_r+0x964>
 8008dca:	07e2      	lsls	r2, r4, #31
 8008dcc:	d505      	bpl.n	8008dda <_dtoa_r+0x4ea>
 8008dce:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dd2:	f7f7 fb81 	bl	80004d8 <__aeabi_dmul>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	3701      	adds	r7, #1
 8008dda:	1064      	asrs	r4, r4, #1
 8008ddc:	3608      	adds	r6, #8
 8008dde:	e76d      	b.n	8008cbc <_dtoa_r+0x3cc>
 8008de0:	2702      	movs	r7, #2
 8008de2:	e770      	b.n	8008cc6 <_dtoa_r+0x3d6>
 8008de4:	46d0      	mov	r8, sl
 8008de6:	9c08      	ldr	r4, [sp, #32]
 8008de8:	e78f      	b.n	8008d0a <_dtoa_r+0x41a>
 8008dea:	9903      	ldr	r1, [sp, #12]
 8008dec:	4b29      	ldr	r3, [pc, #164]	; (8008e94 <_dtoa_r+0x5a4>)
 8008dee:	4421      	add	r1, r4
 8008df0:	9112      	str	r1, [sp, #72]	; 0x48
 8008df2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008df4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008df8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008dfc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e00:	2900      	cmp	r1, #0
 8008e02:	d055      	beq.n	8008eb0 <_dtoa_r+0x5c0>
 8008e04:	2000      	movs	r0, #0
 8008e06:	4929      	ldr	r1, [pc, #164]	; (8008eac <_dtoa_r+0x5bc>)
 8008e08:	f7f7 fc90 	bl	800072c <__aeabi_ddiv>
 8008e0c:	463b      	mov	r3, r7
 8008e0e:	4632      	mov	r2, r6
 8008e10:	f7f7 f9aa 	bl	8000168 <__aeabi_dsub>
 8008e14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e18:	9f03      	ldr	r7, [sp, #12]
 8008e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e1e:	f7f7 fe0b 	bl	8000a38 <__aeabi_d2iz>
 8008e22:	4604      	mov	r4, r0
 8008e24:	f7f7 faee 	bl	8000404 <__aeabi_i2d>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e30:	f7f7 f99a 	bl	8000168 <__aeabi_dsub>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	3430      	adds	r4, #48	; 0x30
 8008e3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e42:	f807 4b01 	strb.w	r4, [r7], #1
 8008e46:	f7f7 fdb9 	bl	80009bc <__aeabi_dcmplt>
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d174      	bne.n	8008f38 <_dtoa_r+0x648>
 8008e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e52:	2000      	movs	r0, #0
 8008e54:	4911      	ldr	r1, [pc, #68]	; (8008e9c <_dtoa_r+0x5ac>)
 8008e56:	f7f7 f987 	bl	8000168 <__aeabi_dsub>
 8008e5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e5e:	f7f7 fdad 	bl	80009bc <__aeabi_dcmplt>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	f040 80b7 	bne.w	8008fd6 <_dtoa_r+0x6e6>
 8008e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e6a:	429f      	cmp	r7, r3
 8008e6c:	f43f af7a 	beq.w	8008d64 <_dtoa_r+0x474>
 8008e70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e74:	2200      	movs	r2, #0
 8008e76:	4b0a      	ldr	r3, [pc, #40]	; (8008ea0 <_dtoa_r+0x5b0>)
 8008e78:	f7f7 fb2e 	bl	80004d8 <__aeabi_dmul>
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e86:	4b06      	ldr	r3, [pc, #24]	; (8008ea0 <_dtoa_r+0x5b0>)
 8008e88:	f7f7 fb26 	bl	80004d8 <__aeabi_dmul>
 8008e8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e90:	e7c3      	b.n	8008e1a <_dtoa_r+0x52a>
 8008e92:	bf00      	nop
 8008e94:	0800b9c0 	.word	0x0800b9c0
 8008e98:	0800b998 	.word	0x0800b998
 8008e9c:	3ff00000 	.word	0x3ff00000
 8008ea0:	40240000 	.word	0x40240000
 8008ea4:	401c0000 	.word	0x401c0000
 8008ea8:	40140000 	.word	0x40140000
 8008eac:	3fe00000 	.word	0x3fe00000
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	f7f7 fb10 	bl	80004d8 <__aeabi_dmul>
 8008eb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ebe:	9c03      	ldr	r4, [sp, #12]
 8008ec0:	9314      	str	r3, [sp, #80]	; 0x50
 8008ec2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ec6:	f7f7 fdb7 	bl	8000a38 <__aeabi_d2iz>
 8008eca:	9015      	str	r0, [sp, #84]	; 0x54
 8008ecc:	f7f7 fa9a 	bl	8000404 <__aeabi_i2d>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ed8:	f7f7 f946 	bl	8000168 <__aeabi_dsub>
 8008edc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ede:	4606      	mov	r6, r0
 8008ee0:	3330      	adds	r3, #48	; 0x30
 8008ee2:	f804 3b01 	strb.w	r3, [r4], #1
 8008ee6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ee8:	460f      	mov	r7, r1
 8008eea:	429c      	cmp	r4, r3
 8008eec:	f04f 0200 	mov.w	r2, #0
 8008ef0:	d124      	bne.n	8008f3c <_dtoa_r+0x64c>
 8008ef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ef6:	4bb0      	ldr	r3, [pc, #704]	; (80091b8 <_dtoa_r+0x8c8>)
 8008ef8:	f7f7 f938 	bl	800016c <__adddf3>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	4630      	mov	r0, r6
 8008f02:	4639      	mov	r1, r7
 8008f04:	f7f7 fd78 	bl	80009f8 <__aeabi_dcmpgt>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d163      	bne.n	8008fd4 <_dtoa_r+0x6e4>
 8008f0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f10:	2000      	movs	r0, #0
 8008f12:	49a9      	ldr	r1, [pc, #676]	; (80091b8 <_dtoa_r+0x8c8>)
 8008f14:	f7f7 f928 	bl	8000168 <__aeabi_dsub>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4639      	mov	r1, r7
 8008f20:	f7f7 fd4c 	bl	80009bc <__aeabi_dcmplt>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	f43f af1d 	beq.w	8008d64 <_dtoa_r+0x474>
 8008f2a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008f2c:	1e7b      	subs	r3, r7, #1
 8008f2e:	9314      	str	r3, [sp, #80]	; 0x50
 8008f30:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008f34:	2b30      	cmp	r3, #48	; 0x30
 8008f36:	d0f8      	beq.n	8008f2a <_dtoa_r+0x63a>
 8008f38:	46c2      	mov	sl, r8
 8008f3a:	e03b      	b.n	8008fb4 <_dtoa_r+0x6c4>
 8008f3c:	4b9f      	ldr	r3, [pc, #636]	; (80091bc <_dtoa_r+0x8cc>)
 8008f3e:	f7f7 facb 	bl	80004d8 <__aeabi_dmul>
 8008f42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f46:	e7bc      	b.n	8008ec2 <_dtoa_r+0x5d2>
 8008f48:	9f03      	ldr	r7, [sp, #12]
 8008f4a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008f4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 fbe9 	bl	800072c <__aeabi_ddiv>
 8008f5a:	f7f7 fd6d 	bl	8000a38 <__aeabi_d2iz>
 8008f5e:	4604      	mov	r4, r0
 8008f60:	f7f7 fa50 	bl	8000404 <__aeabi_i2d>
 8008f64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f68:	f7f7 fab6 	bl	80004d8 <__aeabi_dmul>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4640      	mov	r0, r8
 8008f72:	4649      	mov	r1, r9
 8008f74:	f7f7 f8f8 	bl	8000168 <__aeabi_dsub>
 8008f78:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008f7c:	f807 6b01 	strb.w	r6, [r7], #1
 8008f80:	9e03      	ldr	r6, [sp, #12]
 8008f82:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008f86:	1bbe      	subs	r6, r7, r6
 8008f88:	45b4      	cmp	ip, r6
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	d136      	bne.n	8008ffe <_dtoa_r+0x70e>
 8008f90:	f7f7 f8ec 	bl	800016c <__adddf3>
 8008f94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f98:	4680      	mov	r8, r0
 8008f9a:	4689      	mov	r9, r1
 8008f9c:	f7f7 fd2c 	bl	80009f8 <__aeabi_dcmpgt>
 8008fa0:	bb58      	cbnz	r0, 8008ffa <_dtoa_r+0x70a>
 8008fa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	4649      	mov	r1, r9
 8008faa:	f7f7 fcfd 	bl	80009a8 <__aeabi_dcmpeq>
 8008fae:	b108      	cbz	r0, 8008fb4 <_dtoa_r+0x6c4>
 8008fb0:	07e1      	lsls	r1, r4, #31
 8008fb2:	d422      	bmi.n	8008ffa <_dtoa_r+0x70a>
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	4659      	mov	r1, fp
 8008fb8:	f000 fe5a 	bl	8009c70 <_Bfree>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	703b      	strb	r3, [r7, #0]
 8008fc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008fc2:	f10a 0001 	add.w	r0, sl, #1
 8008fc6:	6018      	str	r0, [r3, #0]
 8008fc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f43f acde 	beq.w	800898c <_dtoa_r+0x9c>
 8008fd0:	601f      	str	r7, [r3, #0]
 8008fd2:	e4db      	b.n	800898c <_dtoa_r+0x9c>
 8008fd4:	4627      	mov	r7, r4
 8008fd6:	463b      	mov	r3, r7
 8008fd8:	461f      	mov	r7, r3
 8008fda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fde:	2a39      	cmp	r2, #57	; 0x39
 8008fe0:	d107      	bne.n	8008ff2 <_dtoa_r+0x702>
 8008fe2:	9a03      	ldr	r2, [sp, #12]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d1f7      	bne.n	8008fd8 <_dtoa_r+0x6e8>
 8008fe8:	2230      	movs	r2, #48	; 0x30
 8008fea:	9903      	ldr	r1, [sp, #12]
 8008fec:	f108 0801 	add.w	r8, r8, #1
 8008ff0:	700a      	strb	r2, [r1, #0]
 8008ff2:	781a      	ldrb	r2, [r3, #0]
 8008ff4:	3201      	adds	r2, #1
 8008ff6:	701a      	strb	r2, [r3, #0]
 8008ff8:	e79e      	b.n	8008f38 <_dtoa_r+0x648>
 8008ffa:	46d0      	mov	r8, sl
 8008ffc:	e7eb      	b.n	8008fd6 <_dtoa_r+0x6e6>
 8008ffe:	2200      	movs	r2, #0
 8009000:	4b6e      	ldr	r3, [pc, #440]	; (80091bc <_dtoa_r+0x8cc>)
 8009002:	f7f7 fa69 	bl	80004d8 <__aeabi_dmul>
 8009006:	2200      	movs	r2, #0
 8009008:	2300      	movs	r3, #0
 800900a:	4680      	mov	r8, r0
 800900c:	4689      	mov	r9, r1
 800900e:	f7f7 fccb 	bl	80009a8 <__aeabi_dcmpeq>
 8009012:	2800      	cmp	r0, #0
 8009014:	d09b      	beq.n	8008f4e <_dtoa_r+0x65e>
 8009016:	e7cd      	b.n	8008fb4 <_dtoa_r+0x6c4>
 8009018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800901a:	2a00      	cmp	r2, #0
 800901c:	f000 80d0 	beq.w	80091c0 <_dtoa_r+0x8d0>
 8009020:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009022:	2a01      	cmp	r2, #1
 8009024:	f300 80ae 	bgt.w	8009184 <_dtoa_r+0x894>
 8009028:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800902a:	2a00      	cmp	r2, #0
 800902c:	f000 80a6 	beq.w	800917c <_dtoa_r+0x88c>
 8009030:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009034:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009036:	9f06      	ldr	r7, [sp, #24]
 8009038:	9a06      	ldr	r2, [sp, #24]
 800903a:	2101      	movs	r1, #1
 800903c:	441a      	add	r2, r3
 800903e:	9206      	str	r2, [sp, #24]
 8009040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009042:	4628      	mov	r0, r5
 8009044:	441a      	add	r2, r3
 8009046:	9209      	str	r2, [sp, #36]	; 0x24
 8009048:	f000 ff12 	bl	8009e70 <__i2b>
 800904c:	4606      	mov	r6, r0
 800904e:	2f00      	cmp	r7, #0
 8009050:	dd0c      	ble.n	800906c <_dtoa_r+0x77c>
 8009052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	dd09      	ble.n	800906c <_dtoa_r+0x77c>
 8009058:	42bb      	cmp	r3, r7
 800905a:	bfa8      	it	ge
 800905c:	463b      	movge	r3, r7
 800905e:	9a06      	ldr	r2, [sp, #24]
 8009060:	1aff      	subs	r7, r7, r3
 8009062:	1ad2      	subs	r2, r2, r3
 8009064:	9206      	str	r2, [sp, #24]
 8009066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	9309      	str	r3, [sp, #36]	; 0x24
 800906c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800906e:	b1f3      	cbz	r3, 80090ae <_dtoa_r+0x7be>
 8009070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 80a8 	beq.w	80091c8 <_dtoa_r+0x8d8>
 8009078:	2c00      	cmp	r4, #0
 800907a:	dd10      	ble.n	800909e <_dtoa_r+0x7ae>
 800907c:	4631      	mov	r1, r6
 800907e:	4622      	mov	r2, r4
 8009080:	4628      	mov	r0, r5
 8009082:	f000 ffb3 	bl	8009fec <__pow5mult>
 8009086:	465a      	mov	r2, fp
 8009088:	4601      	mov	r1, r0
 800908a:	4606      	mov	r6, r0
 800908c:	4628      	mov	r0, r5
 800908e:	f000 ff05 	bl	8009e9c <__multiply>
 8009092:	4680      	mov	r8, r0
 8009094:	4659      	mov	r1, fp
 8009096:	4628      	mov	r0, r5
 8009098:	f000 fdea 	bl	8009c70 <_Bfree>
 800909c:	46c3      	mov	fp, r8
 800909e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a0:	1b1a      	subs	r2, r3, r4
 80090a2:	d004      	beq.n	80090ae <_dtoa_r+0x7be>
 80090a4:	4659      	mov	r1, fp
 80090a6:	4628      	mov	r0, r5
 80090a8:	f000 ffa0 	bl	8009fec <__pow5mult>
 80090ac:	4683      	mov	fp, r0
 80090ae:	2101      	movs	r1, #1
 80090b0:	4628      	mov	r0, r5
 80090b2:	f000 fedd 	bl	8009e70 <__i2b>
 80090b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090b8:	4604      	mov	r4, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f340 8086 	ble.w	80091cc <_dtoa_r+0x8dc>
 80090c0:	461a      	mov	r2, r3
 80090c2:	4601      	mov	r1, r0
 80090c4:	4628      	mov	r0, r5
 80090c6:	f000 ff91 	bl	8009fec <__pow5mult>
 80090ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090cc:	4604      	mov	r4, r0
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	dd7f      	ble.n	80091d2 <_dtoa_r+0x8e2>
 80090d2:	f04f 0800 	mov.w	r8, #0
 80090d6:	6923      	ldr	r3, [r4, #16]
 80090d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090dc:	6918      	ldr	r0, [r3, #16]
 80090de:	f000 fe79 	bl	8009dd4 <__hi0bits>
 80090e2:	f1c0 0020 	rsb	r0, r0, #32
 80090e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e8:	4418      	add	r0, r3
 80090ea:	f010 001f 	ands.w	r0, r0, #31
 80090ee:	f000 8092 	beq.w	8009216 <_dtoa_r+0x926>
 80090f2:	f1c0 0320 	rsb	r3, r0, #32
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	f340 808a 	ble.w	8009210 <_dtoa_r+0x920>
 80090fc:	f1c0 001c 	rsb	r0, r0, #28
 8009100:	9b06      	ldr	r3, [sp, #24]
 8009102:	4407      	add	r7, r0
 8009104:	4403      	add	r3, r0
 8009106:	9306      	str	r3, [sp, #24]
 8009108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910a:	4403      	add	r3, r0
 800910c:	9309      	str	r3, [sp, #36]	; 0x24
 800910e:	9b06      	ldr	r3, [sp, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	dd05      	ble.n	8009120 <_dtoa_r+0x830>
 8009114:	4659      	mov	r1, fp
 8009116:	461a      	mov	r2, r3
 8009118:	4628      	mov	r0, r5
 800911a:	f000 ffc1 	bl	800a0a0 <__lshift>
 800911e:	4683      	mov	fp, r0
 8009120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009122:	2b00      	cmp	r3, #0
 8009124:	dd05      	ble.n	8009132 <_dtoa_r+0x842>
 8009126:	4621      	mov	r1, r4
 8009128:	461a      	mov	r2, r3
 800912a:	4628      	mov	r0, r5
 800912c:	f000 ffb8 	bl	800a0a0 <__lshift>
 8009130:	4604      	mov	r4, r0
 8009132:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009134:	2b00      	cmp	r3, #0
 8009136:	d070      	beq.n	800921a <_dtoa_r+0x92a>
 8009138:	4621      	mov	r1, r4
 800913a:	4658      	mov	r0, fp
 800913c:	f001 f820 	bl	800a180 <__mcmp>
 8009140:	2800      	cmp	r0, #0
 8009142:	da6a      	bge.n	800921a <_dtoa_r+0x92a>
 8009144:	2300      	movs	r3, #0
 8009146:	4659      	mov	r1, fp
 8009148:	220a      	movs	r2, #10
 800914a:	4628      	mov	r0, r5
 800914c:	f000 fdb2 	bl	8009cb4 <__multadd>
 8009150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009152:	4683      	mov	fp, r0
 8009154:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 8194 	beq.w	8009486 <_dtoa_r+0xb96>
 800915e:	4631      	mov	r1, r6
 8009160:	2300      	movs	r3, #0
 8009162:	220a      	movs	r2, #10
 8009164:	4628      	mov	r0, r5
 8009166:	f000 fda5 	bl	8009cb4 <__multadd>
 800916a:	f1b9 0f00 	cmp.w	r9, #0
 800916e:	4606      	mov	r6, r0
 8009170:	f300 8093 	bgt.w	800929a <_dtoa_r+0x9aa>
 8009174:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009176:	2b02      	cmp	r3, #2
 8009178:	dc57      	bgt.n	800922a <_dtoa_r+0x93a>
 800917a:	e08e      	b.n	800929a <_dtoa_r+0x9aa>
 800917c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800917e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009182:	e757      	b.n	8009034 <_dtoa_r+0x744>
 8009184:	9b08      	ldr	r3, [sp, #32]
 8009186:	1e5c      	subs	r4, r3, #1
 8009188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800918a:	42a3      	cmp	r3, r4
 800918c:	bfb7      	itett	lt
 800918e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009190:	1b1c      	subge	r4, r3, r4
 8009192:	1ae2      	sublt	r2, r4, r3
 8009194:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009196:	bfbe      	ittt	lt
 8009198:	940a      	strlt	r4, [sp, #40]	; 0x28
 800919a:	189b      	addlt	r3, r3, r2
 800919c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800919e:	9b08      	ldr	r3, [sp, #32]
 80091a0:	bfb8      	it	lt
 80091a2:	2400      	movlt	r4, #0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	bfbb      	ittet	lt
 80091a8:	9b06      	ldrlt	r3, [sp, #24]
 80091aa:	9a08      	ldrlt	r2, [sp, #32]
 80091ac:	9f06      	ldrge	r7, [sp, #24]
 80091ae:	1a9f      	sublt	r7, r3, r2
 80091b0:	bfac      	ite	ge
 80091b2:	9b08      	ldrge	r3, [sp, #32]
 80091b4:	2300      	movlt	r3, #0
 80091b6:	e73f      	b.n	8009038 <_dtoa_r+0x748>
 80091b8:	3fe00000 	.word	0x3fe00000
 80091bc:	40240000 	.word	0x40240000
 80091c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80091c2:	9f06      	ldr	r7, [sp, #24]
 80091c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80091c6:	e742      	b.n	800904e <_dtoa_r+0x75e>
 80091c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ca:	e76b      	b.n	80090a4 <_dtoa_r+0x7b4>
 80091cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	dc19      	bgt.n	8009206 <_dtoa_r+0x916>
 80091d2:	9b04      	ldr	r3, [sp, #16]
 80091d4:	b9bb      	cbnz	r3, 8009206 <_dtoa_r+0x916>
 80091d6:	9b05      	ldr	r3, [sp, #20]
 80091d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091dc:	b99b      	cbnz	r3, 8009206 <_dtoa_r+0x916>
 80091de:	9b05      	ldr	r3, [sp, #20]
 80091e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091e4:	0d1b      	lsrs	r3, r3, #20
 80091e6:	051b      	lsls	r3, r3, #20
 80091e8:	b183      	cbz	r3, 800920c <_dtoa_r+0x91c>
 80091ea:	f04f 0801 	mov.w	r8, #1
 80091ee:	9b06      	ldr	r3, [sp, #24]
 80091f0:	3301      	adds	r3, #1
 80091f2:	9306      	str	r3, [sp, #24]
 80091f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f6:	3301      	adds	r3, #1
 80091f8:	9309      	str	r3, [sp, #36]	; 0x24
 80091fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f47f af6a 	bne.w	80090d6 <_dtoa_r+0x7e6>
 8009202:	2001      	movs	r0, #1
 8009204:	e76f      	b.n	80090e6 <_dtoa_r+0x7f6>
 8009206:	f04f 0800 	mov.w	r8, #0
 800920a:	e7f6      	b.n	80091fa <_dtoa_r+0x90a>
 800920c:	4698      	mov	r8, r3
 800920e:	e7f4      	b.n	80091fa <_dtoa_r+0x90a>
 8009210:	f43f af7d 	beq.w	800910e <_dtoa_r+0x81e>
 8009214:	4618      	mov	r0, r3
 8009216:	301c      	adds	r0, #28
 8009218:	e772      	b.n	8009100 <_dtoa_r+0x810>
 800921a:	9b08      	ldr	r3, [sp, #32]
 800921c:	2b00      	cmp	r3, #0
 800921e:	dc36      	bgt.n	800928e <_dtoa_r+0x99e>
 8009220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009222:	2b02      	cmp	r3, #2
 8009224:	dd33      	ble.n	800928e <_dtoa_r+0x99e>
 8009226:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800922a:	f1b9 0f00 	cmp.w	r9, #0
 800922e:	d10d      	bne.n	800924c <_dtoa_r+0x95c>
 8009230:	4621      	mov	r1, r4
 8009232:	464b      	mov	r3, r9
 8009234:	2205      	movs	r2, #5
 8009236:	4628      	mov	r0, r5
 8009238:	f000 fd3c 	bl	8009cb4 <__multadd>
 800923c:	4601      	mov	r1, r0
 800923e:	4604      	mov	r4, r0
 8009240:	4658      	mov	r0, fp
 8009242:	f000 ff9d 	bl	800a180 <__mcmp>
 8009246:	2800      	cmp	r0, #0
 8009248:	f73f adb8 	bgt.w	8008dbc <_dtoa_r+0x4cc>
 800924c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800924e:	9f03      	ldr	r7, [sp, #12]
 8009250:	ea6f 0a03 	mvn.w	sl, r3
 8009254:	f04f 0800 	mov.w	r8, #0
 8009258:	4621      	mov	r1, r4
 800925a:	4628      	mov	r0, r5
 800925c:	f000 fd08 	bl	8009c70 <_Bfree>
 8009260:	2e00      	cmp	r6, #0
 8009262:	f43f aea7 	beq.w	8008fb4 <_dtoa_r+0x6c4>
 8009266:	f1b8 0f00 	cmp.w	r8, #0
 800926a:	d005      	beq.n	8009278 <_dtoa_r+0x988>
 800926c:	45b0      	cmp	r8, r6
 800926e:	d003      	beq.n	8009278 <_dtoa_r+0x988>
 8009270:	4641      	mov	r1, r8
 8009272:	4628      	mov	r0, r5
 8009274:	f000 fcfc 	bl	8009c70 <_Bfree>
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	f000 fcf8 	bl	8009c70 <_Bfree>
 8009280:	e698      	b.n	8008fb4 <_dtoa_r+0x6c4>
 8009282:	2400      	movs	r4, #0
 8009284:	4626      	mov	r6, r4
 8009286:	e7e1      	b.n	800924c <_dtoa_r+0x95c>
 8009288:	46c2      	mov	sl, r8
 800928a:	4626      	mov	r6, r4
 800928c:	e596      	b.n	8008dbc <_dtoa_r+0x4cc>
 800928e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 80fd 	beq.w	8009494 <_dtoa_r+0xba4>
 800929a:	2f00      	cmp	r7, #0
 800929c:	dd05      	ble.n	80092aa <_dtoa_r+0x9ba>
 800929e:	4631      	mov	r1, r6
 80092a0:	463a      	mov	r2, r7
 80092a2:	4628      	mov	r0, r5
 80092a4:	f000 fefc 	bl	800a0a0 <__lshift>
 80092a8:	4606      	mov	r6, r0
 80092aa:	f1b8 0f00 	cmp.w	r8, #0
 80092ae:	d05c      	beq.n	800936a <_dtoa_r+0xa7a>
 80092b0:	4628      	mov	r0, r5
 80092b2:	6871      	ldr	r1, [r6, #4]
 80092b4:	f000 fc9c 	bl	8009bf0 <_Balloc>
 80092b8:	4607      	mov	r7, r0
 80092ba:	b928      	cbnz	r0, 80092c8 <_dtoa_r+0x9d8>
 80092bc:	4602      	mov	r2, r0
 80092be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80092c2:	4b7f      	ldr	r3, [pc, #508]	; (80094c0 <_dtoa_r+0xbd0>)
 80092c4:	f7ff bb28 	b.w	8008918 <_dtoa_r+0x28>
 80092c8:	6932      	ldr	r2, [r6, #16]
 80092ca:	f106 010c 	add.w	r1, r6, #12
 80092ce:	3202      	adds	r2, #2
 80092d0:	0092      	lsls	r2, r2, #2
 80092d2:	300c      	adds	r0, #12
 80092d4:	f7fd ffb4 	bl	8007240 <memcpy>
 80092d8:	2201      	movs	r2, #1
 80092da:	4639      	mov	r1, r7
 80092dc:	4628      	mov	r0, r5
 80092de:	f000 fedf 	bl	800a0a0 <__lshift>
 80092e2:	46b0      	mov	r8, r6
 80092e4:	4606      	mov	r6, r0
 80092e6:	9b03      	ldr	r3, [sp, #12]
 80092e8:	3301      	adds	r3, #1
 80092ea:	9308      	str	r3, [sp, #32]
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	444b      	add	r3, r9
 80092f0:	930a      	str	r3, [sp, #40]	; 0x28
 80092f2:	9b04      	ldr	r3, [sp, #16]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	9309      	str	r3, [sp, #36]	; 0x24
 80092fa:	9b08      	ldr	r3, [sp, #32]
 80092fc:	4621      	mov	r1, r4
 80092fe:	3b01      	subs	r3, #1
 8009300:	4658      	mov	r0, fp
 8009302:	9304      	str	r3, [sp, #16]
 8009304:	f7ff fa68 	bl	80087d8 <quorem>
 8009308:	4603      	mov	r3, r0
 800930a:	4641      	mov	r1, r8
 800930c:	3330      	adds	r3, #48	; 0x30
 800930e:	9006      	str	r0, [sp, #24]
 8009310:	4658      	mov	r0, fp
 8009312:	930b      	str	r3, [sp, #44]	; 0x2c
 8009314:	f000 ff34 	bl	800a180 <__mcmp>
 8009318:	4632      	mov	r2, r6
 800931a:	4681      	mov	r9, r0
 800931c:	4621      	mov	r1, r4
 800931e:	4628      	mov	r0, r5
 8009320:	f000 ff4a 	bl	800a1b8 <__mdiff>
 8009324:	68c2      	ldr	r2, [r0, #12]
 8009326:	4607      	mov	r7, r0
 8009328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800932a:	bb02      	cbnz	r2, 800936e <_dtoa_r+0xa7e>
 800932c:	4601      	mov	r1, r0
 800932e:	4658      	mov	r0, fp
 8009330:	f000 ff26 	bl	800a180 <__mcmp>
 8009334:	4602      	mov	r2, r0
 8009336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009338:	4639      	mov	r1, r7
 800933a:	4628      	mov	r0, r5
 800933c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009340:	f000 fc96 	bl	8009c70 <_Bfree>
 8009344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009348:	9f08      	ldr	r7, [sp, #32]
 800934a:	ea43 0102 	orr.w	r1, r3, r2
 800934e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009350:	430b      	orrs	r3, r1
 8009352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009354:	d10d      	bne.n	8009372 <_dtoa_r+0xa82>
 8009356:	2b39      	cmp	r3, #57	; 0x39
 8009358:	d029      	beq.n	80093ae <_dtoa_r+0xabe>
 800935a:	f1b9 0f00 	cmp.w	r9, #0
 800935e:	dd01      	ble.n	8009364 <_dtoa_r+0xa74>
 8009360:	9b06      	ldr	r3, [sp, #24]
 8009362:	3331      	adds	r3, #49	; 0x31
 8009364:	9a04      	ldr	r2, [sp, #16]
 8009366:	7013      	strb	r3, [r2, #0]
 8009368:	e776      	b.n	8009258 <_dtoa_r+0x968>
 800936a:	4630      	mov	r0, r6
 800936c:	e7b9      	b.n	80092e2 <_dtoa_r+0x9f2>
 800936e:	2201      	movs	r2, #1
 8009370:	e7e2      	b.n	8009338 <_dtoa_r+0xa48>
 8009372:	f1b9 0f00 	cmp.w	r9, #0
 8009376:	db06      	blt.n	8009386 <_dtoa_r+0xa96>
 8009378:	9922      	ldr	r1, [sp, #136]	; 0x88
 800937a:	ea41 0909 	orr.w	r9, r1, r9
 800937e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009380:	ea59 0101 	orrs.w	r1, r9, r1
 8009384:	d120      	bne.n	80093c8 <_dtoa_r+0xad8>
 8009386:	2a00      	cmp	r2, #0
 8009388:	ddec      	ble.n	8009364 <_dtoa_r+0xa74>
 800938a:	4659      	mov	r1, fp
 800938c:	2201      	movs	r2, #1
 800938e:	4628      	mov	r0, r5
 8009390:	9308      	str	r3, [sp, #32]
 8009392:	f000 fe85 	bl	800a0a0 <__lshift>
 8009396:	4621      	mov	r1, r4
 8009398:	4683      	mov	fp, r0
 800939a:	f000 fef1 	bl	800a180 <__mcmp>
 800939e:	2800      	cmp	r0, #0
 80093a0:	9b08      	ldr	r3, [sp, #32]
 80093a2:	dc02      	bgt.n	80093aa <_dtoa_r+0xaba>
 80093a4:	d1de      	bne.n	8009364 <_dtoa_r+0xa74>
 80093a6:	07da      	lsls	r2, r3, #31
 80093a8:	d5dc      	bpl.n	8009364 <_dtoa_r+0xa74>
 80093aa:	2b39      	cmp	r3, #57	; 0x39
 80093ac:	d1d8      	bne.n	8009360 <_dtoa_r+0xa70>
 80093ae:	2339      	movs	r3, #57	; 0x39
 80093b0:	9a04      	ldr	r2, [sp, #16]
 80093b2:	7013      	strb	r3, [r2, #0]
 80093b4:	463b      	mov	r3, r7
 80093b6:	461f      	mov	r7, r3
 80093b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80093bc:	3b01      	subs	r3, #1
 80093be:	2a39      	cmp	r2, #57	; 0x39
 80093c0:	d050      	beq.n	8009464 <_dtoa_r+0xb74>
 80093c2:	3201      	adds	r2, #1
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	e747      	b.n	8009258 <_dtoa_r+0x968>
 80093c8:	2a00      	cmp	r2, #0
 80093ca:	dd03      	ble.n	80093d4 <_dtoa_r+0xae4>
 80093cc:	2b39      	cmp	r3, #57	; 0x39
 80093ce:	d0ee      	beq.n	80093ae <_dtoa_r+0xabe>
 80093d0:	3301      	adds	r3, #1
 80093d2:	e7c7      	b.n	8009364 <_dtoa_r+0xa74>
 80093d4:	9a08      	ldr	r2, [sp, #32]
 80093d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093dc:	428a      	cmp	r2, r1
 80093de:	d02a      	beq.n	8009436 <_dtoa_r+0xb46>
 80093e0:	4659      	mov	r1, fp
 80093e2:	2300      	movs	r3, #0
 80093e4:	220a      	movs	r2, #10
 80093e6:	4628      	mov	r0, r5
 80093e8:	f000 fc64 	bl	8009cb4 <__multadd>
 80093ec:	45b0      	cmp	r8, r6
 80093ee:	4683      	mov	fp, r0
 80093f0:	f04f 0300 	mov.w	r3, #0
 80093f4:	f04f 020a 	mov.w	r2, #10
 80093f8:	4641      	mov	r1, r8
 80093fa:	4628      	mov	r0, r5
 80093fc:	d107      	bne.n	800940e <_dtoa_r+0xb1e>
 80093fe:	f000 fc59 	bl	8009cb4 <__multadd>
 8009402:	4680      	mov	r8, r0
 8009404:	4606      	mov	r6, r0
 8009406:	9b08      	ldr	r3, [sp, #32]
 8009408:	3301      	adds	r3, #1
 800940a:	9308      	str	r3, [sp, #32]
 800940c:	e775      	b.n	80092fa <_dtoa_r+0xa0a>
 800940e:	f000 fc51 	bl	8009cb4 <__multadd>
 8009412:	4631      	mov	r1, r6
 8009414:	4680      	mov	r8, r0
 8009416:	2300      	movs	r3, #0
 8009418:	220a      	movs	r2, #10
 800941a:	4628      	mov	r0, r5
 800941c:	f000 fc4a 	bl	8009cb4 <__multadd>
 8009420:	4606      	mov	r6, r0
 8009422:	e7f0      	b.n	8009406 <_dtoa_r+0xb16>
 8009424:	f1b9 0f00 	cmp.w	r9, #0
 8009428:	bfcc      	ite	gt
 800942a:	464f      	movgt	r7, r9
 800942c:	2701      	movle	r7, #1
 800942e:	f04f 0800 	mov.w	r8, #0
 8009432:	9a03      	ldr	r2, [sp, #12]
 8009434:	4417      	add	r7, r2
 8009436:	4659      	mov	r1, fp
 8009438:	2201      	movs	r2, #1
 800943a:	4628      	mov	r0, r5
 800943c:	9308      	str	r3, [sp, #32]
 800943e:	f000 fe2f 	bl	800a0a0 <__lshift>
 8009442:	4621      	mov	r1, r4
 8009444:	4683      	mov	fp, r0
 8009446:	f000 fe9b 	bl	800a180 <__mcmp>
 800944a:	2800      	cmp	r0, #0
 800944c:	dcb2      	bgt.n	80093b4 <_dtoa_r+0xac4>
 800944e:	d102      	bne.n	8009456 <_dtoa_r+0xb66>
 8009450:	9b08      	ldr	r3, [sp, #32]
 8009452:	07db      	lsls	r3, r3, #31
 8009454:	d4ae      	bmi.n	80093b4 <_dtoa_r+0xac4>
 8009456:	463b      	mov	r3, r7
 8009458:	461f      	mov	r7, r3
 800945a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800945e:	2a30      	cmp	r2, #48	; 0x30
 8009460:	d0fa      	beq.n	8009458 <_dtoa_r+0xb68>
 8009462:	e6f9      	b.n	8009258 <_dtoa_r+0x968>
 8009464:	9a03      	ldr	r2, [sp, #12]
 8009466:	429a      	cmp	r2, r3
 8009468:	d1a5      	bne.n	80093b6 <_dtoa_r+0xac6>
 800946a:	2331      	movs	r3, #49	; 0x31
 800946c:	f10a 0a01 	add.w	sl, sl, #1
 8009470:	e779      	b.n	8009366 <_dtoa_r+0xa76>
 8009472:	4b14      	ldr	r3, [pc, #80]	; (80094c4 <_dtoa_r+0xbd4>)
 8009474:	f7ff baa8 	b.w	80089c8 <_dtoa_r+0xd8>
 8009478:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800947a:	2b00      	cmp	r3, #0
 800947c:	f47f aa81 	bne.w	8008982 <_dtoa_r+0x92>
 8009480:	4b11      	ldr	r3, [pc, #68]	; (80094c8 <_dtoa_r+0xbd8>)
 8009482:	f7ff baa1 	b.w	80089c8 <_dtoa_r+0xd8>
 8009486:	f1b9 0f00 	cmp.w	r9, #0
 800948a:	dc03      	bgt.n	8009494 <_dtoa_r+0xba4>
 800948c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800948e:	2b02      	cmp	r3, #2
 8009490:	f73f aecb 	bgt.w	800922a <_dtoa_r+0x93a>
 8009494:	9f03      	ldr	r7, [sp, #12]
 8009496:	4621      	mov	r1, r4
 8009498:	4658      	mov	r0, fp
 800949a:	f7ff f99d 	bl	80087d8 <quorem>
 800949e:	9a03      	ldr	r2, [sp, #12]
 80094a0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80094a4:	f807 3b01 	strb.w	r3, [r7], #1
 80094a8:	1aba      	subs	r2, r7, r2
 80094aa:	4591      	cmp	r9, r2
 80094ac:	ddba      	ble.n	8009424 <_dtoa_r+0xb34>
 80094ae:	4659      	mov	r1, fp
 80094b0:	2300      	movs	r3, #0
 80094b2:	220a      	movs	r2, #10
 80094b4:	4628      	mov	r0, r5
 80094b6:	f000 fbfd 	bl	8009cb4 <__multadd>
 80094ba:	4683      	mov	fp, r0
 80094bc:	e7eb      	b.n	8009496 <_dtoa_r+0xba6>
 80094be:	bf00      	nop
 80094c0:	0800b8af 	.word	0x0800b8af
 80094c4:	0800b7bc 	.word	0x0800b7bc
 80094c8:	0800b830 	.word	0x0800b830

080094cc <rshift>:
 80094cc:	6903      	ldr	r3, [r0, #16]
 80094ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80094d6:	f100 0414 	add.w	r4, r0, #20
 80094da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80094de:	dd46      	ble.n	800956e <rshift+0xa2>
 80094e0:	f011 011f 	ands.w	r1, r1, #31
 80094e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80094e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80094ec:	d10c      	bne.n	8009508 <rshift+0x3c>
 80094ee:	4629      	mov	r1, r5
 80094f0:	f100 0710 	add.w	r7, r0, #16
 80094f4:	42b1      	cmp	r1, r6
 80094f6:	d335      	bcc.n	8009564 <rshift+0x98>
 80094f8:	1a9b      	subs	r3, r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	1eea      	subs	r2, r5, #3
 80094fe:	4296      	cmp	r6, r2
 8009500:	bf38      	it	cc
 8009502:	2300      	movcc	r3, #0
 8009504:	4423      	add	r3, r4
 8009506:	e015      	b.n	8009534 <rshift+0x68>
 8009508:	46a1      	mov	r9, r4
 800950a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800950e:	f1c1 0820 	rsb	r8, r1, #32
 8009512:	40cf      	lsrs	r7, r1
 8009514:	f105 0e04 	add.w	lr, r5, #4
 8009518:	4576      	cmp	r6, lr
 800951a:	46f4      	mov	ip, lr
 800951c:	d816      	bhi.n	800954c <rshift+0x80>
 800951e:	1a9a      	subs	r2, r3, r2
 8009520:	0092      	lsls	r2, r2, #2
 8009522:	3a04      	subs	r2, #4
 8009524:	3501      	adds	r5, #1
 8009526:	42ae      	cmp	r6, r5
 8009528:	bf38      	it	cc
 800952a:	2200      	movcc	r2, #0
 800952c:	18a3      	adds	r3, r4, r2
 800952e:	50a7      	str	r7, [r4, r2]
 8009530:	b107      	cbz	r7, 8009534 <rshift+0x68>
 8009532:	3304      	adds	r3, #4
 8009534:	42a3      	cmp	r3, r4
 8009536:	eba3 0204 	sub.w	r2, r3, r4
 800953a:	bf08      	it	eq
 800953c:	2300      	moveq	r3, #0
 800953e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009542:	6102      	str	r2, [r0, #16]
 8009544:	bf08      	it	eq
 8009546:	6143      	streq	r3, [r0, #20]
 8009548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800954c:	f8dc c000 	ldr.w	ip, [ip]
 8009550:	fa0c fc08 	lsl.w	ip, ip, r8
 8009554:	ea4c 0707 	orr.w	r7, ip, r7
 8009558:	f849 7b04 	str.w	r7, [r9], #4
 800955c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009560:	40cf      	lsrs	r7, r1
 8009562:	e7d9      	b.n	8009518 <rshift+0x4c>
 8009564:	f851 cb04 	ldr.w	ip, [r1], #4
 8009568:	f847 cf04 	str.w	ip, [r7, #4]!
 800956c:	e7c2      	b.n	80094f4 <rshift+0x28>
 800956e:	4623      	mov	r3, r4
 8009570:	e7e0      	b.n	8009534 <rshift+0x68>

08009572 <__hexdig_fun>:
 8009572:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009576:	2b09      	cmp	r3, #9
 8009578:	d802      	bhi.n	8009580 <__hexdig_fun+0xe>
 800957a:	3820      	subs	r0, #32
 800957c:	b2c0      	uxtb	r0, r0
 800957e:	4770      	bx	lr
 8009580:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009584:	2b05      	cmp	r3, #5
 8009586:	d801      	bhi.n	800958c <__hexdig_fun+0x1a>
 8009588:	3847      	subs	r0, #71	; 0x47
 800958a:	e7f7      	b.n	800957c <__hexdig_fun+0xa>
 800958c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009590:	2b05      	cmp	r3, #5
 8009592:	d801      	bhi.n	8009598 <__hexdig_fun+0x26>
 8009594:	3827      	subs	r0, #39	; 0x27
 8009596:	e7f1      	b.n	800957c <__hexdig_fun+0xa>
 8009598:	2000      	movs	r0, #0
 800959a:	4770      	bx	lr

0800959c <__gethex>:
 800959c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a0:	b08b      	sub	sp, #44	; 0x2c
 80095a2:	9305      	str	r3, [sp, #20]
 80095a4:	4bb2      	ldr	r3, [pc, #712]	; (8009870 <__gethex+0x2d4>)
 80095a6:	9002      	str	r0, [sp, #8]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	468b      	mov	fp, r1
 80095ac:	4618      	mov	r0, r3
 80095ae:	4690      	mov	r8, r2
 80095b0:	9303      	str	r3, [sp, #12]
 80095b2:	f7f6 fdcd 	bl	8000150 <strlen>
 80095b6:	4682      	mov	sl, r0
 80095b8:	9b03      	ldr	r3, [sp, #12]
 80095ba:	f8db 2000 	ldr.w	r2, [fp]
 80095be:	4403      	add	r3, r0
 80095c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80095c4:	9306      	str	r3, [sp, #24]
 80095c6:	1c93      	adds	r3, r2, #2
 80095c8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80095cc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80095d0:	32fe      	adds	r2, #254	; 0xfe
 80095d2:	18d1      	adds	r1, r2, r3
 80095d4:	461f      	mov	r7, r3
 80095d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80095da:	9101      	str	r1, [sp, #4]
 80095dc:	2830      	cmp	r0, #48	; 0x30
 80095de:	d0f8      	beq.n	80095d2 <__gethex+0x36>
 80095e0:	f7ff ffc7 	bl	8009572 <__hexdig_fun>
 80095e4:	4604      	mov	r4, r0
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d13a      	bne.n	8009660 <__gethex+0xc4>
 80095ea:	4652      	mov	r2, sl
 80095ec:	4638      	mov	r0, r7
 80095ee:	9903      	ldr	r1, [sp, #12]
 80095f0:	f7fe fac9 	bl	8007b86 <strncmp>
 80095f4:	4605      	mov	r5, r0
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d166      	bne.n	80096c8 <__gethex+0x12c>
 80095fa:	f817 000a 	ldrb.w	r0, [r7, sl]
 80095fe:	eb07 060a 	add.w	r6, r7, sl
 8009602:	f7ff ffb6 	bl	8009572 <__hexdig_fun>
 8009606:	2800      	cmp	r0, #0
 8009608:	d060      	beq.n	80096cc <__gethex+0x130>
 800960a:	4633      	mov	r3, r6
 800960c:	7818      	ldrb	r0, [r3, #0]
 800960e:	461f      	mov	r7, r3
 8009610:	2830      	cmp	r0, #48	; 0x30
 8009612:	f103 0301 	add.w	r3, r3, #1
 8009616:	d0f9      	beq.n	800960c <__gethex+0x70>
 8009618:	f7ff ffab 	bl	8009572 <__hexdig_fun>
 800961c:	2301      	movs	r3, #1
 800961e:	fab0 f480 	clz	r4, r0
 8009622:	4635      	mov	r5, r6
 8009624:	0964      	lsrs	r4, r4, #5
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	463a      	mov	r2, r7
 800962a:	4616      	mov	r6, r2
 800962c:	7830      	ldrb	r0, [r6, #0]
 800962e:	3201      	adds	r2, #1
 8009630:	f7ff ff9f 	bl	8009572 <__hexdig_fun>
 8009634:	2800      	cmp	r0, #0
 8009636:	d1f8      	bne.n	800962a <__gethex+0x8e>
 8009638:	4652      	mov	r2, sl
 800963a:	4630      	mov	r0, r6
 800963c:	9903      	ldr	r1, [sp, #12]
 800963e:	f7fe faa2 	bl	8007b86 <strncmp>
 8009642:	b980      	cbnz	r0, 8009666 <__gethex+0xca>
 8009644:	b94d      	cbnz	r5, 800965a <__gethex+0xbe>
 8009646:	eb06 050a 	add.w	r5, r6, sl
 800964a:	462a      	mov	r2, r5
 800964c:	4616      	mov	r6, r2
 800964e:	7830      	ldrb	r0, [r6, #0]
 8009650:	3201      	adds	r2, #1
 8009652:	f7ff ff8e 	bl	8009572 <__hexdig_fun>
 8009656:	2800      	cmp	r0, #0
 8009658:	d1f8      	bne.n	800964c <__gethex+0xb0>
 800965a:	1bad      	subs	r5, r5, r6
 800965c:	00ad      	lsls	r5, r5, #2
 800965e:	e004      	b.n	800966a <__gethex+0xce>
 8009660:	2400      	movs	r4, #0
 8009662:	4625      	mov	r5, r4
 8009664:	e7e0      	b.n	8009628 <__gethex+0x8c>
 8009666:	2d00      	cmp	r5, #0
 8009668:	d1f7      	bne.n	800965a <__gethex+0xbe>
 800966a:	7833      	ldrb	r3, [r6, #0]
 800966c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009670:	2b50      	cmp	r3, #80	; 0x50
 8009672:	d139      	bne.n	80096e8 <__gethex+0x14c>
 8009674:	7873      	ldrb	r3, [r6, #1]
 8009676:	2b2b      	cmp	r3, #43	; 0x2b
 8009678:	d02a      	beq.n	80096d0 <__gethex+0x134>
 800967a:	2b2d      	cmp	r3, #45	; 0x2d
 800967c:	d02c      	beq.n	80096d8 <__gethex+0x13c>
 800967e:	f04f 0900 	mov.w	r9, #0
 8009682:	1c71      	adds	r1, r6, #1
 8009684:	7808      	ldrb	r0, [r1, #0]
 8009686:	f7ff ff74 	bl	8009572 <__hexdig_fun>
 800968a:	1e43      	subs	r3, r0, #1
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b18      	cmp	r3, #24
 8009690:	d82a      	bhi.n	80096e8 <__gethex+0x14c>
 8009692:	f1a0 0210 	sub.w	r2, r0, #16
 8009696:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800969a:	f7ff ff6a 	bl	8009572 <__hexdig_fun>
 800969e:	1e43      	subs	r3, r0, #1
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b18      	cmp	r3, #24
 80096a4:	d91b      	bls.n	80096de <__gethex+0x142>
 80096a6:	f1b9 0f00 	cmp.w	r9, #0
 80096aa:	d000      	beq.n	80096ae <__gethex+0x112>
 80096ac:	4252      	negs	r2, r2
 80096ae:	4415      	add	r5, r2
 80096b0:	f8cb 1000 	str.w	r1, [fp]
 80096b4:	b1d4      	cbz	r4, 80096ec <__gethex+0x150>
 80096b6:	9b01      	ldr	r3, [sp, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bf14      	ite	ne
 80096bc:	2700      	movne	r7, #0
 80096be:	2706      	moveq	r7, #6
 80096c0:	4638      	mov	r0, r7
 80096c2:	b00b      	add	sp, #44	; 0x2c
 80096c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c8:	463e      	mov	r6, r7
 80096ca:	4625      	mov	r5, r4
 80096cc:	2401      	movs	r4, #1
 80096ce:	e7cc      	b.n	800966a <__gethex+0xce>
 80096d0:	f04f 0900 	mov.w	r9, #0
 80096d4:	1cb1      	adds	r1, r6, #2
 80096d6:	e7d5      	b.n	8009684 <__gethex+0xe8>
 80096d8:	f04f 0901 	mov.w	r9, #1
 80096dc:	e7fa      	b.n	80096d4 <__gethex+0x138>
 80096de:	230a      	movs	r3, #10
 80096e0:	fb03 0202 	mla	r2, r3, r2, r0
 80096e4:	3a10      	subs	r2, #16
 80096e6:	e7d6      	b.n	8009696 <__gethex+0xfa>
 80096e8:	4631      	mov	r1, r6
 80096ea:	e7e1      	b.n	80096b0 <__gethex+0x114>
 80096ec:	4621      	mov	r1, r4
 80096ee:	1bf3      	subs	r3, r6, r7
 80096f0:	3b01      	subs	r3, #1
 80096f2:	2b07      	cmp	r3, #7
 80096f4:	dc0a      	bgt.n	800970c <__gethex+0x170>
 80096f6:	9802      	ldr	r0, [sp, #8]
 80096f8:	f000 fa7a 	bl	8009bf0 <_Balloc>
 80096fc:	4604      	mov	r4, r0
 80096fe:	b940      	cbnz	r0, 8009712 <__gethex+0x176>
 8009700:	4602      	mov	r2, r0
 8009702:	21de      	movs	r1, #222	; 0xde
 8009704:	4b5b      	ldr	r3, [pc, #364]	; (8009874 <__gethex+0x2d8>)
 8009706:	485c      	ldr	r0, [pc, #368]	; (8009878 <__gethex+0x2dc>)
 8009708:	f001 f99a 	bl	800aa40 <__assert_func>
 800970c:	3101      	adds	r1, #1
 800970e:	105b      	asrs	r3, r3, #1
 8009710:	e7ef      	b.n	80096f2 <__gethex+0x156>
 8009712:	f04f 0b00 	mov.w	fp, #0
 8009716:	f100 0914 	add.w	r9, r0, #20
 800971a:	f1ca 0301 	rsb	r3, sl, #1
 800971e:	f8cd 9010 	str.w	r9, [sp, #16]
 8009722:	f8cd b004 	str.w	fp, [sp, #4]
 8009726:	9308      	str	r3, [sp, #32]
 8009728:	42b7      	cmp	r7, r6
 800972a:	d33f      	bcc.n	80097ac <__gethex+0x210>
 800972c:	9f04      	ldr	r7, [sp, #16]
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	f847 3b04 	str.w	r3, [r7], #4
 8009734:	eba7 0709 	sub.w	r7, r7, r9
 8009738:	10bf      	asrs	r7, r7, #2
 800973a:	6127      	str	r7, [r4, #16]
 800973c:	4618      	mov	r0, r3
 800973e:	f000 fb49 	bl	8009dd4 <__hi0bits>
 8009742:	017f      	lsls	r7, r7, #5
 8009744:	f8d8 6000 	ldr.w	r6, [r8]
 8009748:	1a3f      	subs	r7, r7, r0
 800974a:	42b7      	cmp	r7, r6
 800974c:	dd62      	ble.n	8009814 <__gethex+0x278>
 800974e:	1bbf      	subs	r7, r7, r6
 8009750:	4639      	mov	r1, r7
 8009752:	4620      	mov	r0, r4
 8009754:	f000 fee3 	bl	800a51e <__any_on>
 8009758:	4682      	mov	sl, r0
 800975a:	b1a8      	cbz	r0, 8009788 <__gethex+0x1ec>
 800975c:	f04f 0a01 	mov.w	sl, #1
 8009760:	1e7b      	subs	r3, r7, #1
 8009762:	1159      	asrs	r1, r3, #5
 8009764:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009768:	f003 021f 	and.w	r2, r3, #31
 800976c:	fa0a f202 	lsl.w	r2, sl, r2
 8009770:	420a      	tst	r2, r1
 8009772:	d009      	beq.n	8009788 <__gethex+0x1ec>
 8009774:	4553      	cmp	r3, sl
 8009776:	dd05      	ble.n	8009784 <__gethex+0x1e8>
 8009778:	4620      	mov	r0, r4
 800977a:	1eb9      	subs	r1, r7, #2
 800977c:	f000 fecf 	bl	800a51e <__any_on>
 8009780:	2800      	cmp	r0, #0
 8009782:	d144      	bne.n	800980e <__gethex+0x272>
 8009784:	f04f 0a02 	mov.w	sl, #2
 8009788:	4639      	mov	r1, r7
 800978a:	4620      	mov	r0, r4
 800978c:	f7ff fe9e 	bl	80094cc <rshift>
 8009790:	443d      	add	r5, r7
 8009792:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009796:	42ab      	cmp	r3, r5
 8009798:	da4a      	bge.n	8009830 <__gethex+0x294>
 800979a:	4621      	mov	r1, r4
 800979c:	9802      	ldr	r0, [sp, #8]
 800979e:	f000 fa67 	bl	8009c70 <_Bfree>
 80097a2:	2300      	movs	r3, #0
 80097a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097a6:	27a3      	movs	r7, #163	; 0xa3
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	e789      	b.n	80096c0 <__gethex+0x124>
 80097ac:	1e73      	subs	r3, r6, #1
 80097ae:	9a06      	ldr	r2, [sp, #24]
 80097b0:	9307      	str	r3, [sp, #28]
 80097b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d019      	beq.n	80097ee <__gethex+0x252>
 80097ba:	f1bb 0f20 	cmp.w	fp, #32
 80097be:	d107      	bne.n	80097d0 <__gethex+0x234>
 80097c0:	9b04      	ldr	r3, [sp, #16]
 80097c2:	9a01      	ldr	r2, [sp, #4]
 80097c4:	f843 2b04 	str.w	r2, [r3], #4
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	2300      	movs	r3, #0
 80097cc:	469b      	mov	fp, r3
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80097d4:	f7ff fecd 	bl	8009572 <__hexdig_fun>
 80097d8:	9b01      	ldr	r3, [sp, #4]
 80097da:	f000 000f 	and.w	r0, r0, #15
 80097de:	fa00 f00b 	lsl.w	r0, r0, fp
 80097e2:	4303      	orrs	r3, r0
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	f10b 0b04 	add.w	fp, fp, #4
 80097ea:	9b07      	ldr	r3, [sp, #28]
 80097ec:	e00d      	b.n	800980a <__gethex+0x26e>
 80097ee:	9a08      	ldr	r2, [sp, #32]
 80097f0:	1e73      	subs	r3, r6, #1
 80097f2:	4413      	add	r3, r2
 80097f4:	42bb      	cmp	r3, r7
 80097f6:	d3e0      	bcc.n	80097ba <__gethex+0x21e>
 80097f8:	4618      	mov	r0, r3
 80097fa:	4652      	mov	r2, sl
 80097fc:	9903      	ldr	r1, [sp, #12]
 80097fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009800:	f7fe f9c1 	bl	8007b86 <strncmp>
 8009804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009806:	2800      	cmp	r0, #0
 8009808:	d1d7      	bne.n	80097ba <__gethex+0x21e>
 800980a:	461e      	mov	r6, r3
 800980c:	e78c      	b.n	8009728 <__gethex+0x18c>
 800980e:	f04f 0a03 	mov.w	sl, #3
 8009812:	e7b9      	b.n	8009788 <__gethex+0x1ec>
 8009814:	da09      	bge.n	800982a <__gethex+0x28e>
 8009816:	1bf7      	subs	r7, r6, r7
 8009818:	4621      	mov	r1, r4
 800981a:	463a      	mov	r2, r7
 800981c:	9802      	ldr	r0, [sp, #8]
 800981e:	f000 fc3f 	bl	800a0a0 <__lshift>
 8009822:	4604      	mov	r4, r0
 8009824:	1bed      	subs	r5, r5, r7
 8009826:	f100 0914 	add.w	r9, r0, #20
 800982a:	f04f 0a00 	mov.w	sl, #0
 800982e:	e7b0      	b.n	8009792 <__gethex+0x1f6>
 8009830:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009834:	42a8      	cmp	r0, r5
 8009836:	dd72      	ble.n	800991e <__gethex+0x382>
 8009838:	1b45      	subs	r5, r0, r5
 800983a:	42ae      	cmp	r6, r5
 800983c:	dc35      	bgt.n	80098aa <__gethex+0x30e>
 800983e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009842:	2b02      	cmp	r3, #2
 8009844:	d029      	beq.n	800989a <__gethex+0x2fe>
 8009846:	2b03      	cmp	r3, #3
 8009848:	d02b      	beq.n	80098a2 <__gethex+0x306>
 800984a:	2b01      	cmp	r3, #1
 800984c:	d11c      	bne.n	8009888 <__gethex+0x2ec>
 800984e:	42ae      	cmp	r6, r5
 8009850:	d11a      	bne.n	8009888 <__gethex+0x2ec>
 8009852:	2e01      	cmp	r6, #1
 8009854:	d112      	bne.n	800987c <__gethex+0x2e0>
 8009856:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800985a:	9a05      	ldr	r2, [sp, #20]
 800985c:	2762      	movs	r7, #98	; 0x62
 800985e:	6013      	str	r3, [r2, #0]
 8009860:	2301      	movs	r3, #1
 8009862:	6123      	str	r3, [r4, #16]
 8009864:	f8c9 3000 	str.w	r3, [r9]
 8009868:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800986a:	601c      	str	r4, [r3, #0]
 800986c:	e728      	b.n	80096c0 <__gethex+0x124>
 800986e:	bf00      	nop
 8009870:	0800b928 	.word	0x0800b928
 8009874:	0800b8af 	.word	0x0800b8af
 8009878:	0800b8c0 	.word	0x0800b8c0
 800987c:	4620      	mov	r0, r4
 800987e:	1e71      	subs	r1, r6, #1
 8009880:	f000 fe4d 	bl	800a51e <__any_on>
 8009884:	2800      	cmp	r0, #0
 8009886:	d1e6      	bne.n	8009856 <__gethex+0x2ba>
 8009888:	4621      	mov	r1, r4
 800988a:	9802      	ldr	r0, [sp, #8]
 800988c:	f000 f9f0 	bl	8009c70 <_Bfree>
 8009890:	2300      	movs	r3, #0
 8009892:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009894:	2750      	movs	r7, #80	; 0x50
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	e712      	b.n	80096c0 <__gethex+0x124>
 800989a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1f3      	bne.n	8009888 <__gethex+0x2ec>
 80098a0:	e7d9      	b.n	8009856 <__gethex+0x2ba>
 80098a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1d6      	bne.n	8009856 <__gethex+0x2ba>
 80098a8:	e7ee      	b.n	8009888 <__gethex+0x2ec>
 80098aa:	1e6f      	subs	r7, r5, #1
 80098ac:	f1ba 0f00 	cmp.w	sl, #0
 80098b0:	d132      	bne.n	8009918 <__gethex+0x37c>
 80098b2:	b127      	cbz	r7, 80098be <__gethex+0x322>
 80098b4:	4639      	mov	r1, r7
 80098b6:	4620      	mov	r0, r4
 80098b8:	f000 fe31 	bl	800a51e <__any_on>
 80098bc:	4682      	mov	sl, r0
 80098be:	2101      	movs	r1, #1
 80098c0:	117b      	asrs	r3, r7, #5
 80098c2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80098c6:	f007 071f 	and.w	r7, r7, #31
 80098ca:	fa01 f707 	lsl.w	r7, r1, r7
 80098ce:	421f      	tst	r7, r3
 80098d0:	f04f 0702 	mov.w	r7, #2
 80098d4:	4629      	mov	r1, r5
 80098d6:	4620      	mov	r0, r4
 80098d8:	bf18      	it	ne
 80098da:	f04a 0a02 	orrne.w	sl, sl, #2
 80098de:	1b76      	subs	r6, r6, r5
 80098e0:	f7ff fdf4 	bl	80094cc <rshift>
 80098e4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80098e8:	f1ba 0f00 	cmp.w	sl, #0
 80098ec:	d048      	beq.n	8009980 <__gethex+0x3e4>
 80098ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d015      	beq.n	8009922 <__gethex+0x386>
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d017      	beq.n	800992a <__gethex+0x38e>
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d109      	bne.n	8009912 <__gethex+0x376>
 80098fe:	f01a 0f02 	tst.w	sl, #2
 8009902:	d006      	beq.n	8009912 <__gethex+0x376>
 8009904:	f8d9 0000 	ldr.w	r0, [r9]
 8009908:	ea4a 0a00 	orr.w	sl, sl, r0
 800990c:	f01a 0f01 	tst.w	sl, #1
 8009910:	d10e      	bne.n	8009930 <__gethex+0x394>
 8009912:	f047 0710 	orr.w	r7, r7, #16
 8009916:	e033      	b.n	8009980 <__gethex+0x3e4>
 8009918:	f04f 0a01 	mov.w	sl, #1
 800991c:	e7cf      	b.n	80098be <__gethex+0x322>
 800991e:	2701      	movs	r7, #1
 8009920:	e7e2      	b.n	80098e8 <__gethex+0x34c>
 8009922:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009924:	f1c3 0301 	rsb	r3, r3, #1
 8009928:	9315      	str	r3, [sp, #84]	; 0x54
 800992a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0f0      	beq.n	8009912 <__gethex+0x376>
 8009930:	f04f 0c00 	mov.w	ip, #0
 8009934:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009938:	f104 0314 	add.w	r3, r4, #20
 800993c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009940:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009944:	4618      	mov	r0, r3
 8009946:	f853 2b04 	ldr.w	r2, [r3], #4
 800994a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800994e:	d01c      	beq.n	800998a <__gethex+0x3ee>
 8009950:	3201      	adds	r2, #1
 8009952:	6002      	str	r2, [r0, #0]
 8009954:	2f02      	cmp	r7, #2
 8009956:	f104 0314 	add.w	r3, r4, #20
 800995a:	d13d      	bne.n	80099d8 <__gethex+0x43c>
 800995c:	f8d8 2000 	ldr.w	r2, [r8]
 8009960:	3a01      	subs	r2, #1
 8009962:	42b2      	cmp	r2, r6
 8009964:	d10a      	bne.n	800997c <__gethex+0x3e0>
 8009966:	2201      	movs	r2, #1
 8009968:	1171      	asrs	r1, r6, #5
 800996a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800996e:	f006 061f 	and.w	r6, r6, #31
 8009972:	fa02 f606 	lsl.w	r6, r2, r6
 8009976:	421e      	tst	r6, r3
 8009978:	bf18      	it	ne
 800997a:	4617      	movne	r7, r2
 800997c:	f047 0720 	orr.w	r7, r7, #32
 8009980:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009982:	601c      	str	r4, [r3, #0]
 8009984:	9b05      	ldr	r3, [sp, #20]
 8009986:	601d      	str	r5, [r3, #0]
 8009988:	e69a      	b.n	80096c0 <__gethex+0x124>
 800998a:	4299      	cmp	r1, r3
 800998c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009990:	d8d8      	bhi.n	8009944 <__gethex+0x3a8>
 8009992:	68a3      	ldr	r3, [r4, #8]
 8009994:	459b      	cmp	fp, r3
 8009996:	db17      	blt.n	80099c8 <__gethex+0x42c>
 8009998:	6861      	ldr	r1, [r4, #4]
 800999a:	9802      	ldr	r0, [sp, #8]
 800999c:	3101      	adds	r1, #1
 800999e:	f000 f927 	bl	8009bf0 <_Balloc>
 80099a2:	4681      	mov	r9, r0
 80099a4:	b918      	cbnz	r0, 80099ae <__gethex+0x412>
 80099a6:	4602      	mov	r2, r0
 80099a8:	2184      	movs	r1, #132	; 0x84
 80099aa:	4b19      	ldr	r3, [pc, #100]	; (8009a10 <__gethex+0x474>)
 80099ac:	e6ab      	b.n	8009706 <__gethex+0x16a>
 80099ae:	6922      	ldr	r2, [r4, #16]
 80099b0:	f104 010c 	add.w	r1, r4, #12
 80099b4:	3202      	adds	r2, #2
 80099b6:	0092      	lsls	r2, r2, #2
 80099b8:	300c      	adds	r0, #12
 80099ba:	f7fd fc41 	bl	8007240 <memcpy>
 80099be:	4621      	mov	r1, r4
 80099c0:	9802      	ldr	r0, [sp, #8]
 80099c2:	f000 f955 	bl	8009c70 <_Bfree>
 80099c6:	464c      	mov	r4, r9
 80099c8:	6923      	ldr	r3, [r4, #16]
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	6122      	str	r2, [r4, #16]
 80099ce:	2201      	movs	r2, #1
 80099d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099d4:	615a      	str	r2, [r3, #20]
 80099d6:	e7bd      	b.n	8009954 <__gethex+0x3b8>
 80099d8:	6922      	ldr	r2, [r4, #16]
 80099da:	455a      	cmp	r2, fp
 80099dc:	dd0b      	ble.n	80099f6 <__gethex+0x45a>
 80099de:	2101      	movs	r1, #1
 80099e0:	4620      	mov	r0, r4
 80099e2:	f7ff fd73 	bl	80094cc <rshift>
 80099e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099ea:	3501      	adds	r5, #1
 80099ec:	42ab      	cmp	r3, r5
 80099ee:	f6ff aed4 	blt.w	800979a <__gethex+0x1fe>
 80099f2:	2701      	movs	r7, #1
 80099f4:	e7c2      	b.n	800997c <__gethex+0x3e0>
 80099f6:	f016 061f 	ands.w	r6, r6, #31
 80099fa:	d0fa      	beq.n	80099f2 <__gethex+0x456>
 80099fc:	4453      	add	r3, sl
 80099fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009a02:	f000 f9e7 	bl	8009dd4 <__hi0bits>
 8009a06:	f1c6 0620 	rsb	r6, r6, #32
 8009a0a:	42b0      	cmp	r0, r6
 8009a0c:	dbe7      	blt.n	80099de <__gethex+0x442>
 8009a0e:	e7f0      	b.n	80099f2 <__gethex+0x456>
 8009a10:	0800b8af 	.word	0x0800b8af

08009a14 <L_shift>:
 8009a14:	f1c2 0208 	rsb	r2, r2, #8
 8009a18:	0092      	lsls	r2, r2, #2
 8009a1a:	b570      	push	{r4, r5, r6, lr}
 8009a1c:	f1c2 0620 	rsb	r6, r2, #32
 8009a20:	6843      	ldr	r3, [r0, #4]
 8009a22:	6804      	ldr	r4, [r0, #0]
 8009a24:	fa03 f506 	lsl.w	r5, r3, r6
 8009a28:	432c      	orrs	r4, r5
 8009a2a:	40d3      	lsrs	r3, r2
 8009a2c:	6004      	str	r4, [r0, #0]
 8009a2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a32:	4288      	cmp	r0, r1
 8009a34:	d3f4      	bcc.n	8009a20 <L_shift+0xc>
 8009a36:	bd70      	pop	{r4, r5, r6, pc}

08009a38 <__match>:
 8009a38:	b530      	push	{r4, r5, lr}
 8009a3a:	6803      	ldr	r3, [r0, #0]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a42:	b914      	cbnz	r4, 8009a4a <__match+0x12>
 8009a44:	6003      	str	r3, [r0, #0]
 8009a46:	2001      	movs	r0, #1
 8009a48:	bd30      	pop	{r4, r5, pc}
 8009a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009a52:	2d19      	cmp	r5, #25
 8009a54:	bf98      	it	ls
 8009a56:	3220      	addls	r2, #32
 8009a58:	42a2      	cmp	r2, r4
 8009a5a:	d0f0      	beq.n	8009a3e <__match+0x6>
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e7f3      	b.n	8009a48 <__match+0x10>

08009a60 <__hexnan>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	2500      	movs	r5, #0
 8009a66:	680b      	ldr	r3, [r1, #0]
 8009a68:	4682      	mov	sl, r0
 8009a6a:	115e      	asrs	r6, r3, #5
 8009a6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a70:	f013 031f 	ands.w	r3, r3, #31
 8009a74:	bf18      	it	ne
 8009a76:	3604      	addne	r6, #4
 8009a78:	1f37      	subs	r7, r6, #4
 8009a7a:	46b9      	mov	r9, r7
 8009a7c:	463c      	mov	r4, r7
 8009a7e:	46ab      	mov	fp, r5
 8009a80:	b087      	sub	sp, #28
 8009a82:	4690      	mov	r8, r2
 8009a84:	6802      	ldr	r2, [r0, #0]
 8009a86:	9301      	str	r3, [sp, #4]
 8009a88:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a8c:	9502      	str	r5, [sp, #8]
 8009a8e:	7851      	ldrb	r1, [r2, #1]
 8009a90:	1c53      	adds	r3, r2, #1
 8009a92:	9303      	str	r3, [sp, #12]
 8009a94:	b341      	cbz	r1, 8009ae8 <__hexnan+0x88>
 8009a96:	4608      	mov	r0, r1
 8009a98:	9205      	str	r2, [sp, #20]
 8009a9a:	9104      	str	r1, [sp, #16]
 8009a9c:	f7ff fd69 	bl	8009572 <__hexdig_fun>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d14f      	bne.n	8009b44 <__hexnan+0xe4>
 8009aa4:	9904      	ldr	r1, [sp, #16]
 8009aa6:	9a05      	ldr	r2, [sp, #20]
 8009aa8:	2920      	cmp	r1, #32
 8009aaa:	d818      	bhi.n	8009ade <__hexnan+0x7e>
 8009aac:	9b02      	ldr	r3, [sp, #8]
 8009aae:	459b      	cmp	fp, r3
 8009ab0:	dd13      	ble.n	8009ada <__hexnan+0x7a>
 8009ab2:	454c      	cmp	r4, r9
 8009ab4:	d206      	bcs.n	8009ac4 <__hexnan+0x64>
 8009ab6:	2d07      	cmp	r5, #7
 8009ab8:	dc04      	bgt.n	8009ac4 <__hexnan+0x64>
 8009aba:	462a      	mov	r2, r5
 8009abc:	4649      	mov	r1, r9
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f7ff ffa8 	bl	8009a14 <L_shift>
 8009ac4:	4544      	cmp	r4, r8
 8009ac6:	d950      	bls.n	8009b6a <__hexnan+0x10a>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f1a4 0904 	sub.w	r9, r4, #4
 8009ace:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ad2:	461d      	mov	r5, r3
 8009ad4:	464c      	mov	r4, r9
 8009ad6:	f8cd b008 	str.w	fp, [sp, #8]
 8009ada:	9a03      	ldr	r2, [sp, #12]
 8009adc:	e7d7      	b.n	8009a8e <__hexnan+0x2e>
 8009ade:	2929      	cmp	r1, #41	; 0x29
 8009ae0:	d156      	bne.n	8009b90 <__hexnan+0x130>
 8009ae2:	3202      	adds	r2, #2
 8009ae4:	f8ca 2000 	str.w	r2, [sl]
 8009ae8:	f1bb 0f00 	cmp.w	fp, #0
 8009aec:	d050      	beq.n	8009b90 <__hexnan+0x130>
 8009aee:	454c      	cmp	r4, r9
 8009af0:	d206      	bcs.n	8009b00 <__hexnan+0xa0>
 8009af2:	2d07      	cmp	r5, #7
 8009af4:	dc04      	bgt.n	8009b00 <__hexnan+0xa0>
 8009af6:	462a      	mov	r2, r5
 8009af8:	4649      	mov	r1, r9
 8009afa:	4620      	mov	r0, r4
 8009afc:	f7ff ff8a 	bl	8009a14 <L_shift>
 8009b00:	4544      	cmp	r4, r8
 8009b02:	d934      	bls.n	8009b6e <__hexnan+0x10e>
 8009b04:	4623      	mov	r3, r4
 8009b06:	f1a8 0204 	sub.w	r2, r8, #4
 8009b0a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b0e:	429f      	cmp	r7, r3
 8009b10:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b14:	d2f9      	bcs.n	8009b0a <__hexnan+0xaa>
 8009b16:	1b3b      	subs	r3, r7, r4
 8009b18:	f023 0303 	bic.w	r3, r3, #3
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	3401      	adds	r4, #1
 8009b20:	3e03      	subs	r6, #3
 8009b22:	42b4      	cmp	r4, r6
 8009b24:	bf88      	it	hi
 8009b26:	2304      	movhi	r3, #4
 8009b28:	2200      	movs	r2, #0
 8009b2a:	4443      	add	r3, r8
 8009b2c:	f843 2b04 	str.w	r2, [r3], #4
 8009b30:	429f      	cmp	r7, r3
 8009b32:	d2fb      	bcs.n	8009b2c <__hexnan+0xcc>
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	b91b      	cbnz	r3, 8009b40 <__hexnan+0xe0>
 8009b38:	4547      	cmp	r7, r8
 8009b3a:	d127      	bne.n	8009b8c <__hexnan+0x12c>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	603b      	str	r3, [r7, #0]
 8009b40:	2005      	movs	r0, #5
 8009b42:	e026      	b.n	8009b92 <__hexnan+0x132>
 8009b44:	3501      	adds	r5, #1
 8009b46:	2d08      	cmp	r5, #8
 8009b48:	f10b 0b01 	add.w	fp, fp, #1
 8009b4c:	dd06      	ble.n	8009b5c <__hexnan+0xfc>
 8009b4e:	4544      	cmp	r4, r8
 8009b50:	d9c3      	bls.n	8009ada <__hexnan+0x7a>
 8009b52:	2300      	movs	r3, #0
 8009b54:	2501      	movs	r5, #1
 8009b56:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b5a:	3c04      	subs	r4, #4
 8009b5c:	6822      	ldr	r2, [r4, #0]
 8009b5e:	f000 000f 	and.w	r0, r0, #15
 8009b62:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009b66:	6022      	str	r2, [r4, #0]
 8009b68:	e7b7      	b.n	8009ada <__hexnan+0x7a>
 8009b6a:	2508      	movs	r5, #8
 8009b6c:	e7b5      	b.n	8009ada <__hexnan+0x7a>
 8009b6e:	9b01      	ldr	r3, [sp, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d0df      	beq.n	8009b34 <__hexnan+0xd4>
 8009b74:	f04f 32ff 	mov.w	r2, #4294967295
 8009b78:	f1c3 0320 	rsb	r3, r3, #32
 8009b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b84:	401a      	ands	r2, r3
 8009b86:	f846 2c04 	str.w	r2, [r6, #-4]
 8009b8a:	e7d3      	b.n	8009b34 <__hexnan+0xd4>
 8009b8c:	3f04      	subs	r7, #4
 8009b8e:	e7d1      	b.n	8009b34 <__hexnan+0xd4>
 8009b90:	2004      	movs	r0, #4
 8009b92:	b007      	add	sp, #28
 8009b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b98 <_localeconv_r>:
 8009b98:	4800      	ldr	r0, [pc, #0]	; (8009b9c <_localeconv_r+0x4>)
 8009b9a:	4770      	bx	lr
 8009b9c:	20000194 	.word	0x20000194

08009ba0 <malloc>:
 8009ba0:	4b02      	ldr	r3, [pc, #8]	; (8009bac <malloc+0xc>)
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	6818      	ldr	r0, [r3, #0]
 8009ba6:	f000 bd57 	b.w	800a658 <_malloc_r>
 8009baa:	bf00      	nop
 8009bac:	2000003c 	.word	0x2000003c

08009bb0 <__ascii_mbtowc>:
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	b901      	cbnz	r1, 8009bb6 <__ascii_mbtowc+0x6>
 8009bb4:	a901      	add	r1, sp, #4
 8009bb6:	b142      	cbz	r2, 8009bca <__ascii_mbtowc+0x1a>
 8009bb8:	b14b      	cbz	r3, 8009bce <__ascii_mbtowc+0x1e>
 8009bba:	7813      	ldrb	r3, [r2, #0]
 8009bbc:	600b      	str	r3, [r1, #0]
 8009bbe:	7812      	ldrb	r2, [r2, #0]
 8009bc0:	1e10      	subs	r0, r2, #0
 8009bc2:	bf18      	it	ne
 8009bc4:	2001      	movne	r0, #1
 8009bc6:	b002      	add	sp, #8
 8009bc8:	4770      	bx	lr
 8009bca:	4610      	mov	r0, r2
 8009bcc:	e7fb      	b.n	8009bc6 <__ascii_mbtowc+0x16>
 8009bce:	f06f 0001 	mvn.w	r0, #1
 8009bd2:	e7f8      	b.n	8009bc6 <__ascii_mbtowc+0x16>

08009bd4 <memchr>:
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	b2c9      	uxtb	r1, r1
 8009bda:	4402      	add	r2, r0
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	4618      	mov	r0, r3
 8009be0:	d101      	bne.n	8009be6 <memchr+0x12>
 8009be2:	2000      	movs	r0, #0
 8009be4:	e003      	b.n	8009bee <memchr+0x1a>
 8009be6:	7804      	ldrb	r4, [r0, #0]
 8009be8:	3301      	adds	r3, #1
 8009bea:	428c      	cmp	r4, r1
 8009bec:	d1f6      	bne.n	8009bdc <memchr+0x8>
 8009bee:	bd10      	pop	{r4, pc}

08009bf0 <_Balloc>:
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	460d      	mov	r5, r1
 8009bf8:	b976      	cbnz	r6, 8009c18 <_Balloc+0x28>
 8009bfa:	2010      	movs	r0, #16
 8009bfc:	f7ff ffd0 	bl	8009ba0 <malloc>
 8009c00:	4602      	mov	r2, r0
 8009c02:	6260      	str	r0, [r4, #36]	; 0x24
 8009c04:	b920      	cbnz	r0, 8009c10 <_Balloc+0x20>
 8009c06:	2166      	movs	r1, #102	; 0x66
 8009c08:	4b17      	ldr	r3, [pc, #92]	; (8009c68 <_Balloc+0x78>)
 8009c0a:	4818      	ldr	r0, [pc, #96]	; (8009c6c <_Balloc+0x7c>)
 8009c0c:	f000 ff18 	bl	800aa40 <__assert_func>
 8009c10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c14:	6006      	str	r6, [r0, #0]
 8009c16:	60c6      	str	r6, [r0, #12]
 8009c18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c1a:	68f3      	ldr	r3, [r6, #12]
 8009c1c:	b183      	cbz	r3, 8009c40 <_Balloc+0x50>
 8009c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c26:	b9b8      	cbnz	r0, 8009c58 <_Balloc+0x68>
 8009c28:	2101      	movs	r1, #1
 8009c2a:	fa01 f605 	lsl.w	r6, r1, r5
 8009c2e:	1d72      	adds	r2, r6, #5
 8009c30:	4620      	mov	r0, r4
 8009c32:	0092      	lsls	r2, r2, #2
 8009c34:	f000 fc94 	bl	800a560 <_calloc_r>
 8009c38:	b160      	cbz	r0, 8009c54 <_Balloc+0x64>
 8009c3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c3e:	e00e      	b.n	8009c5e <_Balloc+0x6e>
 8009c40:	2221      	movs	r2, #33	; 0x21
 8009c42:	2104      	movs	r1, #4
 8009c44:	4620      	mov	r0, r4
 8009c46:	f000 fc8b 	bl	800a560 <_calloc_r>
 8009c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c4c:	60f0      	str	r0, [r6, #12]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1e4      	bne.n	8009c1e <_Balloc+0x2e>
 8009c54:	2000      	movs	r0, #0
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
 8009c58:	6802      	ldr	r2, [r0, #0]
 8009c5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c64:	e7f7      	b.n	8009c56 <_Balloc+0x66>
 8009c66:	bf00      	nop
 8009c68:	0800b83d 	.word	0x0800b83d
 8009c6c:	0800b93c 	.word	0x0800b93c

08009c70 <_Bfree>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c74:	4605      	mov	r5, r0
 8009c76:	460c      	mov	r4, r1
 8009c78:	b976      	cbnz	r6, 8009c98 <_Bfree+0x28>
 8009c7a:	2010      	movs	r0, #16
 8009c7c:	f7ff ff90 	bl	8009ba0 <malloc>
 8009c80:	4602      	mov	r2, r0
 8009c82:	6268      	str	r0, [r5, #36]	; 0x24
 8009c84:	b920      	cbnz	r0, 8009c90 <_Bfree+0x20>
 8009c86:	218a      	movs	r1, #138	; 0x8a
 8009c88:	4b08      	ldr	r3, [pc, #32]	; (8009cac <_Bfree+0x3c>)
 8009c8a:	4809      	ldr	r0, [pc, #36]	; (8009cb0 <_Bfree+0x40>)
 8009c8c:	f000 fed8 	bl	800aa40 <__assert_func>
 8009c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c94:	6006      	str	r6, [r0, #0]
 8009c96:	60c6      	str	r6, [r0, #12]
 8009c98:	b13c      	cbz	r4, 8009caa <_Bfree+0x3a>
 8009c9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c9c:	6862      	ldr	r2, [r4, #4]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ca4:	6021      	str	r1, [r4, #0]
 8009ca6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	0800b83d 	.word	0x0800b83d
 8009cb0:	0800b93c 	.word	0x0800b93c

08009cb4 <__multadd>:
 8009cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb8:	4607      	mov	r7, r0
 8009cba:	460c      	mov	r4, r1
 8009cbc:	461e      	mov	r6, r3
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	690d      	ldr	r5, [r1, #16]
 8009cc2:	f101 0c14 	add.w	ip, r1, #20
 8009cc6:	f8dc 3000 	ldr.w	r3, [ip]
 8009cca:	3001      	adds	r0, #1
 8009ccc:	b299      	uxth	r1, r3
 8009cce:	fb02 6101 	mla	r1, r2, r1, r6
 8009cd2:	0c1e      	lsrs	r6, r3, #16
 8009cd4:	0c0b      	lsrs	r3, r1, #16
 8009cd6:	fb02 3306 	mla	r3, r2, r6, r3
 8009cda:	b289      	uxth	r1, r1
 8009cdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ce0:	4285      	cmp	r5, r0
 8009ce2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ce6:	f84c 1b04 	str.w	r1, [ip], #4
 8009cea:	dcec      	bgt.n	8009cc6 <__multadd+0x12>
 8009cec:	b30e      	cbz	r6, 8009d32 <__multadd+0x7e>
 8009cee:	68a3      	ldr	r3, [r4, #8]
 8009cf0:	42ab      	cmp	r3, r5
 8009cf2:	dc19      	bgt.n	8009d28 <__multadd+0x74>
 8009cf4:	6861      	ldr	r1, [r4, #4]
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	3101      	adds	r1, #1
 8009cfa:	f7ff ff79 	bl	8009bf0 <_Balloc>
 8009cfe:	4680      	mov	r8, r0
 8009d00:	b928      	cbnz	r0, 8009d0e <__multadd+0x5a>
 8009d02:	4602      	mov	r2, r0
 8009d04:	21b5      	movs	r1, #181	; 0xb5
 8009d06:	4b0c      	ldr	r3, [pc, #48]	; (8009d38 <__multadd+0x84>)
 8009d08:	480c      	ldr	r0, [pc, #48]	; (8009d3c <__multadd+0x88>)
 8009d0a:	f000 fe99 	bl	800aa40 <__assert_func>
 8009d0e:	6922      	ldr	r2, [r4, #16]
 8009d10:	f104 010c 	add.w	r1, r4, #12
 8009d14:	3202      	adds	r2, #2
 8009d16:	0092      	lsls	r2, r2, #2
 8009d18:	300c      	adds	r0, #12
 8009d1a:	f7fd fa91 	bl	8007240 <memcpy>
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4638      	mov	r0, r7
 8009d22:	f7ff ffa5 	bl	8009c70 <_Bfree>
 8009d26:	4644      	mov	r4, r8
 8009d28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d2c:	3501      	adds	r5, #1
 8009d2e:	615e      	str	r6, [r3, #20]
 8009d30:	6125      	str	r5, [r4, #16]
 8009d32:	4620      	mov	r0, r4
 8009d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d38:	0800b8af 	.word	0x0800b8af
 8009d3c:	0800b93c 	.word	0x0800b93c

08009d40 <__s2b>:
 8009d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d44:	4615      	mov	r5, r2
 8009d46:	2209      	movs	r2, #9
 8009d48:	461f      	mov	r7, r3
 8009d4a:	3308      	adds	r3, #8
 8009d4c:	460c      	mov	r4, r1
 8009d4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d52:	4606      	mov	r6, r0
 8009d54:	2201      	movs	r2, #1
 8009d56:	2100      	movs	r1, #0
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	db09      	blt.n	8009d70 <__s2b+0x30>
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f7ff ff47 	bl	8009bf0 <_Balloc>
 8009d62:	b940      	cbnz	r0, 8009d76 <__s2b+0x36>
 8009d64:	4602      	mov	r2, r0
 8009d66:	21ce      	movs	r1, #206	; 0xce
 8009d68:	4b18      	ldr	r3, [pc, #96]	; (8009dcc <__s2b+0x8c>)
 8009d6a:	4819      	ldr	r0, [pc, #100]	; (8009dd0 <__s2b+0x90>)
 8009d6c:	f000 fe68 	bl	800aa40 <__assert_func>
 8009d70:	0052      	lsls	r2, r2, #1
 8009d72:	3101      	adds	r1, #1
 8009d74:	e7f0      	b.n	8009d58 <__s2b+0x18>
 8009d76:	9b08      	ldr	r3, [sp, #32]
 8009d78:	2d09      	cmp	r5, #9
 8009d7a:	6143      	str	r3, [r0, #20]
 8009d7c:	f04f 0301 	mov.w	r3, #1
 8009d80:	6103      	str	r3, [r0, #16]
 8009d82:	dd16      	ble.n	8009db2 <__s2b+0x72>
 8009d84:	f104 0909 	add.w	r9, r4, #9
 8009d88:	46c8      	mov	r8, r9
 8009d8a:	442c      	add	r4, r5
 8009d8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009d90:	4601      	mov	r1, r0
 8009d92:	220a      	movs	r2, #10
 8009d94:	4630      	mov	r0, r6
 8009d96:	3b30      	subs	r3, #48	; 0x30
 8009d98:	f7ff ff8c 	bl	8009cb4 <__multadd>
 8009d9c:	45a0      	cmp	r8, r4
 8009d9e:	d1f5      	bne.n	8009d8c <__s2b+0x4c>
 8009da0:	f1a5 0408 	sub.w	r4, r5, #8
 8009da4:	444c      	add	r4, r9
 8009da6:	1b2d      	subs	r5, r5, r4
 8009da8:	1963      	adds	r3, r4, r5
 8009daa:	42bb      	cmp	r3, r7
 8009dac:	db04      	blt.n	8009db8 <__s2b+0x78>
 8009dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009db2:	2509      	movs	r5, #9
 8009db4:	340a      	adds	r4, #10
 8009db6:	e7f6      	b.n	8009da6 <__s2b+0x66>
 8009db8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009dbc:	4601      	mov	r1, r0
 8009dbe:	220a      	movs	r2, #10
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	3b30      	subs	r3, #48	; 0x30
 8009dc4:	f7ff ff76 	bl	8009cb4 <__multadd>
 8009dc8:	e7ee      	b.n	8009da8 <__s2b+0x68>
 8009dca:	bf00      	nop
 8009dcc:	0800b8af 	.word	0x0800b8af
 8009dd0:	0800b93c 	.word	0x0800b93c

08009dd4 <__hi0bits>:
 8009dd4:	0c02      	lsrs	r2, r0, #16
 8009dd6:	0412      	lsls	r2, r2, #16
 8009dd8:	4603      	mov	r3, r0
 8009dda:	b9ca      	cbnz	r2, 8009e10 <__hi0bits+0x3c>
 8009ddc:	0403      	lsls	r3, r0, #16
 8009dde:	2010      	movs	r0, #16
 8009de0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009de4:	bf04      	itt	eq
 8009de6:	021b      	lsleq	r3, r3, #8
 8009de8:	3008      	addeq	r0, #8
 8009dea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009dee:	bf04      	itt	eq
 8009df0:	011b      	lsleq	r3, r3, #4
 8009df2:	3004      	addeq	r0, #4
 8009df4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009df8:	bf04      	itt	eq
 8009dfa:	009b      	lsleq	r3, r3, #2
 8009dfc:	3002      	addeq	r0, #2
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	db05      	blt.n	8009e0e <__hi0bits+0x3a>
 8009e02:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009e06:	f100 0001 	add.w	r0, r0, #1
 8009e0a:	bf08      	it	eq
 8009e0c:	2020      	moveq	r0, #32
 8009e0e:	4770      	bx	lr
 8009e10:	2000      	movs	r0, #0
 8009e12:	e7e5      	b.n	8009de0 <__hi0bits+0xc>

08009e14 <__lo0bits>:
 8009e14:	6803      	ldr	r3, [r0, #0]
 8009e16:	4602      	mov	r2, r0
 8009e18:	f013 0007 	ands.w	r0, r3, #7
 8009e1c:	d00b      	beq.n	8009e36 <__lo0bits+0x22>
 8009e1e:	07d9      	lsls	r1, r3, #31
 8009e20:	d421      	bmi.n	8009e66 <__lo0bits+0x52>
 8009e22:	0798      	lsls	r0, r3, #30
 8009e24:	bf49      	itett	mi
 8009e26:	085b      	lsrmi	r3, r3, #1
 8009e28:	089b      	lsrpl	r3, r3, #2
 8009e2a:	2001      	movmi	r0, #1
 8009e2c:	6013      	strmi	r3, [r2, #0]
 8009e2e:	bf5c      	itt	pl
 8009e30:	2002      	movpl	r0, #2
 8009e32:	6013      	strpl	r3, [r2, #0]
 8009e34:	4770      	bx	lr
 8009e36:	b299      	uxth	r1, r3
 8009e38:	b909      	cbnz	r1, 8009e3e <__lo0bits+0x2a>
 8009e3a:	2010      	movs	r0, #16
 8009e3c:	0c1b      	lsrs	r3, r3, #16
 8009e3e:	b2d9      	uxtb	r1, r3
 8009e40:	b909      	cbnz	r1, 8009e46 <__lo0bits+0x32>
 8009e42:	3008      	adds	r0, #8
 8009e44:	0a1b      	lsrs	r3, r3, #8
 8009e46:	0719      	lsls	r1, r3, #28
 8009e48:	bf04      	itt	eq
 8009e4a:	091b      	lsreq	r3, r3, #4
 8009e4c:	3004      	addeq	r0, #4
 8009e4e:	0799      	lsls	r1, r3, #30
 8009e50:	bf04      	itt	eq
 8009e52:	089b      	lsreq	r3, r3, #2
 8009e54:	3002      	addeq	r0, #2
 8009e56:	07d9      	lsls	r1, r3, #31
 8009e58:	d403      	bmi.n	8009e62 <__lo0bits+0x4e>
 8009e5a:	085b      	lsrs	r3, r3, #1
 8009e5c:	f100 0001 	add.w	r0, r0, #1
 8009e60:	d003      	beq.n	8009e6a <__lo0bits+0x56>
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	4770      	bx	lr
 8009e66:	2000      	movs	r0, #0
 8009e68:	4770      	bx	lr
 8009e6a:	2020      	movs	r0, #32
 8009e6c:	4770      	bx	lr
	...

08009e70 <__i2b>:
 8009e70:	b510      	push	{r4, lr}
 8009e72:	460c      	mov	r4, r1
 8009e74:	2101      	movs	r1, #1
 8009e76:	f7ff febb 	bl	8009bf0 <_Balloc>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	b928      	cbnz	r0, 8009e8a <__i2b+0x1a>
 8009e7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e82:	4b04      	ldr	r3, [pc, #16]	; (8009e94 <__i2b+0x24>)
 8009e84:	4804      	ldr	r0, [pc, #16]	; (8009e98 <__i2b+0x28>)
 8009e86:	f000 fddb 	bl	800aa40 <__assert_func>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	6144      	str	r4, [r0, #20]
 8009e8e:	6103      	str	r3, [r0, #16]
 8009e90:	bd10      	pop	{r4, pc}
 8009e92:	bf00      	nop
 8009e94:	0800b8af 	.word	0x0800b8af
 8009e98:	0800b93c 	.word	0x0800b93c

08009e9c <__multiply>:
 8009e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	4691      	mov	r9, r2
 8009ea2:	690a      	ldr	r2, [r1, #16]
 8009ea4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	bfbe      	ittt	lt
 8009eae:	460b      	movlt	r3, r1
 8009eb0:	464c      	movlt	r4, r9
 8009eb2:	4699      	movlt	r9, r3
 8009eb4:	6927      	ldr	r7, [r4, #16]
 8009eb6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009eba:	68a3      	ldr	r3, [r4, #8]
 8009ebc:	6861      	ldr	r1, [r4, #4]
 8009ebe:	eb07 060a 	add.w	r6, r7, sl
 8009ec2:	42b3      	cmp	r3, r6
 8009ec4:	b085      	sub	sp, #20
 8009ec6:	bfb8      	it	lt
 8009ec8:	3101      	addlt	r1, #1
 8009eca:	f7ff fe91 	bl	8009bf0 <_Balloc>
 8009ece:	b930      	cbnz	r0, 8009ede <__multiply+0x42>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	f240 115d 	movw	r1, #349	; 0x15d
 8009ed6:	4b43      	ldr	r3, [pc, #268]	; (8009fe4 <__multiply+0x148>)
 8009ed8:	4843      	ldr	r0, [pc, #268]	; (8009fe8 <__multiply+0x14c>)
 8009eda:	f000 fdb1 	bl	800aa40 <__assert_func>
 8009ede:	f100 0514 	add.w	r5, r0, #20
 8009ee2:	462b      	mov	r3, r5
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009eea:	4543      	cmp	r3, r8
 8009eec:	d321      	bcc.n	8009f32 <__multiply+0x96>
 8009eee:	f104 0314 	add.w	r3, r4, #20
 8009ef2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ef6:	f109 0314 	add.w	r3, r9, #20
 8009efa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009efe:	9202      	str	r2, [sp, #8]
 8009f00:	1b3a      	subs	r2, r7, r4
 8009f02:	3a15      	subs	r2, #21
 8009f04:	f022 0203 	bic.w	r2, r2, #3
 8009f08:	3204      	adds	r2, #4
 8009f0a:	f104 0115 	add.w	r1, r4, #21
 8009f0e:	428f      	cmp	r7, r1
 8009f10:	bf38      	it	cc
 8009f12:	2204      	movcc	r2, #4
 8009f14:	9201      	str	r2, [sp, #4]
 8009f16:	9a02      	ldr	r2, [sp, #8]
 8009f18:	9303      	str	r3, [sp, #12]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d80c      	bhi.n	8009f38 <__multiply+0x9c>
 8009f1e:	2e00      	cmp	r6, #0
 8009f20:	dd03      	ble.n	8009f2a <__multiply+0x8e>
 8009f22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d059      	beq.n	8009fde <__multiply+0x142>
 8009f2a:	6106      	str	r6, [r0, #16]
 8009f2c:	b005      	add	sp, #20
 8009f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f32:	f843 2b04 	str.w	r2, [r3], #4
 8009f36:	e7d8      	b.n	8009eea <__multiply+0x4e>
 8009f38:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f3c:	f1ba 0f00 	cmp.w	sl, #0
 8009f40:	d023      	beq.n	8009f8a <__multiply+0xee>
 8009f42:	46a9      	mov	r9, r5
 8009f44:	f04f 0c00 	mov.w	ip, #0
 8009f48:	f104 0e14 	add.w	lr, r4, #20
 8009f4c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f50:	f8d9 1000 	ldr.w	r1, [r9]
 8009f54:	fa1f fb82 	uxth.w	fp, r2
 8009f58:	b289      	uxth	r1, r1
 8009f5a:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f5e:	4461      	add	r1, ip
 8009f60:	f8d9 c000 	ldr.w	ip, [r9]
 8009f64:	0c12      	lsrs	r2, r2, #16
 8009f66:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009f6a:	fb0a c202 	mla	r2, sl, r2, ip
 8009f6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f72:	b289      	uxth	r1, r1
 8009f74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f78:	4577      	cmp	r7, lr
 8009f7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f7e:	f849 1b04 	str.w	r1, [r9], #4
 8009f82:	d8e3      	bhi.n	8009f4c <__multiply+0xb0>
 8009f84:	9a01      	ldr	r2, [sp, #4]
 8009f86:	f845 c002 	str.w	ip, [r5, r2]
 8009f8a:	9a03      	ldr	r2, [sp, #12]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f92:	f1b9 0f00 	cmp.w	r9, #0
 8009f96:	d020      	beq.n	8009fda <__multiply+0x13e>
 8009f98:	46ae      	mov	lr, r5
 8009f9a:	f04f 0a00 	mov.w	sl, #0
 8009f9e:	6829      	ldr	r1, [r5, #0]
 8009fa0:	f104 0c14 	add.w	ip, r4, #20
 8009fa4:	f8bc b000 	ldrh.w	fp, [ip]
 8009fa8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009fac:	b289      	uxth	r1, r1
 8009fae:	fb09 220b 	mla	r2, r9, fp, r2
 8009fb2:	4492      	add	sl, r2
 8009fb4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009fb8:	f84e 1b04 	str.w	r1, [lr], #4
 8009fbc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009fc0:	f8be 1000 	ldrh.w	r1, [lr]
 8009fc4:	0c12      	lsrs	r2, r2, #16
 8009fc6:	fb09 1102 	mla	r1, r9, r2, r1
 8009fca:	4567      	cmp	r7, ip
 8009fcc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009fd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fd4:	d8e6      	bhi.n	8009fa4 <__multiply+0x108>
 8009fd6:	9a01      	ldr	r2, [sp, #4]
 8009fd8:	50a9      	str	r1, [r5, r2]
 8009fda:	3504      	adds	r5, #4
 8009fdc:	e79b      	b.n	8009f16 <__multiply+0x7a>
 8009fde:	3e01      	subs	r6, #1
 8009fe0:	e79d      	b.n	8009f1e <__multiply+0x82>
 8009fe2:	bf00      	nop
 8009fe4:	0800b8af 	.word	0x0800b8af
 8009fe8:	0800b93c 	.word	0x0800b93c

08009fec <__pow5mult>:
 8009fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff0:	4615      	mov	r5, r2
 8009ff2:	f012 0203 	ands.w	r2, r2, #3
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	460f      	mov	r7, r1
 8009ffa:	d007      	beq.n	800a00c <__pow5mult+0x20>
 8009ffc:	4c25      	ldr	r4, [pc, #148]	; (800a094 <__pow5mult+0xa8>)
 8009ffe:	3a01      	subs	r2, #1
 800a000:	2300      	movs	r3, #0
 800a002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a006:	f7ff fe55 	bl	8009cb4 <__multadd>
 800a00a:	4607      	mov	r7, r0
 800a00c:	10ad      	asrs	r5, r5, #2
 800a00e:	d03d      	beq.n	800a08c <__pow5mult+0xa0>
 800a010:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a012:	b97c      	cbnz	r4, 800a034 <__pow5mult+0x48>
 800a014:	2010      	movs	r0, #16
 800a016:	f7ff fdc3 	bl	8009ba0 <malloc>
 800a01a:	4602      	mov	r2, r0
 800a01c:	6270      	str	r0, [r6, #36]	; 0x24
 800a01e:	b928      	cbnz	r0, 800a02c <__pow5mult+0x40>
 800a020:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a024:	4b1c      	ldr	r3, [pc, #112]	; (800a098 <__pow5mult+0xac>)
 800a026:	481d      	ldr	r0, [pc, #116]	; (800a09c <__pow5mult+0xb0>)
 800a028:	f000 fd0a 	bl	800aa40 <__assert_func>
 800a02c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a030:	6004      	str	r4, [r0, #0]
 800a032:	60c4      	str	r4, [r0, #12]
 800a034:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a03c:	b94c      	cbnz	r4, 800a052 <__pow5mult+0x66>
 800a03e:	f240 2171 	movw	r1, #625	; 0x271
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff ff14 	bl	8009e70 <__i2b>
 800a048:	2300      	movs	r3, #0
 800a04a:	4604      	mov	r4, r0
 800a04c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a050:	6003      	str	r3, [r0, #0]
 800a052:	f04f 0900 	mov.w	r9, #0
 800a056:	07eb      	lsls	r3, r5, #31
 800a058:	d50a      	bpl.n	800a070 <__pow5mult+0x84>
 800a05a:	4639      	mov	r1, r7
 800a05c:	4622      	mov	r2, r4
 800a05e:	4630      	mov	r0, r6
 800a060:	f7ff ff1c 	bl	8009e9c <__multiply>
 800a064:	4680      	mov	r8, r0
 800a066:	4639      	mov	r1, r7
 800a068:	4630      	mov	r0, r6
 800a06a:	f7ff fe01 	bl	8009c70 <_Bfree>
 800a06e:	4647      	mov	r7, r8
 800a070:	106d      	asrs	r5, r5, #1
 800a072:	d00b      	beq.n	800a08c <__pow5mult+0xa0>
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	b938      	cbnz	r0, 800a088 <__pow5mult+0x9c>
 800a078:	4622      	mov	r2, r4
 800a07a:	4621      	mov	r1, r4
 800a07c:	4630      	mov	r0, r6
 800a07e:	f7ff ff0d 	bl	8009e9c <__multiply>
 800a082:	6020      	str	r0, [r4, #0]
 800a084:	f8c0 9000 	str.w	r9, [r0]
 800a088:	4604      	mov	r4, r0
 800a08a:	e7e4      	b.n	800a056 <__pow5mult+0x6a>
 800a08c:	4638      	mov	r0, r7
 800a08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a092:	bf00      	nop
 800a094:	0800ba88 	.word	0x0800ba88
 800a098:	0800b83d 	.word	0x0800b83d
 800a09c:	0800b93c 	.word	0x0800b93c

0800a0a0 <__lshift>:
 800a0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	4607      	mov	r7, r0
 800a0a8:	4691      	mov	r9, r2
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	6849      	ldr	r1, [r1, #4]
 800a0ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0b2:	68a3      	ldr	r3, [r4, #8]
 800a0b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0b8:	f108 0601 	add.w	r6, r8, #1
 800a0bc:	42b3      	cmp	r3, r6
 800a0be:	db0b      	blt.n	800a0d8 <__lshift+0x38>
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7ff fd95 	bl	8009bf0 <_Balloc>
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	b948      	cbnz	r0, 800a0de <__lshift+0x3e>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a0d0:	4b29      	ldr	r3, [pc, #164]	; (800a178 <__lshift+0xd8>)
 800a0d2:	482a      	ldr	r0, [pc, #168]	; (800a17c <__lshift+0xdc>)
 800a0d4:	f000 fcb4 	bl	800aa40 <__assert_func>
 800a0d8:	3101      	adds	r1, #1
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	e7ee      	b.n	800a0bc <__lshift+0x1c>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f100 0114 	add.w	r1, r0, #20
 800a0e4:	f100 0210 	add.w	r2, r0, #16
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	4553      	cmp	r3, sl
 800a0ec:	db37      	blt.n	800a15e <__lshift+0xbe>
 800a0ee:	6920      	ldr	r0, [r4, #16]
 800a0f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0f4:	f104 0314 	add.w	r3, r4, #20
 800a0f8:	f019 091f 	ands.w	r9, r9, #31
 800a0fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a100:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a104:	d02f      	beq.n	800a166 <__lshift+0xc6>
 800a106:	468a      	mov	sl, r1
 800a108:	f04f 0c00 	mov.w	ip, #0
 800a10c:	f1c9 0e20 	rsb	lr, r9, #32
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	fa02 f209 	lsl.w	r2, r2, r9
 800a116:	ea42 020c 	orr.w	r2, r2, ip
 800a11a:	f84a 2b04 	str.w	r2, [sl], #4
 800a11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a122:	4298      	cmp	r0, r3
 800a124:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a128:	d8f2      	bhi.n	800a110 <__lshift+0x70>
 800a12a:	1b03      	subs	r3, r0, r4
 800a12c:	3b15      	subs	r3, #21
 800a12e:	f023 0303 	bic.w	r3, r3, #3
 800a132:	3304      	adds	r3, #4
 800a134:	f104 0215 	add.w	r2, r4, #21
 800a138:	4290      	cmp	r0, r2
 800a13a:	bf38      	it	cc
 800a13c:	2304      	movcc	r3, #4
 800a13e:	f841 c003 	str.w	ip, [r1, r3]
 800a142:	f1bc 0f00 	cmp.w	ip, #0
 800a146:	d001      	beq.n	800a14c <__lshift+0xac>
 800a148:	f108 0602 	add.w	r6, r8, #2
 800a14c:	3e01      	subs	r6, #1
 800a14e:	4638      	mov	r0, r7
 800a150:	4621      	mov	r1, r4
 800a152:	612e      	str	r6, [r5, #16]
 800a154:	f7ff fd8c 	bl	8009c70 <_Bfree>
 800a158:	4628      	mov	r0, r5
 800a15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a162:	3301      	adds	r3, #1
 800a164:	e7c1      	b.n	800a0ea <__lshift+0x4a>
 800a166:	3904      	subs	r1, #4
 800a168:	f853 2b04 	ldr.w	r2, [r3], #4
 800a16c:	4298      	cmp	r0, r3
 800a16e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a172:	d8f9      	bhi.n	800a168 <__lshift+0xc8>
 800a174:	e7ea      	b.n	800a14c <__lshift+0xac>
 800a176:	bf00      	nop
 800a178:	0800b8af 	.word	0x0800b8af
 800a17c:	0800b93c 	.word	0x0800b93c

0800a180 <__mcmp>:
 800a180:	4603      	mov	r3, r0
 800a182:	690a      	ldr	r2, [r1, #16]
 800a184:	6900      	ldr	r0, [r0, #16]
 800a186:	b530      	push	{r4, r5, lr}
 800a188:	1a80      	subs	r0, r0, r2
 800a18a:	d10d      	bne.n	800a1a8 <__mcmp+0x28>
 800a18c:	3314      	adds	r3, #20
 800a18e:	3114      	adds	r1, #20
 800a190:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a194:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a198:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a19c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a1a0:	4295      	cmp	r5, r2
 800a1a2:	d002      	beq.n	800a1aa <__mcmp+0x2a>
 800a1a4:	d304      	bcc.n	800a1b0 <__mcmp+0x30>
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	bd30      	pop	{r4, r5, pc}
 800a1aa:	42a3      	cmp	r3, r4
 800a1ac:	d3f4      	bcc.n	800a198 <__mcmp+0x18>
 800a1ae:	e7fb      	b.n	800a1a8 <__mcmp+0x28>
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b4:	e7f8      	b.n	800a1a8 <__mcmp+0x28>
	...

0800a1b8 <__mdiff>:
 800a1b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	460d      	mov	r5, r1
 800a1be:	4607      	mov	r7, r0
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	4614      	mov	r4, r2
 800a1c6:	f7ff ffdb 	bl	800a180 <__mcmp>
 800a1ca:	1e06      	subs	r6, r0, #0
 800a1cc:	d111      	bne.n	800a1f2 <__mdiff+0x3a>
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	f7ff fd0d 	bl	8009bf0 <_Balloc>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	b928      	cbnz	r0, 800a1e6 <__mdiff+0x2e>
 800a1da:	f240 2132 	movw	r1, #562	; 0x232
 800a1de:	4b3a      	ldr	r3, [pc, #232]	; (800a2c8 <__mdiff+0x110>)
 800a1e0:	483a      	ldr	r0, [pc, #232]	; (800a2cc <__mdiff+0x114>)
 800a1e2:	f000 fc2d 	bl	800aa40 <__assert_func>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f2:	bfa4      	itt	ge
 800a1f4:	4623      	movge	r3, r4
 800a1f6:	462c      	movge	r4, r5
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	6861      	ldr	r1, [r4, #4]
 800a1fc:	bfa6      	itte	ge
 800a1fe:	461d      	movge	r5, r3
 800a200:	2600      	movge	r6, #0
 800a202:	2601      	movlt	r6, #1
 800a204:	f7ff fcf4 	bl	8009bf0 <_Balloc>
 800a208:	4602      	mov	r2, r0
 800a20a:	b918      	cbnz	r0, 800a214 <__mdiff+0x5c>
 800a20c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a210:	4b2d      	ldr	r3, [pc, #180]	; (800a2c8 <__mdiff+0x110>)
 800a212:	e7e5      	b.n	800a1e0 <__mdiff+0x28>
 800a214:	f102 0814 	add.w	r8, r2, #20
 800a218:	46c2      	mov	sl, r8
 800a21a:	f04f 0c00 	mov.w	ip, #0
 800a21e:	6927      	ldr	r7, [r4, #16]
 800a220:	60c6      	str	r6, [r0, #12]
 800a222:	692e      	ldr	r6, [r5, #16]
 800a224:	f104 0014 	add.w	r0, r4, #20
 800a228:	f105 0914 	add.w	r9, r5, #20
 800a22c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a230:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a234:	3410      	adds	r4, #16
 800a236:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a23a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a23e:	fa1f f18b 	uxth.w	r1, fp
 800a242:	448c      	add	ip, r1
 800a244:	b299      	uxth	r1, r3
 800a246:	0c1b      	lsrs	r3, r3, #16
 800a248:	ebac 0101 	sub.w	r1, ip, r1
 800a24c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a250:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a254:	b289      	uxth	r1, r1
 800a256:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a25a:	454e      	cmp	r6, r9
 800a25c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a260:	f84a 3b04 	str.w	r3, [sl], #4
 800a264:	d8e7      	bhi.n	800a236 <__mdiff+0x7e>
 800a266:	1b73      	subs	r3, r6, r5
 800a268:	3b15      	subs	r3, #21
 800a26a:	f023 0303 	bic.w	r3, r3, #3
 800a26e:	3515      	adds	r5, #21
 800a270:	3304      	adds	r3, #4
 800a272:	42ae      	cmp	r6, r5
 800a274:	bf38      	it	cc
 800a276:	2304      	movcc	r3, #4
 800a278:	4418      	add	r0, r3
 800a27a:	4443      	add	r3, r8
 800a27c:	461e      	mov	r6, r3
 800a27e:	4605      	mov	r5, r0
 800a280:	4575      	cmp	r5, lr
 800a282:	d30e      	bcc.n	800a2a2 <__mdiff+0xea>
 800a284:	f10e 0103 	add.w	r1, lr, #3
 800a288:	1a09      	subs	r1, r1, r0
 800a28a:	f021 0103 	bic.w	r1, r1, #3
 800a28e:	3803      	subs	r0, #3
 800a290:	4586      	cmp	lr, r0
 800a292:	bf38      	it	cc
 800a294:	2100      	movcc	r1, #0
 800a296:	4419      	add	r1, r3
 800a298:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a29c:	b18b      	cbz	r3, 800a2c2 <__mdiff+0x10a>
 800a29e:	6117      	str	r7, [r2, #16]
 800a2a0:	e7a4      	b.n	800a1ec <__mdiff+0x34>
 800a2a2:	f855 8b04 	ldr.w	r8, [r5], #4
 800a2a6:	fa1f f188 	uxth.w	r1, r8
 800a2aa:	4461      	add	r1, ip
 800a2ac:	140c      	asrs	r4, r1, #16
 800a2ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a2b2:	b289      	uxth	r1, r1
 800a2b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a2b8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a2bc:	f846 1b04 	str.w	r1, [r6], #4
 800a2c0:	e7de      	b.n	800a280 <__mdiff+0xc8>
 800a2c2:	3f01      	subs	r7, #1
 800a2c4:	e7e8      	b.n	800a298 <__mdiff+0xe0>
 800a2c6:	bf00      	nop
 800a2c8:	0800b8af 	.word	0x0800b8af
 800a2cc:	0800b93c 	.word	0x0800b93c

0800a2d0 <__ulp>:
 800a2d0:	4b11      	ldr	r3, [pc, #68]	; (800a318 <__ulp+0x48>)
 800a2d2:	400b      	ands	r3, r1
 800a2d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	dd02      	ble.n	800a2e2 <__ulp+0x12>
 800a2dc:	2000      	movs	r0, #0
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4770      	bx	lr
 800a2e2:	425b      	negs	r3, r3
 800a2e4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a2e8:	f04f 0000 	mov.w	r0, #0
 800a2ec:	f04f 0100 	mov.w	r1, #0
 800a2f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a2f4:	da04      	bge.n	800a300 <__ulp+0x30>
 800a2f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a2fa:	fa43 f102 	asr.w	r1, r3, r2
 800a2fe:	4770      	bx	lr
 800a300:	f1a2 0314 	sub.w	r3, r2, #20
 800a304:	2b1e      	cmp	r3, #30
 800a306:	bfd6      	itet	le
 800a308:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a30c:	2301      	movgt	r3, #1
 800a30e:	fa22 f303 	lsrle.w	r3, r2, r3
 800a312:	4618      	mov	r0, r3
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	7ff00000 	.word	0x7ff00000

0800a31c <__b2d>:
 800a31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a320:	6907      	ldr	r7, [r0, #16]
 800a322:	f100 0914 	add.w	r9, r0, #20
 800a326:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a32a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a32e:	f1a7 0804 	sub.w	r8, r7, #4
 800a332:	4630      	mov	r0, r6
 800a334:	f7ff fd4e 	bl	8009dd4 <__hi0bits>
 800a338:	f1c0 0320 	rsb	r3, r0, #32
 800a33c:	280a      	cmp	r0, #10
 800a33e:	600b      	str	r3, [r1, #0]
 800a340:	491f      	ldr	r1, [pc, #124]	; (800a3c0 <__b2d+0xa4>)
 800a342:	dc17      	bgt.n	800a374 <__b2d+0x58>
 800a344:	45c1      	cmp	r9, r8
 800a346:	bf28      	it	cs
 800a348:	2200      	movcs	r2, #0
 800a34a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a34e:	fa26 f30c 	lsr.w	r3, r6, ip
 800a352:	bf38      	it	cc
 800a354:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a358:	ea43 0501 	orr.w	r5, r3, r1
 800a35c:	f100 0315 	add.w	r3, r0, #21
 800a360:	fa06 f303 	lsl.w	r3, r6, r3
 800a364:	fa22 f20c 	lsr.w	r2, r2, ip
 800a368:	ea43 0402 	orr.w	r4, r3, r2
 800a36c:	4620      	mov	r0, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a374:	45c1      	cmp	r9, r8
 800a376:	bf2e      	itee	cs
 800a378:	2200      	movcs	r2, #0
 800a37a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a37e:	f1a7 0808 	subcc.w	r8, r7, #8
 800a382:	f1b0 030b 	subs.w	r3, r0, #11
 800a386:	d016      	beq.n	800a3b6 <__b2d+0x9a>
 800a388:	f1c3 0720 	rsb	r7, r3, #32
 800a38c:	fa22 f107 	lsr.w	r1, r2, r7
 800a390:	45c8      	cmp	r8, r9
 800a392:	fa06 f603 	lsl.w	r6, r6, r3
 800a396:	ea46 0601 	orr.w	r6, r6, r1
 800a39a:	bf94      	ite	ls
 800a39c:	2100      	movls	r1, #0
 800a39e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a3a2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a3a6:	fa02 f003 	lsl.w	r0, r2, r3
 800a3aa:	40f9      	lsrs	r1, r7
 800a3ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a3b0:	ea40 0401 	orr.w	r4, r0, r1
 800a3b4:	e7da      	b.n	800a36c <__b2d+0x50>
 800a3b6:	4614      	mov	r4, r2
 800a3b8:	ea46 0501 	orr.w	r5, r6, r1
 800a3bc:	e7d6      	b.n	800a36c <__b2d+0x50>
 800a3be:	bf00      	nop
 800a3c0:	3ff00000 	.word	0x3ff00000

0800a3c4 <__d2b>:
 800a3c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a3c8:	2101      	movs	r1, #1
 800a3ca:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a3ce:	4690      	mov	r8, r2
 800a3d0:	461d      	mov	r5, r3
 800a3d2:	f7ff fc0d 	bl	8009bf0 <_Balloc>
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	b930      	cbnz	r0, 800a3e8 <__d2b+0x24>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	f240 310a 	movw	r1, #778	; 0x30a
 800a3e0:	4b24      	ldr	r3, [pc, #144]	; (800a474 <__d2b+0xb0>)
 800a3e2:	4825      	ldr	r0, [pc, #148]	; (800a478 <__d2b+0xb4>)
 800a3e4:	f000 fb2c 	bl	800aa40 <__assert_func>
 800a3e8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a3ec:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a3f0:	bb2d      	cbnz	r5, 800a43e <__d2b+0x7a>
 800a3f2:	9301      	str	r3, [sp, #4]
 800a3f4:	f1b8 0300 	subs.w	r3, r8, #0
 800a3f8:	d026      	beq.n	800a448 <__d2b+0x84>
 800a3fa:	4668      	mov	r0, sp
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	f7ff fd09 	bl	8009e14 <__lo0bits>
 800a402:	9900      	ldr	r1, [sp, #0]
 800a404:	b1f0      	cbz	r0, 800a444 <__d2b+0x80>
 800a406:	9a01      	ldr	r2, [sp, #4]
 800a408:	f1c0 0320 	rsb	r3, r0, #32
 800a40c:	fa02 f303 	lsl.w	r3, r2, r3
 800a410:	430b      	orrs	r3, r1
 800a412:	40c2      	lsrs	r2, r0
 800a414:	6163      	str	r3, [r4, #20]
 800a416:	9201      	str	r2, [sp, #4]
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	bf14      	ite	ne
 800a41e:	2102      	movne	r1, #2
 800a420:	2101      	moveq	r1, #1
 800a422:	61a3      	str	r3, [r4, #24]
 800a424:	6121      	str	r1, [r4, #16]
 800a426:	b1c5      	cbz	r5, 800a45a <__d2b+0x96>
 800a428:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a42c:	4405      	add	r5, r0
 800a42e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a432:	603d      	str	r5, [r7, #0]
 800a434:	6030      	str	r0, [r6, #0]
 800a436:	4620      	mov	r0, r4
 800a438:	b002      	add	sp, #8
 800a43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a43e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a442:	e7d6      	b.n	800a3f2 <__d2b+0x2e>
 800a444:	6161      	str	r1, [r4, #20]
 800a446:	e7e7      	b.n	800a418 <__d2b+0x54>
 800a448:	a801      	add	r0, sp, #4
 800a44a:	f7ff fce3 	bl	8009e14 <__lo0bits>
 800a44e:	2101      	movs	r1, #1
 800a450:	9b01      	ldr	r3, [sp, #4]
 800a452:	6121      	str	r1, [r4, #16]
 800a454:	6163      	str	r3, [r4, #20]
 800a456:	3020      	adds	r0, #32
 800a458:	e7e5      	b.n	800a426 <__d2b+0x62>
 800a45a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a45e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a462:	6038      	str	r0, [r7, #0]
 800a464:	6918      	ldr	r0, [r3, #16]
 800a466:	f7ff fcb5 	bl	8009dd4 <__hi0bits>
 800a46a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a46e:	6031      	str	r1, [r6, #0]
 800a470:	e7e1      	b.n	800a436 <__d2b+0x72>
 800a472:	bf00      	nop
 800a474:	0800b8af 	.word	0x0800b8af
 800a478:	0800b93c 	.word	0x0800b93c

0800a47c <__ratio>:
 800a47c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a480:	4688      	mov	r8, r1
 800a482:	4669      	mov	r1, sp
 800a484:	4681      	mov	r9, r0
 800a486:	f7ff ff49 	bl	800a31c <__b2d>
 800a48a:	460f      	mov	r7, r1
 800a48c:	4604      	mov	r4, r0
 800a48e:	460d      	mov	r5, r1
 800a490:	4640      	mov	r0, r8
 800a492:	a901      	add	r1, sp, #4
 800a494:	f7ff ff42 	bl	800a31c <__b2d>
 800a498:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a49c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a4a0:	468b      	mov	fp, r1
 800a4a2:	eba3 0c02 	sub.w	ip, r3, r2
 800a4a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a4aa:	1a9b      	subs	r3, r3, r2
 800a4ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bfd5      	itete	le
 800a4b4:	460a      	movle	r2, r1
 800a4b6:	462a      	movgt	r2, r5
 800a4b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a4bc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a4c0:	bfd8      	it	le
 800a4c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a4c6:	465b      	mov	r3, fp
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f7f6 f92d 	bl	800072c <__aeabi_ddiv>
 800a4d2:	b003      	add	sp, #12
 800a4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4d8 <__copybits>:
 800a4d8:	3901      	subs	r1, #1
 800a4da:	b570      	push	{r4, r5, r6, lr}
 800a4dc:	1149      	asrs	r1, r1, #5
 800a4de:	6914      	ldr	r4, [r2, #16]
 800a4e0:	3101      	adds	r1, #1
 800a4e2:	f102 0314 	add.w	r3, r2, #20
 800a4e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a4ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a4ee:	1f05      	subs	r5, r0, #4
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	d30c      	bcc.n	800a50e <__copybits+0x36>
 800a4f4:	1aa3      	subs	r3, r4, r2
 800a4f6:	3b11      	subs	r3, #17
 800a4f8:	f023 0303 	bic.w	r3, r3, #3
 800a4fc:	3211      	adds	r2, #17
 800a4fe:	42a2      	cmp	r2, r4
 800a500:	bf88      	it	hi
 800a502:	2300      	movhi	r3, #0
 800a504:	4418      	add	r0, r3
 800a506:	2300      	movs	r3, #0
 800a508:	4288      	cmp	r0, r1
 800a50a:	d305      	bcc.n	800a518 <__copybits+0x40>
 800a50c:	bd70      	pop	{r4, r5, r6, pc}
 800a50e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a512:	f845 6f04 	str.w	r6, [r5, #4]!
 800a516:	e7eb      	b.n	800a4f0 <__copybits+0x18>
 800a518:	f840 3b04 	str.w	r3, [r0], #4
 800a51c:	e7f4      	b.n	800a508 <__copybits+0x30>

0800a51e <__any_on>:
 800a51e:	f100 0214 	add.w	r2, r0, #20
 800a522:	6900      	ldr	r0, [r0, #16]
 800a524:	114b      	asrs	r3, r1, #5
 800a526:	4298      	cmp	r0, r3
 800a528:	b510      	push	{r4, lr}
 800a52a:	db11      	blt.n	800a550 <__any_on+0x32>
 800a52c:	dd0a      	ble.n	800a544 <__any_on+0x26>
 800a52e:	f011 011f 	ands.w	r1, r1, #31
 800a532:	d007      	beq.n	800a544 <__any_on+0x26>
 800a534:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a538:	fa24 f001 	lsr.w	r0, r4, r1
 800a53c:	fa00 f101 	lsl.w	r1, r0, r1
 800a540:	428c      	cmp	r4, r1
 800a542:	d10b      	bne.n	800a55c <__any_on+0x3e>
 800a544:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a548:	4293      	cmp	r3, r2
 800a54a:	d803      	bhi.n	800a554 <__any_on+0x36>
 800a54c:	2000      	movs	r0, #0
 800a54e:	bd10      	pop	{r4, pc}
 800a550:	4603      	mov	r3, r0
 800a552:	e7f7      	b.n	800a544 <__any_on+0x26>
 800a554:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a558:	2900      	cmp	r1, #0
 800a55a:	d0f5      	beq.n	800a548 <__any_on+0x2a>
 800a55c:	2001      	movs	r0, #1
 800a55e:	e7f6      	b.n	800a54e <__any_on+0x30>

0800a560 <_calloc_r>:
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	fba1 5402 	umull	r5, r4, r1, r2
 800a566:	b934      	cbnz	r4, 800a576 <_calloc_r+0x16>
 800a568:	4629      	mov	r1, r5
 800a56a:	f000 f875 	bl	800a658 <_malloc_r>
 800a56e:	4606      	mov	r6, r0
 800a570:	b928      	cbnz	r0, 800a57e <_calloc_r+0x1e>
 800a572:	4630      	mov	r0, r6
 800a574:	bd70      	pop	{r4, r5, r6, pc}
 800a576:	220c      	movs	r2, #12
 800a578:	2600      	movs	r6, #0
 800a57a:	6002      	str	r2, [r0, #0]
 800a57c:	e7f9      	b.n	800a572 <_calloc_r+0x12>
 800a57e:	462a      	mov	r2, r5
 800a580:	4621      	mov	r1, r4
 800a582:	f7fc fe6b 	bl	800725c <memset>
 800a586:	e7f4      	b.n	800a572 <_calloc_r+0x12>

0800a588 <_free_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4605      	mov	r5, r0
 800a58c:	2900      	cmp	r1, #0
 800a58e:	d040      	beq.n	800a612 <_free_r+0x8a>
 800a590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a594:	1f0c      	subs	r4, r1, #4
 800a596:	2b00      	cmp	r3, #0
 800a598:	bfb8      	it	lt
 800a59a:	18e4      	addlt	r4, r4, r3
 800a59c:	f000 fa9a 	bl	800aad4 <__malloc_lock>
 800a5a0:	4a1c      	ldr	r2, [pc, #112]	; (800a614 <_free_r+0x8c>)
 800a5a2:	6813      	ldr	r3, [r2, #0]
 800a5a4:	b933      	cbnz	r3, 800a5b4 <_free_r+0x2c>
 800a5a6:	6063      	str	r3, [r4, #4]
 800a5a8:	6014      	str	r4, [r2, #0]
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5b0:	f000 ba96 	b.w	800aae0 <__malloc_unlock>
 800a5b4:	42a3      	cmp	r3, r4
 800a5b6:	d908      	bls.n	800a5ca <_free_r+0x42>
 800a5b8:	6820      	ldr	r0, [r4, #0]
 800a5ba:	1821      	adds	r1, r4, r0
 800a5bc:	428b      	cmp	r3, r1
 800a5be:	bf01      	itttt	eq
 800a5c0:	6819      	ldreq	r1, [r3, #0]
 800a5c2:	685b      	ldreq	r3, [r3, #4]
 800a5c4:	1809      	addeq	r1, r1, r0
 800a5c6:	6021      	streq	r1, [r4, #0]
 800a5c8:	e7ed      	b.n	800a5a6 <_free_r+0x1e>
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	b10b      	cbz	r3, 800a5d4 <_free_r+0x4c>
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	d9fa      	bls.n	800a5ca <_free_r+0x42>
 800a5d4:	6811      	ldr	r1, [r2, #0]
 800a5d6:	1850      	adds	r0, r2, r1
 800a5d8:	42a0      	cmp	r0, r4
 800a5da:	d10b      	bne.n	800a5f4 <_free_r+0x6c>
 800a5dc:	6820      	ldr	r0, [r4, #0]
 800a5de:	4401      	add	r1, r0
 800a5e0:	1850      	adds	r0, r2, r1
 800a5e2:	4283      	cmp	r3, r0
 800a5e4:	6011      	str	r1, [r2, #0]
 800a5e6:	d1e0      	bne.n	800a5aa <_free_r+0x22>
 800a5e8:	6818      	ldr	r0, [r3, #0]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	4401      	add	r1, r0
 800a5ee:	6011      	str	r1, [r2, #0]
 800a5f0:	6053      	str	r3, [r2, #4]
 800a5f2:	e7da      	b.n	800a5aa <_free_r+0x22>
 800a5f4:	d902      	bls.n	800a5fc <_free_r+0x74>
 800a5f6:	230c      	movs	r3, #12
 800a5f8:	602b      	str	r3, [r5, #0]
 800a5fa:	e7d6      	b.n	800a5aa <_free_r+0x22>
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	1821      	adds	r1, r4, r0
 800a600:	428b      	cmp	r3, r1
 800a602:	bf01      	itttt	eq
 800a604:	6819      	ldreq	r1, [r3, #0]
 800a606:	685b      	ldreq	r3, [r3, #4]
 800a608:	1809      	addeq	r1, r1, r0
 800a60a:	6021      	streq	r1, [r4, #0]
 800a60c:	6063      	str	r3, [r4, #4]
 800a60e:	6054      	str	r4, [r2, #4]
 800a610:	e7cb      	b.n	800a5aa <_free_r+0x22>
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	20000564 	.word	0x20000564

0800a618 <sbrk_aligned>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	4e0e      	ldr	r6, [pc, #56]	; (800a654 <sbrk_aligned+0x3c>)
 800a61c:	460c      	mov	r4, r1
 800a61e:	6831      	ldr	r1, [r6, #0]
 800a620:	4605      	mov	r5, r0
 800a622:	b911      	cbnz	r1, 800a62a <sbrk_aligned+0x12>
 800a624:	f000 f9ee 	bl	800aa04 <_sbrk_r>
 800a628:	6030      	str	r0, [r6, #0]
 800a62a:	4621      	mov	r1, r4
 800a62c:	4628      	mov	r0, r5
 800a62e:	f000 f9e9 	bl	800aa04 <_sbrk_r>
 800a632:	1c43      	adds	r3, r0, #1
 800a634:	d00a      	beq.n	800a64c <sbrk_aligned+0x34>
 800a636:	1cc4      	adds	r4, r0, #3
 800a638:	f024 0403 	bic.w	r4, r4, #3
 800a63c:	42a0      	cmp	r0, r4
 800a63e:	d007      	beq.n	800a650 <sbrk_aligned+0x38>
 800a640:	1a21      	subs	r1, r4, r0
 800a642:	4628      	mov	r0, r5
 800a644:	f000 f9de 	bl	800aa04 <_sbrk_r>
 800a648:	3001      	adds	r0, #1
 800a64a:	d101      	bne.n	800a650 <sbrk_aligned+0x38>
 800a64c:	f04f 34ff 	mov.w	r4, #4294967295
 800a650:	4620      	mov	r0, r4
 800a652:	bd70      	pop	{r4, r5, r6, pc}
 800a654:	20000568 	.word	0x20000568

0800a658 <_malloc_r>:
 800a658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a65c:	1ccd      	adds	r5, r1, #3
 800a65e:	f025 0503 	bic.w	r5, r5, #3
 800a662:	3508      	adds	r5, #8
 800a664:	2d0c      	cmp	r5, #12
 800a666:	bf38      	it	cc
 800a668:	250c      	movcc	r5, #12
 800a66a:	2d00      	cmp	r5, #0
 800a66c:	4607      	mov	r7, r0
 800a66e:	db01      	blt.n	800a674 <_malloc_r+0x1c>
 800a670:	42a9      	cmp	r1, r5
 800a672:	d905      	bls.n	800a680 <_malloc_r+0x28>
 800a674:	230c      	movs	r3, #12
 800a676:	2600      	movs	r6, #0
 800a678:	603b      	str	r3, [r7, #0]
 800a67a:	4630      	mov	r0, r6
 800a67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a680:	4e2e      	ldr	r6, [pc, #184]	; (800a73c <_malloc_r+0xe4>)
 800a682:	f000 fa27 	bl	800aad4 <__malloc_lock>
 800a686:	6833      	ldr	r3, [r6, #0]
 800a688:	461c      	mov	r4, r3
 800a68a:	bb34      	cbnz	r4, 800a6da <_malloc_r+0x82>
 800a68c:	4629      	mov	r1, r5
 800a68e:	4638      	mov	r0, r7
 800a690:	f7ff ffc2 	bl	800a618 <sbrk_aligned>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	4604      	mov	r4, r0
 800a698:	d14d      	bne.n	800a736 <_malloc_r+0xde>
 800a69a:	6834      	ldr	r4, [r6, #0]
 800a69c:	4626      	mov	r6, r4
 800a69e:	2e00      	cmp	r6, #0
 800a6a0:	d140      	bne.n	800a724 <_malloc_r+0xcc>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	4631      	mov	r1, r6
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	eb04 0803 	add.w	r8, r4, r3
 800a6ac:	f000 f9aa 	bl	800aa04 <_sbrk_r>
 800a6b0:	4580      	cmp	r8, r0
 800a6b2:	d13a      	bne.n	800a72a <_malloc_r+0xd2>
 800a6b4:	6821      	ldr	r1, [r4, #0]
 800a6b6:	3503      	adds	r5, #3
 800a6b8:	1a6d      	subs	r5, r5, r1
 800a6ba:	f025 0503 	bic.w	r5, r5, #3
 800a6be:	3508      	adds	r5, #8
 800a6c0:	2d0c      	cmp	r5, #12
 800a6c2:	bf38      	it	cc
 800a6c4:	250c      	movcc	r5, #12
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	f7ff ffa5 	bl	800a618 <sbrk_aligned>
 800a6ce:	3001      	adds	r0, #1
 800a6d0:	d02b      	beq.n	800a72a <_malloc_r+0xd2>
 800a6d2:	6823      	ldr	r3, [r4, #0]
 800a6d4:	442b      	add	r3, r5
 800a6d6:	6023      	str	r3, [r4, #0]
 800a6d8:	e00e      	b.n	800a6f8 <_malloc_r+0xa0>
 800a6da:	6822      	ldr	r2, [r4, #0]
 800a6dc:	1b52      	subs	r2, r2, r5
 800a6de:	d41e      	bmi.n	800a71e <_malloc_r+0xc6>
 800a6e0:	2a0b      	cmp	r2, #11
 800a6e2:	d916      	bls.n	800a712 <_malloc_r+0xba>
 800a6e4:	1961      	adds	r1, r4, r5
 800a6e6:	42a3      	cmp	r3, r4
 800a6e8:	6025      	str	r5, [r4, #0]
 800a6ea:	bf18      	it	ne
 800a6ec:	6059      	strne	r1, [r3, #4]
 800a6ee:	6863      	ldr	r3, [r4, #4]
 800a6f0:	bf08      	it	eq
 800a6f2:	6031      	streq	r1, [r6, #0]
 800a6f4:	5162      	str	r2, [r4, r5]
 800a6f6:	604b      	str	r3, [r1, #4]
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	f104 060b 	add.w	r6, r4, #11
 800a6fe:	f000 f9ef 	bl	800aae0 <__malloc_unlock>
 800a702:	f026 0607 	bic.w	r6, r6, #7
 800a706:	1d23      	adds	r3, r4, #4
 800a708:	1af2      	subs	r2, r6, r3
 800a70a:	d0b6      	beq.n	800a67a <_malloc_r+0x22>
 800a70c:	1b9b      	subs	r3, r3, r6
 800a70e:	50a3      	str	r3, [r4, r2]
 800a710:	e7b3      	b.n	800a67a <_malloc_r+0x22>
 800a712:	6862      	ldr	r2, [r4, #4]
 800a714:	42a3      	cmp	r3, r4
 800a716:	bf0c      	ite	eq
 800a718:	6032      	streq	r2, [r6, #0]
 800a71a:	605a      	strne	r2, [r3, #4]
 800a71c:	e7ec      	b.n	800a6f8 <_malloc_r+0xa0>
 800a71e:	4623      	mov	r3, r4
 800a720:	6864      	ldr	r4, [r4, #4]
 800a722:	e7b2      	b.n	800a68a <_malloc_r+0x32>
 800a724:	4634      	mov	r4, r6
 800a726:	6876      	ldr	r6, [r6, #4]
 800a728:	e7b9      	b.n	800a69e <_malloc_r+0x46>
 800a72a:	230c      	movs	r3, #12
 800a72c:	4638      	mov	r0, r7
 800a72e:	603b      	str	r3, [r7, #0]
 800a730:	f000 f9d6 	bl	800aae0 <__malloc_unlock>
 800a734:	e7a1      	b.n	800a67a <_malloc_r+0x22>
 800a736:	6025      	str	r5, [r4, #0]
 800a738:	e7de      	b.n	800a6f8 <_malloc_r+0xa0>
 800a73a:	bf00      	nop
 800a73c:	20000564 	.word	0x20000564

0800a740 <__ssputs_r>:
 800a740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a744:	688e      	ldr	r6, [r1, #8]
 800a746:	4682      	mov	sl, r0
 800a748:	429e      	cmp	r6, r3
 800a74a:	460c      	mov	r4, r1
 800a74c:	4690      	mov	r8, r2
 800a74e:	461f      	mov	r7, r3
 800a750:	d838      	bhi.n	800a7c4 <__ssputs_r+0x84>
 800a752:	898a      	ldrh	r2, [r1, #12]
 800a754:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a758:	d032      	beq.n	800a7c0 <__ssputs_r+0x80>
 800a75a:	6825      	ldr	r5, [r4, #0]
 800a75c:	6909      	ldr	r1, [r1, #16]
 800a75e:	3301      	adds	r3, #1
 800a760:	eba5 0901 	sub.w	r9, r5, r1
 800a764:	6965      	ldr	r5, [r4, #20]
 800a766:	444b      	add	r3, r9
 800a768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a76c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a770:	106d      	asrs	r5, r5, #1
 800a772:	429d      	cmp	r5, r3
 800a774:	bf38      	it	cc
 800a776:	461d      	movcc	r5, r3
 800a778:	0553      	lsls	r3, r2, #21
 800a77a:	d531      	bpl.n	800a7e0 <__ssputs_r+0xa0>
 800a77c:	4629      	mov	r1, r5
 800a77e:	f7ff ff6b 	bl	800a658 <_malloc_r>
 800a782:	4606      	mov	r6, r0
 800a784:	b950      	cbnz	r0, 800a79c <__ssputs_r+0x5c>
 800a786:	230c      	movs	r3, #12
 800a788:	f04f 30ff 	mov.w	r0, #4294967295
 800a78c:	f8ca 3000 	str.w	r3, [sl]
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a796:	81a3      	strh	r3, [r4, #12]
 800a798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a79c:	464a      	mov	r2, r9
 800a79e:	6921      	ldr	r1, [r4, #16]
 800a7a0:	f7fc fd4e 	bl	8007240 <memcpy>
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ae:	81a3      	strh	r3, [r4, #12]
 800a7b0:	6126      	str	r6, [r4, #16]
 800a7b2:	444e      	add	r6, r9
 800a7b4:	6026      	str	r6, [r4, #0]
 800a7b6:	463e      	mov	r6, r7
 800a7b8:	6165      	str	r5, [r4, #20]
 800a7ba:	eba5 0509 	sub.w	r5, r5, r9
 800a7be:	60a5      	str	r5, [r4, #8]
 800a7c0:	42be      	cmp	r6, r7
 800a7c2:	d900      	bls.n	800a7c6 <__ssputs_r+0x86>
 800a7c4:	463e      	mov	r6, r7
 800a7c6:	4632      	mov	r2, r6
 800a7c8:	4641      	mov	r1, r8
 800a7ca:	6820      	ldr	r0, [r4, #0]
 800a7cc:	f000 f968 	bl	800aaa0 <memmove>
 800a7d0:	68a3      	ldr	r3, [r4, #8]
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	1b9b      	subs	r3, r3, r6
 800a7d6:	60a3      	str	r3, [r4, #8]
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	4433      	add	r3, r6
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	e7db      	b.n	800a798 <__ssputs_r+0x58>
 800a7e0:	462a      	mov	r2, r5
 800a7e2:	f000 f983 	bl	800aaec <_realloc_r>
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d1e1      	bne.n	800a7b0 <__ssputs_r+0x70>
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	6921      	ldr	r1, [r4, #16]
 800a7f0:	f7ff feca 	bl	800a588 <_free_r>
 800a7f4:	e7c7      	b.n	800a786 <__ssputs_r+0x46>
	...

0800a7f8 <_svfiprintf_r>:
 800a7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fc:	4698      	mov	r8, r3
 800a7fe:	898b      	ldrh	r3, [r1, #12]
 800a800:	4607      	mov	r7, r0
 800a802:	061b      	lsls	r3, r3, #24
 800a804:	460d      	mov	r5, r1
 800a806:	4614      	mov	r4, r2
 800a808:	b09d      	sub	sp, #116	; 0x74
 800a80a:	d50e      	bpl.n	800a82a <_svfiprintf_r+0x32>
 800a80c:	690b      	ldr	r3, [r1, #16]
 800a80e:	b963      	cbnz	r3, 800a82a <_svfiprintf_r+0x32>
 800a810:	2140      	movs	r1, #64	; 0x40
 800a812:	f7ff ff21 	bl	800a658 <_malloc_r>
 800a816:	6028      	str	r0, [r5, #0]
 800a818:	6128      	str	r0, [r5, #16]
 800a81a:	b920      	cbnz	r0, 800a826 <_svfiprintf_r+0x2e>
 800a81c:	230c      	movs	r3, #12
 800a81e:	603b      	str	r3, [r7, #0]
 800a820:	f04f 30ff 	mov.w	r0, #4294967295
 800a824:	e0d1      	b.n	800a9ca <_svfiprintf_r+0x1d2>
 800a826:	2340      	movs	r3, #64	; 0x40
 800a828:	616b      	str	r3, [r5, #20]
 800a82a:	2300      	movs	r3, #0
 800a82c:	9309      	str	r3, [sp, #36]	; 0x24
 800a82e:	2320      	movs	r3, #32
 800a830:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a834:	2330      	movs	r3, #48	; 0x30
 800a836:	f04f 0901 	mov.w	r9, #1
 800a83a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a83e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a9e4 <_svfiprintf_r+0x1ec>
 800a842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a846:	4623      	mov	r3, r4
 800a848:	469a      	mov	sl, r3
 800a84a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a84e:	b10a      	cbz	r2, 800a854 <_svfiprintf_r+0x5c>
 800a850:	2a25      	cmp	r2, #37	; 0x25
 800a852:	d1f9      	bne.n	800a848 <_svfiprintf_r+0x50>
 800a854:	ebba 0b04 	subs.w	fp, sl, r4
 800a858:	d00b      	beq.n	800a872 <_svfiprintf_r+0x7a>
 800a85a:	465b      	mov	r3, fp
 800a85c:	4622      	mov	r2, r4
 800a85e:	4629      	mov	r1, r5
 800a860:	4638      	mov	r0, r7
 800a862:	f7ff ff6d 	bl	800a740 <__ssputs_r>
 800a866:	3001      	adds	r0, #1
 800a868:	f000 80aa 	beq.w	800a9c0 <_svfiprintf_r+0x1c8>
 800a86c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a86e:	445a      	add	r2, fp
 800a870:	9209      	str	r2, [sp, #36]	; 0x24
 800a872:	f89a 3000 	ldrb.w	r3, [sl]
 800a876:	2b00      	cmp	r3, #0
 800a878:	f000 80a2 	beq.w	800a9c0 <_svfiprintf_r+0x1c8>
 800a87c:	2300      	movs	r3, #0
 800a87e:	f04f 32ff 	mov.w	r2, #4294967295
 800a882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a886:	f10a 0a01 	add.w	sl, sl, #1
 800a88a:	9304      	str	r3, [sp, #16]
 800a88c:	9307      	str	r3, [sp, #28]
 800a88e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a892:	931a      	str	r3, [sp, #104]	; 0x68
 800a894:	4654      	mov	r4, sl
 800a896:	2205      	movs	r2, #5
 800a898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a89c:	4851      	ldr	r0, [pc, #324]	; (800a9e4 <_svfiprintf_r+0x1ec>)
 800a89e:	f7ff f999 	bl	8009bd4 <memchr>
 800a8a2:	9a04      	ldr	r2, [sp, #16]
 800a8a4:	b9d8      	cbnz	r0, 800a8de <_svfiprintf_r+0xe6>
 800a8a6:	06d0      	lsls	r0, r2, #27
 800a8a8:	bf44      	itt	mi
 800a8aa:	2320      	movmi	r3, #32
 800a8ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8b0:	0711      	lsls	r1, r2, #28
 800a8b2:	bf44      	itt	mi
 800a8b4:	232b      	movmi	r3, #43	; 0x2b
 800a8b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a8be:	2b2a      	cmp	r3, #42	; 0x2a
 800a8c0:	d015      	beq.n	800a8ee <_svfiprintf_r+0xf6>
 800a8c2:	4654      	mov	r4, sl
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	f04f 0c0a 	mov.w	ip, #10
 800a8ca:	9a07      	ldr	r2, [sp, #28]
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8d2:	3b30      	subs	r3, #48	; 0x30
 800a8d4:	2b09      	cmp	r3, #9
 800a8d6:	d94e      	bls.n	800a976 <_svfiprintf_r+0x17e>
 800a8d8:	b1b0      	cbz	r0, 800a908 <_svfiprintf_r+0x110>
 800a8da:	9207      	str	r2, [sp, #28]
 800a8dc:	e014      	b.n	800a908 <_svfiprintf_r+0x110>
 800a8de:	eba0 0308 	sub.w	r3, r0, r8
 800a8e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	46a2      	mov	sl, r4
 800a8ea:	9304      	str	r3, [sp, #16]
 800a8ec:	e7d2      	b.n	800a894 <_svfiprintf_r+0x9c>
 800a8ee:	9b03      	ldr	r3, [sp, #12]
 800a8f0:	1d19      	adds	r1, r3, #4
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	9103      	str	r1, [sp, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	bfbb      	ittet	lt
 800a8fa:	425b      	neglt	r3, r3
 800a8fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a900:	9307      	strge	r3, [sp, #28]
 800a902:	9307      	strlt	r3, [sp, #28]
 800a904:	bfb8      	it	lt
 800a906:	9204      	strlt	r2, [sp, #16]
 800a908:	7823      	ldrb	r3, [r4, #0]
 800a90a:	2b2e      	cmp	r3, #46	; 0x2e
 800a90c:	d10c      	bne.n	800a928 <_svfiprintf_r+0x130>
 800a90e:	7863      	ldrb	r3, [r4, #1]
 800a910:	2b2a      	cmp	r3, #42	; 0x2a
 800a912:	d135      	bne.n	800a980 <_svfiprintf_r+0x188>
 800a914:	9b03      	ldr	r3, [sp, #12]
 800a916:	3402      	adds	r4, #2
 800a918:	1d1a      	adds	r2, r3, #4
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	9203      	str	r2, [sp, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	bfb8      	it	lt
 800a922:	f04f 33ff 	movlt.w	r3, #4294967295
 800a926:	9305      	str	r3, [sp, #20]
 800a928:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a9e8 <_svfiprintf_r+0x1f0>
 800a92c:	2203      	movs	r2, #3
 800a92e:	4650      	mov	r0, sl
 800a930:	7821      	ldrb	r1, [r4, #0]
 800a932:	f7ff f94f 	bl	8009bd4 <memchr>
 800a936:	b140      	cbz	r0, 800a94a <_svfiprintf_r+0x152>
 800a938:	2340      	movs	r3, #64	; 0x40
 800a93a:	eba0 000a 	sub.w	r0, r0, sl
 800a93e:	fa03 f000 	lsl.w	r0, r3, r0
 800a942:	9b04      	ldr	r3, [sp, #16]
 800a944:	3401      	adds	r4, #1
 800a946:	4303      	orrs	r3, r0
 800a948:	9304      	str	r3, [sp, #16]
 800a94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a94e:	2206      	movs	r2, #6
 800a950:	4826      	ldr	r0, [pc, #152]	; (800a9ec <_svfiprintf_r+0x1f4>)
 800a952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a956:	f7ff f93d 	bl	8009bd4 <memchr>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d038      	beq.n	800a9d0 <_svfiprintf_r+0x1d8>
 800a95e:	4b24      	ldr	r3, [pc, #144]	; (800a9f0 <_svfiprintf_r+0x1f8>)
 800a960:	bb1b      	cbnz	r3, 800a9aa <_svfiprintf_r+0x1b2>
 800a962:	9b03      	ldr	r3, [sp, #12]
 800a964:	3307      	adds	r3, #7
 800a966:	f023 0307 	bic.w	r3, r3, #7
 800a96a:	3308      	adds	r3, #8
 800a96c:	9303      	str	r3, [sp, #12]
 800a96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a970:	4433      	add	r3, r6
 800a972:	9309      	str	r3, [sp, #36]	; 0x24
 800a974:	e767      	b.n	800a846 <_svfiprintf_r+0x4e>
 800a976:	460c      	mov	r4, r1
 800a978:	2001      	movs	r0, #1
 800a97a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a97e:	e7a5      	b.n	800a8cc <_svfiprintf_r+0xd4>
 800a980:	2300      	movs	r3, #0
 800a982:	f04f 0c0a 	mov.w	ip, #10
 800a986:	4619      	mov	r1, r3
 800a988:	3401      	adds	r4, #1
 800a98a:	9305      	str	r3, [sp, #20]
 800a98c:	4620      	mov	r0, r4
 800a98e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a992:	3a30      	subs	r2, #48	; 0x30
 800a994:	2a09      	cmp	r2, #9
 800a996:	d903      	bls.n	800a9a0 <_svfiprintf_r+0x1a8>
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d0c5      	beq.n	800a928 <_svfiprintf_r+0x130>
 800a99c:	9105      	str	r1, [sp, #20]
 800a99e:	e7c3      	b.n	800a928 <_svfiprintf_r+0x130>
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9a8:	e7f0      	b.n	800a98c <_svfiprintf_r+0x194>
 800a9aa:	ab03      	add	r3, sp, #12
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	462a      	mov	r2, r5
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	4b10      	ldr	r3, [pc, #64]	; (800a9f4 <_svfiprintf_r+0x1fc>)
 800a9b4:	a904      	add	r1, sp, #16
 800a9b6:	f7fc fcf7 	bl	80073a8 <_printf_float>
 800a9ba:	1c42      	adds	r2, r0, #1
 800a9bc:	4606      	mov	r6, r0
 800a9be:	d1d6      	bne.n	800a96e <_svfiprintf_r+0x176>
 800a9c0:	89ab      	ldrh	r3, [r5, #12]
 800a9c2:	065b      	lsls	r3, r3, #25
 800a9c4:	f53f af2c 	bmi.w	800a820 <_svfiprintf_r+0x28>
 800a9c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9ca:	b01d      	add	sp, #116	; 0x74
 800a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d0:	ab03      	add	r3, sp, #12
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	462a      	mov	r2, r5
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	4b06      	ldr	r3, [pc, #24]	; (800a9f4 <_svfiprintf_r+0x1fc>)
 800a9da:	a904      	add	r1, sp, #16
 800a9dc:	f7fc ff80 	bl	80078e0 <_printf_i>
 800a9e0:	e7eb      	b.n	800a9ba <_svfiprintf_r+0x1c2>
 800a9e2:	bf00      	nop
 800a9e4:	0800ba94 	.word	0x0800ba94
 800a9e8:	0800ba9a 	.word	0x0800ba9a
 800a9ec:	0800ba9e 	.word	0x0800ba9e
 800a9f0:	080073a9 	.word	0x080073a9
 800a9f4:	0800a741 	.word	0x0800a741

0800a9f8 <nan>:
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	4901      	ldr	r1, [pc, #4]	; (800aa00 <nan+0x8>)
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	7ff80000 	.word	0x7ff80000

0800aa04 <_sbrk_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	2300      	movs	r3, #0
 800aa08:	4d05      	ldr	r5, [pc, #20]	; (800aa20 <_sbrk_r+0x1c>)
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	602b      	str	r3, [r5, #0]
 800aa10:	f7f8 fd18 	bl	8003444 <_sbrk>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	d102      	bne.n	800aa1e <_sbrk_r+0x1a>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	b103      	cbz	r3, 800aa1e <_sbrk_r+0x1a>
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	2000056c 	.word	0x2000056c

0800aa24 <__ascii_wctomb>:
 800aa24:	4603      	mov	r3, r0
 800aa26:	4608      	mov	r0, r1
 800aa28:	b141      	cbz	r1, 800aa3c <__ascii_wctomb+0x18>
 800aa2a:	2aff      	cmp	r2, #255	; 0xff
 800aa2c:	d904      	bls.n	800aa38 <__ascii_wctomb+0x14>
 800aa2e:	228a      	movs	r2, #138	; 0x8a
 800aa30:	f04f 30ff 	mov.w	r0, #4294967295
 800aa34:	601a      	str	r2, [r3, #0]
 800aa36:	4770      	bx	lr
 800aa38:	2001      	movs	r0, #1
 800aa3a:	700a      	strb	r2, [r1, #0]
 800aa3c:	4770      	bx	lr
	...

0800aa40 <__assert_func>:
 800aa40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa42:	4614      	mov	r4, r2
 800aa44:	461a      	mov	r2, r3
 800aa46:	4b09      	ldr	r3, [pc, #36]	; (800aa6c <__assert_func+0x2c>)
 800aa48:	4605      	mov	r5, r0
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68d8      	ldr	r0, [r3, #12]
 800aa4e:	b14c      	cbz	r4, 800aa64 <__assert_func+0x24>
 800aa50:	4b07      	ldr	r3, [pc, #28]	; (800aa70 <__assert_func+0x30>)
 800aa52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa56:	9100      	str	r1, [sp, #0]
 800aa58:	462b      	mov	r3, r5
 800aa5a:	4906      	ldr	r1, [pc, #24]	; (800aa74 <__assert_func+0x34>)
 800aa5c:	f000 f80e 	bl	800aa7c <fiprintf>
 800aa60:	f000 fa8a 	bl	800af78 <abort>
 800aa64:	4b04      	ldr	r3, [pc, #16]	; (800aa78 <__assert_func+0x38>)
 800aa66:	461c      	mov	r4, r3
 800aa68:	e7f3      	b.n	800aa52 <__assert_func+0x12>
 800aa6a:	bf00      	nop
 800aa6c:	2000003c 	.word	0x2000003c
 800aa70:	0800baa5 	.word	0x0800baa5
 800aa74:	0800bab2 	.word	0x0800bab2
 800aa78:	0800bae0 	.word	0x0800bae0

0800aa7c <fiprintf>:
 800aa7c:	b40e      	push	{r1, r2, r3}
 800aa7e:	b503      	push	{r0, r1, lr}
 800aa80:	4601      	mov	r1, r0
 800aa82:	ab03      	add	r3, sp, #12
 800aa84:	4805      	ldr	r0, [pc, #20]	; (800aa9c <fiprintf+0x20>)
 800aa86:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa8a:	6800      	ldr	r0, [r0, #0]
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	f000 f883 	bl	800ab98 <_vfiprintf_r>
 800aa92:	b002      	add	sp, #8
 800aa94:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa98:	b003      	add	sp, #12
 800aa9a:	4770      	bx	lr
 800aa9c:	2000003c 	.word	0x2000003c

0800aaa0 <memmove>:
 800aaa0:	4288      	cmp	r0, r1
 800aaa2:	b510      	push	{r4, lr}
 800aaa4:	eb01 0402 	add.w	r4, r1, r2
 800aaa8:	d902      	bls.n	800aab0 <memmove+0x10>
 800aaaa:	4284      	cmp	r4, r0
 800aaac:	4623      	mov	r3, r4
 800aaae:	d807      	bhi.n	800aac0 <memmove+0x20>
 800aab0:	1e43      	subs	r3, r0, #1
 800aab2:	42a1      	cmp	r1, r4
 800aab4:	d008      	beq.n	800aac8 <memmove+0x28>
 800aab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aabe:	e7f8      	b.n	800aab2 <memmove+0x12>
 800aac0:	4601      	mov	r1, r0
 800aac2:	4402      	add	r2, r0
 800aac4:	428a      	cmp	r2, r1
 800aac6:	d100      	bne.n	800aaca <memmove+0x2a>
 800aac8:	bd10      	pop	{r4, pc}
 800aaca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aad2:	e7f7      	b.n	800aac4 <memmove+0x24>

0800aad4 <__malloc_lock>:
 800aad4:	4801      	ldr	r0, [pc, #4]	; (800aadc <__malloc_lock+0x8>)
 800aad6:	f000 bc0b 	b.w	800b2f0 <__retarget_lock_acquire_recursive>
 800aada:	bf00      	nop
 800aadc:	20000570 	.word	0x20000570

0800aae0 <__malloc_unlock>:
 800aae0:	4801      	ldr	r0, [pc, #4]	; (800aae8 <__malloc_unlock+0x8>)
 800aae2:	f000 bc06 	b.w	800b2f2 <__retarget_lock_release_recursive>
 800aae6:	bf00      	nop
 800aae8:	20000570 	.word	0x20000570

0800aaec <_realloc_r>:
 800aaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf0:	4680      	mov	r8, r0
 800aaf2:	4614      	mov	r4, r2
 800aaf4:	460e      	mov	r6, r1
 800aaf6:	b921      	cbnz	r1, 800ab02 <_realloc_r+0x16>
 800aaf8:	4611      	mov	r1, r2
 800aafa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aafe:	f7ff bdab 	b.w	800a658 <_malloc_r>
 800ab02:	b92a      	cbnz	r2, 800ab10 <_realloc_r+0x24>
 800ab04:	f7ff fd40 	bl	800a588 <_free_r>
 800ab08:	4625      	mov	r5, r4
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab10:	f000 fc56 	bl	800b3c0 <_malloc_usable_size_r>
 800ab14:	4284      	cmp	r4, r0
 800ab16:	4607      	mov	r7, r0
 800ab18:	d802      	bhi.n	800ab20 <_realloc_r+0x34>
 800ab1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab1e:	d812      	bhi.n	800ab46 <_realloc_r+0x5a>
 800ab20:	4621      	mov	r1, r4
 800ab22:	4640      	mov	r0, r8
 800ab24:	f7ff fd98 	bl	800a658 <_malloc_r>
 800ab28:	4605      	mov	r5, r0
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d0ed      	beq.n	800ab0a <_realloc_r+0x1e>
 800ab2e:	42bc      	cmp	r4, r7
 800ab30:	4622      	mov	r2, r4
 800ab32:	4631      	mov	r1, r6
 800ab34:	bf28      	it	cs
 800ab36:	463a      	movcs	r2, r7
 800ab38:	f7fc fb82 	bl	8007240 <memcpy>
 800ab3c:	4631      	mov	r1, r6
 800ab3e:	4640      	mov	r0, r8
 800ab40:	f7ff fd22 	bl	800a588 <_free_r>
 800ab44:	e7e1      	b.n	800ab0a <_realloc_r+0x1e>
 800ab46:	4635      	mov	r5, r6
 800ab48:	e7df      	b.n	800ab0a <_realloc_r+0x1e>

0800ab4a <__sfputc_r>:
 800ab4a:	6893      	ldr	r3, [r2, #8]
 800ab4c:	b410      	push	{r4}
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	6093      	str	r3, [r2, #8]
 800ab54:	da07      	bge.n	800ab66 <__sfputc_r+0x1c>
 800ab56:	6994      	ldr	r4, [r2, #24]
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	db01      	blt.n	800ab60 <__sfputc_r+0x16>
 800ab5c:	290a      	cmp	r1, #10
 800ab5e:	d102      	bne.n	800ab66 <__sfputc_r+0x1c>
 800ab60:	bc10      	pop	{r4}
 800ab62:	f000 b949 	b.w	800adf8 <__swbuf_r>
 800ab66:	6813      	ldr	r3, [r2, #0]
 800ab68:	1c58      	adds	r0, r3, #1
 800ab6a:	6010      	str	r0, [r2, #0]
 800ab6c:	7019      	strb	r1, [r3, #0]
 800ab6e:	4608      	mov	r0, r1
 800ab70:	bc10      	pop	{r4}
 800ab72:	4770      	bx	lr

0800ab74 <__sfputs_r>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	4606      	mov	r6, r0
 800ab78:	460f      	mov	r7, r1
 800ab7a:	4614      	mov	r4, r2
 800ab7c:	18d5      	adds	r5, r2, r3
 800ab7e:	42ac      	cmp	r4, r5
 800ab80:	d101      	bne.n	800ab86 <__sfputs_r+0x12>
 800ab82:	2000      	movs	r0, #0
 800ab84:	e007      	b.n	800ab96 <__sfputs_r+0x22>
 800ab86:	463a      	mov	r2, r7
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab8e:	f7ff ffdc 	bl	800ab4a <__sfputc_r>
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	d1f3      	bne.n	800ab7e <__sfputs_r+0xa>
 800ab96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab98 <_vfiprintf_r>:
 800ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9c:	460d      	mov	r5, r1
 800ab9e:	4614      	mov	r4, r2
 800aba0:	4698      	mov	r8, r3
 800aba2:	4606      	mov	r6, r0
 800aba4:	b09d      	sub	sp, #116	; 0x74
 800aba6:	b118      	cbz	r0, 800abb0 <_vfiprintf_r+0x18>
 800aba8:	6983      	ldr	r3, [r0, #24]
 800abaa:	b90b      	cbnz	r3, 800abb0 <_vfiprintf_r+0x18>
 800abac:	f000 fb02 	bl	800b1b4 <__sinit>
 800abb0:	4b89      	ldr	r3, [pc, #548]	; (800add8 <_vfiprintf_r+0x240>)
 800abb2:	429d      	cmp	r5, r3
 800abb4:	d11b      	bne.n	800abee <_vfiprintf_r+0x56>
 800abb6:	6875      	ldr	r5, [r6, #4]
 800abb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abba:	07d9      	lsls	r1, r3, #31
 800abbc:	d405      	bmi.n	800abca <_vfiprintf_r+0x32>
 800abbe:	89ab      	ldrh	r3, [r5, #12]
 800abc0:	059a      	lsls	r2, r3, #22
 800abc2:	d402      	bmi.n	800abca <_vfiprintf_r+0x32>
 800abc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abc6:	f000 fb93 	bl	800b2f0 <__retarget_lock_acquire_recursive>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	071b      	lsls	r3, r3, #28
 800abce:	d501      	bpl.n	800abd4 <_vfiprintf_r+0x3c>
 800abd0:	692b      	ldr	r3, [r5, #16]
 800abd2:	b9eb      	cbnz	r3, 800ac10 <_vfiprintf_r+0x78>
 800abd4:	4629      	mov	r1, r5
 800abd6:	4630      	mov	r0, r6
 800abd8:	f000 f960 	bl	800ae9c <__swsetup_r>
 800abdc:	b1c0      	cbz	r0, 800ac10 <_vfiprintf_r+0x78>
 800abde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abe0:	07dc      	lsls	r4, r3, #31
 800abe2:	d50e      	bpl.n	800ac02 <_vfiprintf_r+0x6a>
 800abe4:	f04f 30ff 	mov.w	r0, #4294967295
 800abe8:	b01d      	add	sp, #116	; 0x74
 800abea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abee:	4b7b      	ldr	r3, [pc, #492]	; (800addc <_vfiprintf_r+0x244>)
 800abf0:	429d      	cmp	r5, r3
 800abf2:	d101      	bne.n	800abf8 <_vfiprintf_r+0x60>
 800abf4:	68b5      	ldr	r5, [r6, #8]
 800abf6:	e7df      	b.n	800abb8 <_vfiprintf_r+0x20>
 800abf8:	4b79      	ldr	r3, [pc, #484]	; (800ade0 <_vfiprintf_r+0x248>)
 800abfa:	429d      	cmp	r5, r3
 800abfc:	bf08      	it	eq
 800abfe:	68f5      	ldreq	r5, [r6, #12]
 800ac00:	e7da      	b.n	800abb8 <_vfiprintf_r+0x20>
 800ac02:	89ab      	ldrh	r3, [r5, #12]
 800ac04:	0598      	lsls	r0, r3, #22
 800ac06:	d4ed      	bmi.n	800abe4 <_vfiprintf_r+0x4c>
 800ac08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac0a:	f000 fb72 	bl	800b2f2 <__retarget_lock_release_recursive>
 800ac0e:	e7e9      	b.n	800abe4 <_vfiprintf_r+0x4c>
 800ac10:	2300      	movs	r3, #0
 800ac12:	9309      	str	r3, [sp, #36]	; 0x24
 800ac14:	2320      	movs	r3, #32
 800ac16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac1a:	2330      	movs	r3, #48	; 0x30
 800ac1c:	f04f 0901 	mov.w	r9, #1
 800ac20:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac24:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ade4 <_vfiprintf_r+0x24c>
 800ac28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac2c:	4623      	mov	r3, r4
 800ac2e:	469a      	mov	sl, r3
 800ac30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac34:	b10a      	cbz	r2, 800ac3a <_vfiprintf_r+0xa2>
 800ac36:	2a25      	cmp	r2, #37	; 0x25
 800ac38:	d1f9      	bne.n	800ac2e <_vfiprintf_r+0x96>
 800ac3a:	ebba 0b04 	subs.w	fp, sl, r4
 800ac3e:	d00b      	beq.n	800ac58 <_vfiprintf_r+0xc0>
 800ac40:	465b      	mov	r3, fp
 800ac42:	4622      	mov	r2, r4
 800ac44:	4629      	mov	r1, r5
 800ac46:	4630      	mov	r0, r6
 800ac48:	f7ff ff94 	bl	800ab74 <__sfputs_r>
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	f000 80aa 	beq.w	800ada6 <_vfiprintf_r+0x20e>
 800ac52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac54:	445a      	add	r2, fp
 800ac56:	9209      	str	r2, [sp, #36]	; 0x24
 800ac58:	f89a 3000 	ldrb.w	r3, [sl]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 80a2 	beq.w	800ada6 <_vfiprintf_r+0x20e>
 800ac62:	2300      	movs	r3, #0
 800ac64:	f04f 32ff 	mov.w	r2, #4294967295
 800ac68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac6c:	f10a 0a01 	add.w	sl, sl, #1
 800ac70:	9304      	str	r3, [sp, #16]
 800ac72:	9307      	str	r3, [sp, #28]
 800ac74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac78:	931a      	str	r3, [sp, #104]	; 0x68
 800ac7a:	4654      	mov	r4, sl
 800ac7c:	2205      	movs	r2, #5
 800ac7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac82:	4858      	ldr	r0, [pc, #352]	; (800ade4 <_vfiprintf_r+0x24c>)
 800ac84:	f7fe ffa6 	bl	8009bd4 <memchr>
 800ac88:	9a04      	ldr	r2, [sp, #16]
 800ac8a:	b9d8      	cbnz	r0, 800acc4 <_vfiprintf_r+0x12c>
 800ac8c:	06d1      	lsls	r1, r2, #27
 800ac8e:	bf44      	itt	mi
 800ac90:	2320      	movmi	r3, #32
 800ac92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac96:	0713      	lsls	r3, r2, #28
 800ac98:	bf44      	itt	mi
 800ac9a:	232b      	movmi	r3, #43	; 0x2b
 800ac9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca0:	f89a 3000 	ldrb.w	r3, [sl]
 800aca4:	2b2a      	cmp	r3, #42	; 0x2a
 800aca6:	d015      	beq.n	800acd4 <_vfiprintf_r+0x13c>
 800aca8:	4654      	mov	r4, sl
 800acaa:	2000      	movs	r0, #0
 800acac:	f04f 0c0a 	mov.w	ip, #10
 800acb0:	9a07      	ldr	r2, [sp, #28]
 800acb2:	4621      	mov	r1, r4
 800acb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acb8:	3b30      	subs	r3, #48	; 0x30
 800acba:	2b09      	cmp	r3, #9
 800acbc:	d94e      	bls.n	800ad5c <_vfiprintf_r+0x1c4>
 800acbe:	b1b0      	cbz	r0, 800acee <_vfiprintf_r+0x156>
 800acc0:	9207      	str	r2, [sp, #28]
 800acc2:	e014      	b.n	800acee <_vfiprintf_r+0x156>
 800acc4:	eba0 0308 	sub.w	r3, r0, r8
 800acc8:	fa09 f303 	lsl.w	r3, r9, r3
 800accc:	4313      	orrs	r3, r2
 800acce:	46a2      	mov	sl, r4
 800acd0:	9304      	str	r3, [sp, #16]
 800acd2:	e7d2      	b.n	800ac7a <_vfiprintf_r+0xe2>
 800acd4:	9b03      	ldr	r3, [sp, #12]
 800acd6:	1d19      	adds	r1, r3, #4
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	9103      	str	r1, [sp, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	bfbb      	ittet	lt
 800ace0:	425b      	neglt	r3, r3
 800ace2:	f042 0202 	orrlt.w	r2, r2, #2
 800ace6:	9307      	strge	r3, [sp, #28]
 800ace8:	9307      	strlt	r3, [sp, #28]
 800acea:	bfb8      	it	lt
 800acec:	9204      	strlt	r2, [sp, #16]
 800acee:	7823      	ldrb	r3, [r4, #0]
 800acf0:	2b2e      	cmp	r3, #46	; 0x2e
 800acf2:	d10c      	bne.n	800ad0e <_vfiprintf_r+0x176>
 800acf4:	7863      	ldrb	r3, [r4, #1]
 800acf6:	2b2a      	cmp	r3, #42	; 0x2a
 800acf8:	d135      	bne.n	800ad66 <_vfiprintf_r+0x1ce>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	3402      	adds	r4, #2
 800acfe:	1d1a      	adds	r2, r3, #4
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	9203      	str	r2, [sp, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	bfb8      	it	lt
 800ad08:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad0c:	9305      	str	r3, [sp, #20]
 800ad0e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ade8 <_vfiprintf_r+0x250>
 800ad12:	2203      	movs	r2, #3
 800ad14:	4650      	mov	r0, sl
 800ad16:	7821      	ldrb	r1, [r4, #0]
 800ad18:	f7fe ff5c 	bl	8009bd4 <memchr>
 800ad1c:	b140      	cbz	r0, 800ad30 <_vfiprintf_r+0x198>
 800ad1e:	2340      	movs	r3, #64	; 0x40
 800ad20:	eba0 000a 	sub.w	r0, r0, sl
 800ad24:	fa03 f000 	lsl.w	r0, r3, r0
 800ad28:	9b04      	ldr	r3, [sp, #16]
 800ad2a:	3401      	adds	r4, #1
 800ad2c:	4303      	orrs	r3, r0
 800ad2e:	9304      	str	r3, [sp, #16]
 800ad30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad34:	2206      	movs	r2, #6
 800ad36:	482d      	ldr	r0, [pc, #180]	; (800adec <_vfiprintf_r+0x254>)
 800ad38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad3c:	f7fe ff4a 	bl	8009bd4 <memchr>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d03f      	beq.n	800adc4 <_vfiprintf_r+0x22c>
 800ad44:	4b2a      	ldr	r3, [pc, #168]	; (800adf0 <_vfiprintf_r+0x258>)
 800ad46:	bb1b      	cbnz	r3, 800ad90 <_vfiprintf_r+0x1f8>
 800ad48:	9b03      	ldr	r3, [sp, #12]
 800ad4a:	3307      	adds	r3, #7
 800ad4c:	f023 0307 	bic.w	r3, r3, #7
 800ad50:	3308      	adds	r3, #8
 800ad52:	9303      	str	r3, [sp, #12]
 800ad54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad56:	443b      	add	r3, r7
 800ad58:	9309      	str	r3, [sp, #36]	; 0x24
 800ad5a:	e767      	b.n	800ac2c <_vfiprintf_r+0x94>
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	2001      	movs	r0, #1
 800ad60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad64:	e7a5      	b.n	800acb2 <_vfiprintf_r+0x11a>
 800ad66:	2300      	movs	r3, #0
 800ad68:	f04f 0c0a 	mov.w	ip, #10
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	3401      	adds	r4, #1
 800ad70:	9305      	str	r3, [sp, #20]
 800ad72:	4620      	mov	r0, r4
 800ad74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad78:	3a30      	subs	r2, #48	; 0x30
 800ad7a:	2a09      	cmp	r2, #9
 800ad7c:	d903      	bls.n	800ad86 <_vfiprintf_r+0x1ee>
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0c5      	beq.n	800ad0e <_vfiprintf_r+0x176>
 800ad82:	9105      	str	r1, [sp, #20]
 800ad84:	e7c3      	b.n	800ad0e <_vfiprintf_r+0x176>
 800ad86:	4604      	mov	r4, r0
 800ad88:	2301      	movs	r3, #1
 800ad8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad8e:	e7f0      	b.n	800ad72 <_vfiprintf_r+0x1da>
 800ad90:	ab03      	add	r3, sp, #12
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	462a      	mov	r2, r5
 800ad96:	4630      	mov	r0, r6
 800ad98:	4b16      	ldr	r3, [pc, #88]	; (800adf4 <_vfiprintf_r+0x25c>)
 800ad9a:	a904      	add	r1, sp, #16
 800ad9c:	f7fc fb04 	bl	80073a8 <_printf_float>
 800ada0:	4607      	mov	r7, r0
 800ada2:	1c78      	adds	r0, r7, #1
 800ada4:	d1d6      	bne.n	800ad54 <_vfiprintf_r+0x1bc>
 800ada6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ada8:	07d9      	lsls	r1, r3, #31
 800adaa:	d405      	bmi.n	800adb8 <_vfiprintf_r+0x220>
 800adac:	89ab      	ldrh	r3, [r5, #12]
 800adae:	059a      	lsls	r2, r3, #22
 800adb0:	d402      	bmi.n	800adb8 <_vfiprintf_r+0x220>
 800adb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adb4:	f000 fa9d 	bl	800b2f2 <__retarget_lock_release_recursive>
 800adb8:	89ab      	ldrh	r3, [r5, #12]
 800adba:	065b      	lsls	r3, r3, #25
 800adbc:	f53f af12 	bmi.w	800abe4 <_vfiprintf_r+0x4c>
 800adc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adc2:	e711      	b.n	800abe8 <_vfiprintf_r+0x50>
 800adc4:	ab03      	add	r3, sp, #12
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	462a      	mov	r2, r5
 800adca:	4630      	mov	r0, r6
 800adcc:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <_vfiprintf_r+0x25c>)
 800adce:	a904      	add	r1, sp, #16
 800add0:	f7fc fd86 	bl	80078e0 <_printf_i>
 800add4:	e7e4      	b.n	800ada0 <_vfiprintf_r+0x208>
 800add6:	bf00      	nop
 800add8:	0800bb04 	.word	0x0800bb04
 800addc:	0800bb24 	.word	0x0800bb24
 800ade0:	0800bae4 	.word	0x0800bae4
 800ade4:	0800ba94 	.word	0x0800ba94
 800ade8:	0800ba9a 	.word	0x0800ba9a
 800adec:	0800ba9e 	.word	0x0800ba9e
 800adf0:	080073a9 	.word	0x080073a9
 800adf4:	0800ab75 	.word	0x0800ab75

0800adf8 <__swbuf_r>:
 800adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfa:	460e      	mov	r6, r1
 800adfc:	4614      	mov	r4, r2
 800adfe:	4605      	mov	r5, r0
 800ae00:	b118      	cbz	r0, 800ae0a <__swbuf_r+0x12>
 800ae02:	6983      	ldr	r3, [r0, #24]
 800ae04:	b90b      	cbnz	r3, 800ae0a <__swbuf_r+0x12>
 800ae06:	f000 f9d5 	bl	800b1b4 <__sinit>
 800ae0a:	4b21      	ldr	r3, [pc, #132]	; (800ae90 <__swbuf_r+0x98>)
 800ae0c:	429c      	cmp	r4, r3
 800ae0e:	d12b      	bne.n	800ae68 <__swbuf_r+0x70>
 800ae10:	686c      	ldr	r4, [r5, #4]
 800ae12:	69a3      	ldr	r3, [r4, #24]
 800ae14:	60a3      	str	r3, [r4, #8]
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	071a      	lsls	r2, r3, #28
 800ae1a:	d52f      	bpl.n	800ae7c <__swbuf_r+0x84>
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	b36b      	cbz	r3, 800ae7c <__swbuf_r+0x84>
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	6820      	ldr	r0, [r4, #0]
 800ae24:	b2f6      	uxtb	r6, r6
 800ae26:	1ac0      	subs	r0, r0, r3
 800ae28:	6963      	ldr	r3, [r4, #20]
 800ae2a:	4637      	mov	r7, r6
 800ae2c:	4283      	cmp	r3, r0
 800ae2e:	dc04      	bgt.n	800ae3a <__swbuf_r+0x42>
 800ae30:	4621      	mov	r1, r4
 800ae32:	4628      	mov	r0, r5
 800ae34:	f000 f92a 	bl	800b08c <_fflush_r>
 800ae38:	bb30      	cbnz	r0, 800ae88 <__swbuf_r+0x90>
 800ae3a:	68a3      	ldr	r3, [r4, #8]
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	60a3      	str	r3, [r4, #8]
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	6022      	str	r2, [r4, #0]
 800ae48:	701e      	strb	r6, [r3, #0]
 800ae4a:	6963      	ldr	r3, [r4, #20]
 800ae4c:	4283      	cmp	r3, r0
 800ae4e:	d004      	beq.n	800ae5a <__swbuf_r+0x62>
 800ae50:	89a3      	ldrh	r3, [r4, #12]
 800ae52:	07db      	lsls	r3, r3, #31
 800ae54:	d506      	bpl.n	800ae64 <__swbuf_r+0x6c>
 800ae56:	2e0a      	cmp	r6, #10
 800ae58:	d104      	bne.n	800ae64 <__swbuf_r+0x6c>
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 f915 	bl	800b08c <_fflush_r>
 800ae62:	b988      	cbnz	r0, 800ae88 <__swbuf_r+0x90>
 800ae64:	4638      	mov	r0, r7
 800ae66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae68:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <__swbuf_r+0x9c>)
 800ae6a:	429c      	cmp	r4, r3
 800ae6c:	d101      	bne.n	800ae72 <__swbuf_r+0x7a>
 800ae6e:	68ac      	ldr	r4, [r5, #8]
 800ae70:	e7cf      	b.n	800ae12 <__swbuf_r+0x1a>
 800ae72:	4b09      	ldr	r3, [pc, #36]	; (800ae98 <__swbuf_r+0xa0>)
 800ae74:	429c      	cmp	r4, r3
 800ae76:	bf08      	it	eq
 800ae78:	68ec      	ldreq	r4, [r5, #12]
 800ae7a:	e7ca      	b.n	800ae12 <__swbuf_r+0x1a>
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f000 f80c 	bl	800ae9c <__swsetup_r>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d0cb      	beq.n	800ae20 <__swbuf_r+0x28>
 800ae88:	f04f 37ff 	mov.w	r7, #4294967295
 800ae8c:	e7ea      	b.n	800ae64 <__swbuf_r+0x6c>
 800ae8e:	bf00      	nop
 800ae90:	0800bb04 	.word	0x0800bb04
 800ae94:	0800bb24 	.word	0x0800bb24
 800ae98:	0800bae4 	.word	0x0800bae4

0800ae9c <__swsetup_r>:
 800ae9c:	4b32      	ldr	r3, [pc, #200]	; (800af68 <__swsetup_r+0xcc>)
 800ae9e:	b570      	push	{r4, r5, r6, lr}
 800aea0:	681d      	ldr	r5, [r3, #0]
 800aea2:	4606      	mov	r6, r0
 800aea4:	460c      	mov	r4, r1
 800aea6:	b125      	cbz	r5, 800aeb2 <__swsetup_r+0x16>
 800aea8:	69ab      	ldr	r3, [r5, #24]
 800aeaa:	b913      	cbnz	r3, 800aeb2 <__swsetup_r+0x16>
 800aeac:	4628      	mov	r0, r5
 800aeae:	f000 f981 	bl	800b1b4 <__sinit>
 800aeb2:	4b2e      	ldr	r3, [pc, #184]	; (800af6c <__swsetup_r+0xd0>)
 800aeb4:	429c      	cmp	r4, r3
 800aeb6:	d10f      	bne.n	800aed8 <__swsetup_r+0x3c>
 800aeb8:	686c      	ldr	r4, [r5, #4]
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aec0:	0719      	lsls	r1, r3, #28
 800aec2:	d42c      	bmi.n	800af1e <__swsetup_r+0x82>
 800aec4:	06dd      	lsls	r5, r3, #27
 800aec6:	d411      	bmi.n	800aeec <__swsetup_r+0x50>
 800aec8:	2309      	movs	r3, #9
 800aeca:	6033      	str	r3, [r6, #0]
 800aecc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aed0:	f04f 30ff 	mov.w	r0, #4294967295
 800aed4:	81a3      	strh	r3, [r4, #12]
 800aed6:	e03e      	b.n	800af56 <__swsetup_r+0xba>
 800aed8:	4b25      	ldr	r3, [pc, #148]	; (800af70 <__swsetup_r+0xd4>)
 800aeda:	429c      	cmp	r4, r3
 800aedc:	d101      	bne.n	800aee2 <__swsetup_r+0x46>
 800aede:	68ac      	ldr	r4, [r5, #8]
 800aee0:	e7eb      	b.n	800aeba <__swsetup_r+0x1e>
 800aee2:	4b24      	ldr	r3, [pc, #144]	; (800af74 <__swsetup_r+0xd8>)
 800aee4:	429c      	cmp	r4, r3
 800aee6:	bf08      	it	eq
 800aee8:	68ec      	ldreq	r4, [r5, #12]
 800aeea:	e7e6      	b.n	800aeba <__swsetup_r+0x1e>
 800aeec:	0758      	lsls	r0, r3, #29
 800aeee:	d512      	bpl.n	800af16 <__swsetup_r+0x7a>
 800aef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aef2:	b141      	cbz	r1, 800af06 <__swsetup_r+0x6a>
 800aef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aef8:	4299      	cmp	r1, r3
 800aefa:	d002      	beq.n	800af02 <__swsetup_r+0x66>
 800aefc:	4630      	mov	r0, r6
 800aefe:	f7ff fb43 	bl	800a588 <_free_r>
 800af02:	2300      	movs	r3, #0
 800af04:	6363      	str	r3, [r4, #52]	; 0x34
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af0c:	81a3      	strh	r3, [r4, #12]
 800af0e:	2300      	movs	r3, #0
 800af10:	6063      	str	r3, [r4, #4]
 800af12:	6923      	ldr	r3, [r4, #16]
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	f043 0308 	orr.w	r3, r3, #8
 800af1c:	81a3      	strh	r3, [r4, #12]
 800af1e:	6923      	ldr	r3, [r4, #16]
 800af20:	b94b      	cbnz	r3, 800af36 <__swsetup_r+0x9a>
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af2c:	d003      	beq.n	800af36 <__swsetup_r+0x9a>
 800af2e:	4621      	mov	r1, r4
 800af30:	4630      	mov	r0, r6
 800af32:	f000 fa05 	bl	800b340 <__smakebuf_r>
 800af36:	89a0      	ldrh	r0, [r4, #12]
 800af38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af3c:	f010 0301 	ands.w	r3, r0, #1
 800af40:	d00a      	beq.n	800af58 <__swsetup_r+0xbc>
 800af42:	2300      	movs	r3, #0
 800af44:	60a3      	str	r3, [r4, #8]
 800af46:	6963      	ldr	r3, [r4, #20]
 800af48:	425b      	negs	r3, r3
 800af4a:	61a3      	str	r3, [r4, #24]
 800af4c:	6923      	ldr	r3, [r4, #16]
 800af4e:	b943      	cbnz	r3, 800af62 <__swsetup_r+0xc6>
 800af50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af54:	d1ba      	bne.n	800aecc <__swsetup_r+0x30>
 800af56:	bd70      	pop	{r4, r5, r6, pc}
 800af58:	0781      	lsls	r1, r0, #30
 800af5a:	bf58      	it	pl
 800af5c:	6963      	ldrpl	r3, [r4, #20]
 800af5e:	60a3      	str	r3, [r4, #8]
 800af60:	e7f4      	b.n	800af4c <__swsetup_r+0xb0>
 800af62:	2000      	movs	r0, #0
 800af64:	e7f7      	b.n	800af56 <__swsetup_r+0xba>
 800af66:	bf00      	nop
 800af68:	2000003c 	.word	0x2000003c
 800af6c:	0800bb04 	.word	0x0800bb04
 800af70:	0800bb24 	.word	0x0800bb24
 800af74:	0800bae4 	.word	0x0800bae4

0800af78 <abort>:
 800af78:	2006      	movs	r0, #6
 800af7a:	b508      	push	{r3, lr}
 800af7c:	f000 fa50 	bl	800b420 <raise>
 800af80:	2001      	movs	r0, #1
 800af82:	f7f8 f9ec 	bl	800335e <_exit>
	...

0800af88 <__sflush_r>:
 800af88:	898a      	ldrh	r2, [r1, #12]
 800af8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8c:	4605      	mov	r5, r0
 800af8e:	0710      	lsls	r0, r2, #28
 800af90:	460c      	mov	r4, r1
 800af92:	d457      	bmi.n	800b044 <__sflush_r+0xbc>
 800af94:	684b      	ldr	r3, [r1, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	dc04      	bgt.n	800afa4 <__sflush_r+0x1c>
 800af9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	dc01      	bgt.n	800afa4 <__sflush_r+0x1c>
 800afa0:	2000      	movs	r0, #0
 800afa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afa6:	2e00      	cmp	r6, #0
 800afa8:	d0fa      	beq.n	800afa0 <__sflush_r+0x18>
 800afaa:	2300      	movs	r3, #0
 800afac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afb0:	682f      	ldr	r7, [r5, #0]
 800afb2:	602b      	str	r3, [r5, #0]
 800afb4:	d032      	beq.n	800b01c <__sflush_r+0x94>
 800afb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	075a      	lsls	r2, r3, #29
 800afbc:	d505      	bpl.n	800afca <__sflush_r+0x42>
 800afbe:	6863      	ldr	r3, [r4, #4]
 800afc0:	1ac0      	subs	r0, r0, r3
 800afc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afc4:	b10b      	cbz	r3, 800afca <__sflush_r+0x42>
 800afc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afc8:	1ac0      	subs	r0, r0, r3
 800afca:	2300      	movs	r3, #0
 800afcc:	4602      	mov	r2, r0
 800afce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afd0:	4628      	mov	r0, r5
 800afd2:	6a21      	ldr	r1, [r4, #32]
 800afd4:	47b0      	blx	r6
 800afd6:	1c43      	adds	r3, r0, #1
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	d106      	bne.n	800afea <__sflush_r+0x62>
 800afdc:	6829      	ldr	r1, [r5, #0]
 800afde:	291d      	cmp	r1, #29
 800afe0:	d82c      	bhi.n	800b03c <__sflush_r+0xb4>
 800afe2:	4a29      	ldr	r2, [pc, #164]	; (800b088 <__sflush_r+0x100>)
 800afe4:	40ca      	lsrs	r2, r1
 800afe6:	07d6      	lsls	r6, r2, #31
 800afe8:	d528      	bpl.n	800b03c <__sflush_r+0xb4>
 800afea:	2200      	movs	r2, #0
 800afec:	6062      	str	r2, [r4, #4]
 800afee:	6922      	ldr	r2, [r4, #16]
 800aff0:	04d9      	lsls	r1, r3, #19
 800aff2:	6022      	str	r2, [r4, #0]
 800aff4:	d504      	bpl.n	800b000 <__sflush_r+0x78>
 800aff6:	1c42      	adds	r2, r0, #1
 800aff8:	d101      	bne.n	800affe <__sflush_r+0x76>
 800affa:	682b      	ldr	r3, [r5, #0]
 800affc:	b903      	cbnz	r3, 800b000 <__sflush_r+0x78>
 800affe:	6560      	str	r0, [r4, #84]	; 0x54
 800b000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b002:	602f      	str	r7, [r5, #0]
 800b004:	2900      	cmp	r1, #0
 800b006:	d0cb      	beq.n	800afa0 <__sflush_r+0x18>
 800b008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b00c:	4299      	cmp	r1, r3
 800b00e:	d002      	beq.n	800b016 <__sflush_r+0x8e>
 800b010:	4628      	mov	r0, r5
 800b012:	f7ff fab9 	bl	800a588 <_free_r>
 800b016:	2000      	movs	r0, #0
 800b018:	6360      	str	r0, [r4, #52]	; 0x34
 800b01a:	e7c2      	b.n	800afa2 <__sflush_r+0x1a>
 800b01c:	6a21      	ldr	r1, [r4, #32]
 800b01e:	2301      	movs	r3, #1
 800b020:	4628      	mov	r0, r5
 800b022:	47b0      	blx	r6
 800b024:	1c41      	adds	r1, r0, #1
 800b026:	d1c7      	bne.n	800afb8 <__sflush_r+0x30>
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0c4      	beq.n	800afb8 <__sflush_r+0x30>
 800b02e:	2b1d      	cmp	r3, #29
 800b030:	d001      	beq.n	800b036 <__sflush_r+0xae>
 800b032:	2b16      	cmp	r3, #22
 800b034:	d101      	bne.n	800b03a <__sflush_r+0xb2>
 800b036:	602f      	str	r7, [r5, #0]
 800b038:	e7b2      	b.n	800afa0 <__sflush_r+0x18>
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b040:	81a3      	strh	r3, [r4, #12]
 800b042:	e7ae      	b.n	800afa2 <__sflush_r+0x1a>
 800b044:	690f      	ldr	r7, [r1, #16]
 800b046:	2f00      	cmp	r7, #0
 800b048:	d0aa      	beq.n	800afa0 <__sflush_r+0x18>
 800b04a:	0793      	lsls	r3, r2, #30
 800b04c:	bf18      	it	ne
 800b04e:	2300      	movne	r3, #0
 800b050:	680e      	ldr	r6, [r1, #0]
 800b052:	bf08      	it	eq
 800b054:	694b      	ldreq	r3, [r1, #20]
 800b056:	1bf6      	subs	r6, r6, r7
 800b058:	600f      	str	r7, [r1, #0]
 800b05a:	608b      	str	r3, [r1, #8]
 800b05c:	2e00      	cmp	r6, #0
 800b05e:	dd9f      	ble.n	800afa0 <__sflush_r+0x18>
 800b060:	4633      	mov	r3, r6
 800b062:	463a      	mov	r2, r7
 800b064:	4628      	mov	r0, r5
 800b066:	6a21      	ldr	r1, [r4, #32]
 800b068:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b06c:	47e0      	blx	ip
 800b06e:	2800      	cmp	r0, #0
 800b070:	dc06      	bgt.n	800b080 <__sflush_r+0xf8>
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	f04f 30ff 	mov.w	r0, #4294967295
 800b078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b07c:	81a3      	strh	r3, [r4, #12]
 800b07e:	e790      	b.n	800afa2 <__sflush_r+0x1a>
 800b080:	4407      	add	r7, r0
 800b082:	1a36      	subs	r6, r6, r0
 800b084:	e7ea      	b.n	800b05c <__sflush_r+0xd4>
 800b086:	bf00      	nop
 800b088:	20400001 	.word	0x20400001

0800b08c <_fflush_r>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	690b      	ldr	r3, [r1, #16]
 800b090:	4605      	mov	r5, r0
 800b092:	460c      	mov	r4, r1
 800b094:	b913      	cbnz	r3, 800b09c <_fflush_r+0x10>
 800b096:	2500      	movs	r5, #0
 800b098:	4628      	mov	r0, r5
 800b09a:	bd38      	pop	{r3, r4, r5, pc}
 800b09c:	b118      	cbz	r0, 800b0a6 <_fflush_r+0x1a>
 800b09e:	6983      	ldr	r3, [r0, #24]
 800b0a0:	b90b      	cbnz	r3, 800b0a6 <_fflush_r+0x1a>
 800b0a2:	f000 f887 	bl	800b1b4 <__sinit>
 800b0a6:	4b14      	ldr	r3, [pc, #80]	; (800b0f8 <_fflush_r+0x6c>)
 800b0a8:	429c      	cmp	r4, r3
 800b0aa:	d11b      	bne.n	800b0e4 <_fflush_r+0x58>
 800b0ac:	686c      	ldr	r4, [r5, #4]
 800b0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d0ef      	beq.n	800b096 <_fflush_r+0xa>
 800b0b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0b8:	07d0      	lsls	r0, r2, #31
 800b0ba:	d404      	bmi.n	800b0c6 <_fflush_r+0x3a>
 800b0bc:	0599      	lsls	r1, r3, #22
 800b0be:	d402      	bmi.n	800b0c6 <_fflush_r+0x3a>
 800b0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0c2:	f000 f915 	bl	800b2f0 <__retarget_lock_acquire_recursive>
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	f7ff ff5d 	bl	800af88 <__sflush_r>
 800b0ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0d0:	4605      	mov	r5, r0
 800b0d2:	07da      	lsls	r2, r3, #31
 800b0d4:	d4e0      	bmi.n	800b098 <_fflush_r+0xc>
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	059b      	lsls	r3, r3, #22
 800b0da:	d4dd      	bmi.n	800b098 <_fflush_r+0xc>
 800b0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0de:	f000 f908 	bl	800b2f2 <__retarget_lock_release_recursive>
 800b0e2:	e7d9      	b.n	800b098 <_fflush_r+0xc>
 800b0e4:	4b05      	ldr	r3, [pc, #20]	; (800b0fc <_fflush_r+0x70>)
 800b0e6:	429c      	cmp	r4, r3
 800b0e8:	d101      	bne.n	800b0ee <_fflush_r+0x62>
 800b0ea:	68ac      	ldr	r4, [r5, #8]
 800b0ec:	e7df      	b.n	800b0ae <_fflush_r+0x22>
 800b0ee:	4b04      	ldr	r3, [pc, #16]	; (800b100 <_fflush_r+0x74>)
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	bf08      	it	eq
 800b0f4:	68ec      	ldreq	r4, [r5, #12]
 800b0f6:	e7da      	b.n	800b0ae <_fflush_r+0x22>
 800b0f8:	0800bb04 	.word	0x0800bb04
 800b0fc:	0800bb24 	.word	0x0800bb24
 800b100:	0800bae4 	.word	0x0800bae4

0800b104 <std>:
 800b104:	2300      	movs	r3, #0
 800b106:	b510      	push	{r4, lr}
 800b108:	4604      	mov	r4, r0
 800b10a:	e9c0 3300 	strd	r3, r3, [r0]
 800b10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b112:	6083      	str	r3, [r0, #8]
 800b114:	8181      	strh	r1, [r0, #12]
 800b116:	6643      	str	r3, [r0, #100]	; 0x64
 800b118:	81c2      	strh	r2, [r0, #14]
 800b11a:	6183      	str	r3, [r0, #24]
 800b11c:	4619      	mov	r1, r3
 800b11e:	2208      	movs	r2, #8
 800b120:	305c      	adds	r0, #92	; 0x5c
 800b122:	f7fc f89b 	bl	800725c <memset>
 800b126:	4b05      	ldr	r3, [pc, #20]	; (800b13c <std+0x38>)
 800b128:	6224      	str	r4, [r4, #32]
 800b12a:	6263      	str	r3, [r4, #36]	; 0x24
 800b12c:	4b04      	ldr	r3, [pc, #16]	; (800b140 <std+0x3c>)
 800b12e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b130:	4b04      	ldr	r3, [pc, #16]	; (800b144 <std+0x40>)
 800b132:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b134:	4b04      	ldr	r3, [pc, #16]	; (800b148 <std+0x44>)
 800b136:	6323      	str	r3, [r4, #48]	; 0x30
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	bf00      	nop
 800b13c:	0800b459 	.word	0x0800b459
 800b140:	0800b47b 	.word	0x0800b47b
 800b144:	0800b4b3 	.word	0x0800b4b3
 800b148:	0800b4d7 	.word	0x0800b4d7

0800b14c <_cleanup_r>:
 800b14c:	4901      	ldr	r1, [pc, #4]	; (800b154 <_cleanup_r+0x8>)
 800b14e:	f000 b8af 	b.w	800b2b0 <_fwalk_reent>
 800b152:	bf00      	nop
 800b154:	0800b08d 	.word	0x0800b08d

0800b158 <__sfmoreglue>:
 800b158:	2268      	movs	r2, #104	; 0x68
 800b15a:	b570      	push	{r4, r5, r6, lr}
 800b15c:	1e4d      	subs	r5, r1, #1
 800b15e:	4355      	muls	r5, r2
 800b160:	460e      	mov	r6, r1
 800b162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b166:	f7ff fa77 	bl	800a658 <_malloc_r>
 800b16a:	4604      	mov	r4, r0
 800b16c:	b140      	cbz	r0, 800b180 <__sfmoreglue+0x28>
 800b16e:	2100      	movs	r1, #0
 800b170:	e9c0 1600 	strd	r1, r6, [r0]
 800b174:	300c      	adds	r0, #12
 800b176:	60a0      	str	r0, [r4, #8]
 800b178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b17c:	f7fc f86e 	bl	800725c <memset>
 800b180:	4620      	mov	r0, r4
 800b182:	bd70      	pop	{r4, r5, r6, pc}

0800b184 <__sfp_lock_acquire>:
 800b184:	4801      	ldr	r0, [pc, #4]	; (800b18c <__sfp_lock_acquire+0x8>)
 800b186:	f000 b8b3 	b.w	800b2f0 <__retarget_lock_acquire_recursive>
 800b18a:	bf00      	nop
 800b18c:	20000571 	.word	0x20000571

0800b190 <__sfp_lock_release>:
 800b190:	4801      	ldr	r0, [pc, #4]	; (800b198 <__sfp_lock_release+0x8>)
 800b192:	f000 b8ae 	b.w	800b2f2 <__retarget_lock_release_recursive>
 800b196:	bf00      	nop
 800b198:	20000571 	.word	0x20000571

0800b19c <__sinit_lock_acquire>:
 800b19c:	4801      	ldr	r0, [pc, #4]	; (800b1a4 <__sinit_lock_acquire+0x8>)
 800b19e:	f000 b8a7 	b.w	800b2f0 <__retarget_lock_acquire_recursive>
 800b1a2:	bf00      	nop
 800b1a4:	20000572 	.word	0x20000572

0800b1a8 <__sinit_lock_release>:
 800b1a8:	4801      	ldr	r0, [pc, #4]	; (800b1b0 <__sinit_lock_release+0x8>)
 800b1aa:	f000 b8a2 	b.w	800b2f2 <__retarget_lock_release_recursive>
 800b1ae:	bf00      	nop
 800b1b0:	20000572 	.word	0x20000572

0800b1b4 <__sinit>:
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	f7ff fff0 	bl	800b19c <__sinit_lock_acquire>
 800b1bc:	69a3      	ldr	r3, [r4, #24]
 800b1be:	b11b      	cbz	r3, 800b1c8 <__sinit+0x14>
 800b1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c4:	f7ff bff0 	b.w	800b1a8 <__sinit_lock_release>
 800b1c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1cc:	6523      	str	r3, [r4, #80]	; 0x50
 800b1ce:	4b13      	ldr	r3, [pc, #76]	; (800b21c <__sinit+0x68>)
 800b1d0:	4a13      	ldr	r2, [pc, #76]	; (800b220 <__sinit+0x6c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1d6:	42a3      	cmp	r3, r4
 800b1d8:	bf08      	it	eq
 800b1da:	2301      	moveq	r3, #1
 800b1dc:	4620      	mov	r0, r4
 800b1de:	bf08      	it	eq
 800b1e0:	61a3      	streq	r3, [r4, #24]
 800b1e2:	f000 f81f 	bl	800b224 <__sfp>
 800b1e6:	6060      	str	r0, [r4, #4]
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f000 f81b 	bl	800b224 <__sfp>
 800b1ee:	60a0      	str	r0, [r4, #8]
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 f817 	bl	800b224 <__sfp>
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	2104      	movs	r1, #4
 800b1fa:	60e0      	str	r0, [r4, #12]
 800b1fc:	6860      	ldr	r0, [r4, #4]
 800b1fe:	f7ff ff81 	bl	800b104 <std>
 800b202:	2201      	movs	r2, #1
 800b204:	2109      	movs	r1, #9
 800b206:	68a0      	ldr	r0, [r4, #8]
 800b208:	f7ff ff7c 	bl	800b104 <std>
 800b20c:	2202      	movs	r2, #2
 800b20e:	2112      	movs	r1, #18
 800b210:	68e0      	ldr	r0, [r4, #12]
 800b212:	f7ff ff77 	bl	800b104 <std>
 800b216:	2301      	movs	r3, #1
 800b218:	61a3      	str	r3, [r4, #24]
 800b21a:	e7d1      	b.n	800b1c0 <__sinit+0xc>
 800b21c:	0800b7a8 	.word	0x0800b7a8
 800b220:	0800b14d 	.word	0x0800b14d

0800b224 <__sfp>:
 800b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b226:	4607      	mov	r7, r0
 800b228:	f7ff ffac 	bl	800b184 <__sfp_lock_acquire>
 800b22c:	4b1e      	ldr	r3, [pc, #120]	; (800b2a8 <__sfp+0x84>)
 800b22e:	681e      	ldr	r6, [r3, #0]
 800b230:	69b3      	ldr	r3, [r6, #24]
 800b232:	b913      	cbnz	r3, 800b23a <__sfp+0x16>
 800b234:	4630      	mov	r0, r6
 800b236:	f7ff ffbd 	bl	800b1b4 <__sinit>
 800b23a:	3648      	adds	r6, #72	; 0x48
 800b23c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b240:	3b01      	subs	r3, #1
 800b242:	d503      	bpl.n	800b24c <__sfp+0x28>
 800b244:	6833      	ldr	r3, [r6, #0]
 800b246:	b30b      	cbz	r3, 800b28c <__sfp+0x68>
 800b248:	6836      	ldr	r6, [r6, #0]
 800b24a:	e7f7      	b.n	800b23c <__sfp+0x18>
 800b24c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b250:	b9d5      	cbnz	r5, 800b288 <__sfp+0x64>
 800b252:	4b16      	ldr	r3, [pc, #88]	; (800b2ac <__sfp+0x88>)
 800b254:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b258:	60e3      	str	r3, [r4, #12]
 800b25a:	6665      	str	r5, [r4, #100]	; 0x64
 800b25c:	f000 f847 	bl	800b2ee <__retarget_lock_init_recursive>
 800b260:	f7ff ff96 	bl	800b190 <__sfp_lock_release>
 800b264:	2208      	movs	r2, #8
 800b266:	4629      	mov	r1, r5
 800b268:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b26c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b270:	6025      	str	r5, [r4, #0]
 800b272:	61a5      	str	r5, [r4, #24]
 800b274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b278:	f7fb fff0 	bl	800725c <memset>
 800b27c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b284:	4620      	mov	r0, r4
 800b286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b288:	3468      	adds	r4, #104	; 0x68
 800b28a:	e7d9      	b.n	800b240 <__sfp+0x1c>
 800b28c:	2104      	movs	r1, #4
 800b28e:	4638      	mov	r0, r7
 800b290:	f7ff ff62 	bl	800b158 <__sfmoreglue>
 800b294:	4604      	mov	r4, r0
 800b296:	6030      	str	r0, [r6, #0]
 800b298:	2800      	cmp	r0, #0
 800b29a:	d1d5      	bne.n	800b248 <__sfp+0x24>
 800b29c:	f7ff ff78 	bl	800b190 <__sfp_lock_release>
 800b2a0:	230c      	movs	r3, #12
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	e7ee      	b.n	800b284 <__sfp+0x60>
 800b2a6:	bf00      	nop
 800b2a8:	0800b7a8 	.word	0x0800b7a8
 800b2ac:	ffff0001 	.word	0xffff0001

0800b2b0 <_fwalk_reent>:
 800b2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	4688      	mov	r8, r1
 800b2b8:	2700      	movs	r7, #0
 800b2ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2c2:	f1b9 0901 	subs.w	r9, r9, #1
 800b2c6:	d505      	bpl.n	800b2d4 <_fwalk_reent+0x24>
 800b2c8:	6824      	ldr	r4, [r4, #0]
 800b2ca:	2c00      	cmp	r4, #0
 800b2cc:	d1f7      	bne.n	800b2be <_fwalk_reent+0xe>
 800b2ce:	4638      	mov	r0, r7
 800b2d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d4:	89ab      	ldrh	r3, [r5, #12]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d907      	bls.n	800b2ea <_fwalk_reent+0x3a>
 800b2da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	d003      	beq.n	800b2ea <_fwalk_reent+0x3a>
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	47c0      	blx	r8
 800b2e8:	4307      	orrs	r7, r0
 800b2ea:	3568      	adds	r5, #104	; 0x68
 800b2ec:	e7e9      	b.n	800b2c2 <_fwalk_reent+0x12>

0800b2ee <__retarget_lock_init_recursive>:
 800b2ee:	4770      	bx	lr

0800b2f0 <__retarget_lock_acquire_recursive>:
 800b2f0:	4770      	bx	lr

0800b2f2 <__retarget_lock_release_recursive>:
 800b2f2:	4770      	bx	lr

0800b2f4 <__swhatbuf_r>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	460e      	mov	r6, r1
 800b2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2fc:	4614      	mov	r4, r2
 800b2fe:	2900      	cmp	r1, #0
 800b300:	461d      	mov	r5, r3
 800b302:	b096      	sub	sp, #88	; 0x58
 800b304:	da08      	bge.n	800b318 <__swhatbuf_r+0x24>
 800b306:	2200      	movs	r2, #0
 800b308:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b30c:	602a      	str	r2, [r5, #0]
 800b30e:	061a      	lsls	r2, r3, #24
 800b310:	d410      	bmi.n	800b334 <__swhatbuf_r+0x40>
 800b312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b316:	e00e      	b.n	800b336 <__swhatbuf_r+0x42>
 800b318:	466a      	mov	r2, sp
 800b31a:	f000 f903 	bl	800b524 <_fstat_r>
 800b31e:	2800      	cmp	r0, #0
 800b320:	dbf1      	blt.n	800b306 <__swhatbuf_r+0x12>
 800b322:	9a01      	ldr	r2, [sp, #4]
 800b324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b32c:	425a      	negs	r2, r3
 800b32e:	415a      	adcs	r2, r3
 800b330:	602a      	str	r2, [r5, #0]
 800b332:	e7ee      	b.n	800b312 <__swhatbuf_r+0x1e>
 800b334:	2340      	movs	r3, #64	; 0x40
 800b336:	2000      	movs	r0, #0
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	b016      	add	sp, #88	; 0x58
 800b33c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b340 <__smakebuf_r>:
 800b340:	898b      	ldrh	r3, [r1, #12]
 800b342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b344:	079d      	lsls	r5, r3, #30
 800b346:	4606      	mov	r6, r0
 800b348:	460c      	mov	r4, r1
 800b34a:	d507      	bpl.n	800b35c <__smakebuf_r+0x1c>
 800b34c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	6123      	str	r3, [r4, #16]
 800b354:	2301      	movs	r3, #1
 800b356:	6163      	str	r3, [r4, #20]
 800b358:	b002      	add	sp, #8
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	466a      	mov	r2, sp
 800b35e:	ab01      	add	r3, sp, #4
 800b360:	f7ff ffc8 	bl	800b2f4 <__swhatbuf_r>
 800b364:	9900      	ldr	r1, [sp, #0]
 800b366:	4605      	mov	r5, r0
 800b368:	4630      	mov	r0, r6
 800b36a:	f7ff f975 	bl	800a658 <_malloc_r>
 800b36e:	b948      	cbnz	r0, 800b384 <__smakebuf_r+0x44>
 800b370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b374:	059a      	lsls	r2, r3, #22
 800b376:	d4ef      	bmi.n	800b358 <__smakebuf_r+0x18>
 800b378:	f023 0303 	bic.w	r3, r3, #3
 800b37c:	f043 0302 	orr.w	r3, r3, #2
 800b380:	81a3      	strh	r3, [r4, #12]
 800b382:	e7e3      	b.n	800b34c <__smakebuf_r+0xc>
 800b384:	4b0d      	ldr	r3, [pc, #52]	; (800b3bc <__smakebuf_r+0x7c>)
 800b386:	62b3      	str	r3, [r6, #40]	; 0x28
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	6020      	str	r0, [r4, #0]
 800b38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b390:	81a3      	strh	r3, [r4, #12]
 800b392:	9b00      	ldr	r3, [sp, #0]
 800b394:	6120      	str	r0, [r4, #16]
 800b396:	6163      	str	r3, [r4, #20]
 800b398:	9b01      	ldr	r3, [sp, #4]
 800b39a:	b15b      	cbz	r3, 800b3b4 <__smakebuf_r+0x74>
 800b39c:	4630      	mov	r0, r6
 800b39e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3a2:	f000 f8d1 	bl	800b548 <_isatty_r>
 800b3a6:	b128      	cbz	r0, 800b3b4 <__smakebuf_r+0x74>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	f023 0303 	bic.w	r3, r3, #3
 800b3ae:	f043 0301 	orr.w	r3, r3, #1
 800b3b2:	81a3      	strh	r3, [r4, #12]
 800b3b4:	89a0      	ldrh	r0, [r4, #12]
 800b3b6:	4305      	orrs	r5, r0
 800b3b8:	81a5      	strh	r5, [r4, #12]
 800b3ba:	e7cd      	b.n	800b358 <__smakebuf_r+0x18>
 800b3bc:	0800b14d 	.word	0x0800b14d

0800b3c0 <_malloc_usable_size_r>:
 800b3c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3c4:	1f18      	subs	r0, r3, #4
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	bfbc      	itt	lt
 800b3ca:	580b      	ldrlt	r3, [r1, r0]
 800b3cc:	18c0      	addlt	r0, r0, r3
 800b3ce:	4770      	bx	lr

0800b3d0 <_raise_r>:
 800b3d0:	291f      	cmp	r1, #31
 800b3d2:	b538      	push	{r3, r4, r5, lr}
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	460d      	mov	r5, r1
 800b3d8:	d904      	bls.n	800b3e4 <_raise_r+0x14>
 800b3da:	2316      	movs	r3, #22
 800b3dc:	6003      	str	r3, [r0, #0]
 800b3de:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}
 800b3e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3e6:	b112      	cbz	r2, 800b3ee <_raise_r+0x1e>
 800b3e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3ec:	b94b      	cbnz	r3, 800b402 <_raise_r+0x32>
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f000 f830 	bl	800b454 <_getpid_r>
 800b3f4:	462a      	mov	r2, r5
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3fe:	f000 b817 	b.w	800b430 <_kill_r>
 800b402:	2b01      	cmp	r3, #1
 800b404:	d00a      	beq.n	800b41c <_raise_r+0x4c>
 800b406:	1c59      	adds	r1, r3, #1
 800b408:	d103      	bne.n	800b412 <_raise_r+0x42>
 800b40a:	2316      	movs	r3, #22
 800b40c:	6003      	str	r3, [r0, #0]
 800b40e:	2001      	movs	r0, #1
 800b410:	e7e7      	b.n	800b3e2 <_raise_r+0x12>
 800b412:	2400      	movs	r4, #0
 800b414:	4628      	mov	r0, r5
 800b416:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b41a:	4798      	blx	r3
 800b41c:	2000      	movs	r0, #0
 800b41e:	e7e0      	b.n	800b3e2 <_raise_r+0x12>

0800b420 <raise>:
 800b420:	4b02      	ldr	r3, [pc, #8]	; (800b42c <raise+0xc>)
 800b422:	4601      	mov	r1, r0
 800b424:	6818      	ldr	r0, [r3, #0]
 800b426:	f7ff bfd3 	b.w	800b3d0 <_raise_r>
 800b42a:	bf00      	nop
 800b42c:	2000003c 	.word	0x2000003c

0800b430 <_kill_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	2300      	movs	r3, #0
 800b434:	4d06      	ldr	r5, [pc, #24]	; (800b450 <_kill_r+0x20>)
 800b436:	4604      	mov	r4, r0
 800b438:	4608      	mov	r0, r1
 800b43a:	4611      	mov	r1, r2
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	f7f7 ff7e 	bl	800333e <_kill>
 800b442:	1c43      	adds	r3, r0, #1
 800b444:	d102      	bne.n	800b44c <_kill_r+0x1c>
 800b446:	682b      	ldr	r3, [r5, #0]
 800b448:	b103      	cbz	r3, 800b44c <_kill_r+0x1c>
 800b44a:	6023      	str	r3, [r4, #0]
 800b44c:	bd38      	pop	{r3, r4, r5, pc}
 800b44e:	bf00      	nop
 800b450:	2000056c 	.word	0x2000056c

0800b454 <_getpid_r>:
 800b454:	f7f7 bf6c 	b.w	8003330 <_getpid>

0800b458 <__sread>:
 800b458:	b510      	push	{r4, lr}
 800b45a:	460c      	mov	r4, r1
 800b45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b460:	f000 f894 	bl	800b58c <_read_r>
 800b464:	2800      	cmp	r0, #0
 800b466:	bfab      	itete	ge
 800b468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b46a:	89a3      	ldrhlt	r3, [r4, #12]
 800b46c:	181b      	addge	r3, r3, r0
 800b46e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b472:	bfac      	ite	ge
 800b474:	6563      	strge	r3, [r4, #84]	; 0x54
 800b476:	81a3      	strhlt	r3, [r4, #12]
 800b478:	bd10      	pop	{r4, pc}

0800b47a <__swrite>:
 800b47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47e:	461f      	mov	r7, r3
 800b480:	898b      	ldrh	r3, [r1, #12]
 800b482:	4605      	mov	r5, r0
 800b484:	05db      	lsls	r3, r3, #23
 800b486:	460c      	mov	r4, r1
 800b488:	4616      	mov	r6, r2
 800b48a:	d505      	bpl.n	800b498 <__swrite+0x1e>
 800b48c:	2302      	movs	r3, #2
 800b48e:	2200      	movs	r2, #0
 800b490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b494:	f000 f868 	bl	800b568 <_lseek_r>
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	4632      	mov	r2, r6
 800b49c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4a0:	81a3      	strh	r3, [r4, #12]
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	463b      	mov	r3, r7
 800b4a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ae:	f000 b817 	b.w	800b4e0 <_write_r>

0800b4b2 <__sseek>:
 800b4b2:	b510      	push	{r4, lr}
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ba:	f000 f855 	bl	800b568 <_lseek_r>
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	89a3      	ldrh	r3, [r4, #12]
 800b4c2:	bf15      	itete	ne
 800b4c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4ce:	81a3      	strheq	r3, [r4, #12]
 800b4d0:	bf18      	it	ne
 800b4d2:	81a3      	strhne	r3, [r4, #12]
 800b4d4:	bd10      	pop	{r4, pc}

0800b4d6 <__sclose>:
 800b4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4da:	f000 b813 	b.w	800b504 <_close_r>
	...

0800b4e0 <_write_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	4608      	mov	r0, r1
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	4d05      	ldr	r5, [pc, #20]	; (800b500 <_write_r+0x20>)
 800b4ec:	602a      	str	r2, [r5, #0]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	f7f7 ff5c 	bl	80033ac <_write>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d102      	bne.n	800b4fe <_write_r+0x1e>
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	b103      	cbz	r3, 800b4fe <_write_r+0x1e>
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	2000056c 	.word	0x2000056c

0800b504 <_close_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	2300      	movs	r3, #0
 800b508:	4d05      	ldr	r5, [pc, #20]	; (800b520 <_close_r+0x1c>)
 800b50a:	4604      	mov	r4, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	602b      	str	r3, [r5, #0]
 800b510:	f7f7 ff68 	bl	80033e4 <_close>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_close_r+0x1a>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_close_r+0x1a>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	2000056c 	.word	0x2000056c

0800b524 <_fstat_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	2300      	movs	r3, #0
 800b528:	4d06      	ldr	r5, [pc, #24]	; (800b544 <_fstat_r+0x20>)
 800b52a:	4604      	mov	r4, r0
 800b52c:	4608      	mov	r0, r1
 800b52e:	4611      	mov	r1, r2
 800b530:	602b      	str	r3, [r5, #0]
 800b532:	f7f7 ff62 	bl	80033fa <_fstat>
 800b536:	1c43      	adds	r3, r0, #1
 800b538:	d102      	bne.n	800b540 <_fstat_r+0x1c>
 800b53a:	682b      	ldr	r3, [r5, #0]
 800b53c:	b103      	cbz	r3, 800b540 <_fstat_r+0x1c>
 800b53e:	6023      	str	r3, [r4, #0]
 800b540:	bd38      	pop	{r3, r4, r5, pc}
 800b542:	bf00      	nop
 800b544:	2000056c 	.word	0x2000056c

0800b548 <_isatty_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	2300      	movs	r3, #0
 800b54c:	4d05      	ldr	r5, [pc, #20]	; (800b564 <_isatty_r+0x1c>)
 800b54e:	4604      	mov	r4, r0
 800b550:	4608      	mov	r0, r1
 800b552:	602b      	str	r3, [r5, #0]
 800b554:	f7f7 ff60 	bl	8003418 <_isatty>
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	d102      	bne.n	800b562 <_isatty_r+0x1a>
 800b55c:	682b      	ldr	r3, [r5, #0]
 800b55e:	b103      	cbz	r3, 800b562 <_isatty_r+0x1a>
 800b560:	6023      	str	r3, [r4, #0]
 800b562:	bd38      	pop	{r3, r4, r5, pc}
 800b564:	2000056c 	.word	0x2000056c

0800b568 <_lseek_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4604      	mov	r4, r0
 800b56c:	4608      	mov	r0, r1
 800b56e:	4611      	mov	r1, r2
 800b570:	2200      	movs	r2, #0
 800b572:	4d05      	ldr	r5, [pc, #20]	; (800b588 <_lseek_r+0x20>)
 800b574:	602a      	str	r2, [r5, #0]
 800b576:	461a      	mov	r2, r3
 800b578:	f7f7 ff58 	bl	800342c <_lseek>
 800b57c:	1c43      	adds	r3, r0, #1
 800b57e:	d102      	bne.n	800b586 <_lseek_r+0x1e>
 800b580:	682b      	ldr	r3, [r5, #0]
 800b582:	b103      	cbz	r3, 800b586 <_lseek_r+0x1e>
 800b584:	6023      	str	r3, [r4, #0]
 800b586:	bd38      	pop	{r3, r4, r5, pc}
 800b588:	2000056c 	.word	0x2000056c

0800b58c <_read_r>:
 800b58c:	b538      	push	{r3, r4, r5, lr}
 800b58e:	4604      	mov	r4, r0
 800b590:	4608      	mov	r0, r1
 800b592:	4611      	mov	r1, r2
 800b594:	2200      	movs	r2, #0
 800b596:	4d05      	ldr	r5, [pc, #20]	; (800b5ac <_read_r+0x20>)
 800b598:	602a      	str	r2, [r5, #0]
 800b59a:	461a      	mov	r2, r3
 800b59c:	f7f7 fee9 	bl	8003372 <_read>
 800b5a0:	1c43      	adds	r3, r0, #1
 800b5a2:	d102      	bne.n	800b5aa <_read_r+0x1e>
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	b103      	cbz	r3, 800b5aa <_read_r+0x1e>
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	bd38      	pop	{r3, r4, r5, pc}
 800b5ac:	2000056c 	.word	0x2000056c

0800b5b0 <_init>:
 800b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b2:	bf00      	nop
 800b5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5b6:	bc08      	pop	{r3}
 800b5b8:	469e      	mov	lr, r3
 800b5ba:	4770      	bx	lr

0800b5bc <_fini>:
 800b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5be:	bf00      	nop
 800b5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5c2:	bc08      	pop	{r3}
 800b5c4:	469e      	mov	lr, r3
 800b5c6:	4770      	bx	lr
